
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  000026c8  0000275c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050d  00800234  00800234  00002890  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  000028f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000166c  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d8  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000710  00000000  00000000  000050e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000822  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb8  00000000  00000000  0000601a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00006ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 c1 01 	jmp	0x382	; 0x382 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 34       	cpi	r26, 0x41	; 65
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b1 02 	call	0x562	; 0x562 <main>
      9e:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:

OSStartHighRdy:
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
      a6:	00 91 3f 06 	lds	r16, 0x063F
                inc     R16                         ;
      aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
      ac:	00 93 3f 06 	sts	0x063F, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
      b0:	e0 91 54 06 	lds	r30, 0x0654
                lds     R31,OSTCBHighRdy+1          ; ready to run
      b4:	f0 91 55 06 	lds	r31, 0x0655

                ld      R28,Z+                      ; Load stack L pointer
      b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
      ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
      bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
      be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
                ret                                 ; Start task
     104:	08 95       	ret

00000106 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     14a:	e0 91 62 06 	lds	r30, 0x0662
                lds     R31,OSTCBCur+1              ;
     14e:	f0 91 63 06 	lds	r31, 0x0663

                in      r28,_SFR_IO_ADDR(SPL)
     152:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     154:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     156:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     158:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     15a:	00 91 44 06 	lds	r16, 0x0644
                sts     OSPrioCur,R16
     15e:	00 93 45 06 	sts	0x0645, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     162:	e0 91 54 06 	lds	r30, 0x0654
                lds     R31,OSTCBHighRdy+1          ; ready to run
     166:	f0 91 55 06 	lds	r31, 0x0655
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     16a:	e0 93 62 06 	sts	0x0662, r30
                sts     OSTCBCur+1,R31              ;
     16e:	f0 93 63 06 	sts	0x0663, r31

                ld      R28,Z+                      ; Restore Y pointer
     172:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     174:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     176:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     178:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
                ret
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     1c0:	00 91 44 06 	lds	r16, 0x0644
                sts     OSPrioCur,R16               ;
     1c4:	00 93 45 06 	sts	0x0645, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     1c8:	e0 91 54 06 	lds	r30, 0x0654
                lds     R31,OSTCBHighRdy+1          ;
     1cc:	f0 91 55 06 	lds	r31, 0x0655
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     1d0:	e0 93 62 06 	sts	0x0662, r30
                sts     OSTCBCur+1,R31              ;
     1d4:	f0 93 63 06 	sts	0x0663, r31

                ld      R28,Z+                      ; Restore Y pointer
     1d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
                ret
     224:	08 95       	ret

00000226 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     26c:	00 91 61 06 	lds	r16, 0x0661
                inc     R16                         ;
     270:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     272:	00 93 61 06 	sts	0x0661, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     276:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     27a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     27c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     27e:	e0 91 62 06 	lds	r30, 0x0662
                lds     R31,OSTCBCur+1              ;
     282:	f0 91 63 06 	lds	r31, 0x0663
                st      Z+,R28                      ; Save Y pointer
     286:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)
     28a:	02 eb       	ldi	r16, 0xB2	; 178
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     28c:	06 bd       	out	0x26, r16	; 38

                sei                                 ; Enable interrupts
     28e:	78 94       	sei

                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     290:	0e 94 81 0c 	call	0x1902	; 0x1902 <OSTimeTick>
                nop
     294:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     296:	0e 94 cc 09 	call	0x1398	; 0x1398 <OSIntExit>

                POPSREG
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     2de:	08 95       	ret

000002e0 <WatchDogReset>:


.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     2e0:	a8 95       	wdr
				ret
     2e2:	08 95       	ret

000002e4 <__vector_9>:

#if 1
.global TIMER2_OVF_vect
TIMER2_OVF_vect:
				PUSHRS                              ; Save all registers
     2e4:	0f 92       	push	r0
     2e6:	1f 92       	push	r1
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     324:	0f b7       	in	r16, 0x3f	; 63
     326:	00 68       	ori	r16, 0x80	; 128
     328:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     32a:	00 91 61 06 	lds	r16, 0x0661
                inc     R16                         ;
     32e:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     330:	00 93 61 06 	sts	0x0661, r16

                call    PostTriggerComplete			; Call timer1 overflow incrementer
     334:	0e 94 1b 04 	call	0x836	; 0x836 <PostTriggerComplete>

                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     338:	0e 94 cc 09 	call	0x1398	; 0x1398 <OSIntExit>
				POPSREG
     33c:	0f 91       	pop	r16
     33e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	7f 90       	pop	r7
     372:	6f 90       	pop	r6
     374:	5f 90       	pop	r5
     376:	4f 90       	pop	r4
     378:	3f 90       	pop	r3
     37a:	2f 90       	pop	r2
     37c:	1f 90       	pop	r1
     37e:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     380:	08 95       	ret

00000382 <SerTxISR>:


#if 1
.global USART_TX_vect								; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:		PUSHRS                              ; Save all registers
     382:	0f 92       	push	r0
     384:	1f 92       	push	r1
     386:	2f 92       	push	r2
     388:	3f 92       	push	r3
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ef 93       	push	r30
     3c0:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     3c2:	0f b7       	in	r16, 0x3f	; 63
     3c4:	00 68       	ori	r16, 0x80	; 128
     3c6:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     3c8:	00 91 61 06 	lds	r16, 0x0661
                inc     R16                         ;
     3cc:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     3ce:	00 93 61 06 	sts	0x0661, r16

				call	PostTxCompleteSem			; Post semaphore indicating transmission of data byte complete
     3d2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <PostTxCompleteSem>
				nop
     3d6:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     3d8:	0e 94 cc 09 	call	0x1398	; 0x1398 <OSIntExit>

                POPSREG
     3dc:	0f 91       	pop	r16
     3de:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	4f 90       	pop	r4
     418:	3f 90       	pop	r3
     41a:	2f 90       	pop	r2
     41c:	1f 90       	pop	r1
     41e:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     420:	08 95       	ret

00000422 <__vector_18>:
#endif

.global USART_RX_vect								; Receive Start Interrupt
USART_RX_vect:
SerRxISR:		PUSHRS								; Save all registers
     422:	0f 92       	push	r0
     424:	1f 92       	push	r1
     426:	2f 92       	push	r2
     428:	3f 92       	push	r3
     42a:	4f 92       	push	r4
     42c:	5f 92       	push	r5
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
				PUSHSREGISR                         ; Save SREG with I bit set!
     462:	0f b7       	in	r16, 0x3f	; 63
     464:	00 68       	ori	r16, 0x80	; 128
     466:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     468:	00 91 61 06 	lds	r16, 0x0661
                inc     R16                         ;
     46c:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     46e:	00 93 61 06 	sts	0x0661, r16

				call	ReadSerialChar				;
     472:	0e 94 7f 03 	call	0x6fe	; 0x6fe <ReadSerialChar>
				nop
     476:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     478:	0e 94 cc 09 	call	0x1398	; 0x1398 <OSIntExit>

                POPSREG
     47c:	0f 91       	pop	r16
     47e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	9f 90       	pop	r9
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	5f 90       	pop	r5
     4b6:	4f 90       	pop	r4
     4b8:	3f 90       	pop	r3
     4ba:	2f 90       	pop	r2
     4bc:	1f 90       	pop	r1
     4be:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     4c0:	08 95       	ret

000004c2 <__vector_1>:


.global INT0_vect
INT0_vect:		PUSHRS								; Save all registers
     4c2:	0f 92       	push	r0
     4c4:	1f 92       	push	r1
     4c6:	2f 92       	push	r2
     4c8:	3f 92       	push	r3
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
				PUSHSREGISR                         ; Save SREG with I bit set!
     502:	0f b7       	in	r16, 0x3f	; 63
     504:	00 68       	ori	r16, 0x80	; 128
     506:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     508:	00 91 61 06 	lds	r16, 0x0661
                inc     R16                         ;
     50c:	03 95       	inc	r16
				sts		OSIntNesting,R16			;
     50e:	00 93 61 06 	sts	0x0661, r16

				call	EchoHelper					; Call pin-driven interrupt handling
     512:	0e 94 34 04 	call	0x868	; 0x868 <EchoHelper>
				nop
     516:	00 00       	nop
				call	OSIntExit					;
     518:	0e 94 cc 09 	call	0x1398	; 0x1398 <OSIntExit>

				POPSREG
     51c:	0f 91       	pop	r16
     51e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	bf 90       	pop	r11
     54a:	af 90       	pop	r10
     54c:	9f 90       	pop	r9
     54e:	8f 90       	pop	r8
     550:	7f 90       	pop	r7
     552:	6f 90       	pop	r6
     554:	5f 90       	pop	r5
     556:	4f 90       	pop	r4
     558:	3f 90       	pop	r3
     55a:	2f 90       	pop	r2
     55c:	1f 90       	pop	r1
     55e:	0f 90       	pop	r0
     560:	08 95       	ret

00000562 <main>:
/*
 *********************************************************************************************************
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
	InitPeripherals();
     56a:	0e 94 b1 04 	call	0x962	; 0x962 <InitPeripherals>

    OSInit();                                              /* Initialize uC/OS-II                      */
     56e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <OSInit>

/* Create OS_EVENT resources here  */;
	SerialTxMBox = OSMboxCreate((void *)0);
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <OSMboxCreate>
     57a:	90 93 77 03 	sts	0x0377, r25
     57e:	80 93 76 03 	sts	0x0376, r24
	//SerialRxMbox = OSMboxCreate((void *)0);
	//LedSem = OSSemCreate(1);
	SerialTxSem = OSSemCreate(1);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <OSSemCreate>
     58a:	90 93 f9 04 	sts	0x04F9, r25
     58e:	80 93 f8 04 	sts	0x04F8, r24
	//SerialRxSem = OSSemCreate(1);
	TriggerSem = OSSemCreate(1);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <OSSemCreate>
     59a:	90 93 6a 03 	sts	0x036A, r25
     59e:	80 93 69 03 	sts	0x0369, r24
	//LedMBox = OSMboxCreate((void *)0);
	TriggerMbox = OSMboxCreate((void *)0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <OSMboxCreate>
     5aa:	90 93 70 03 	sts	0x0370, r25
     5ae:	80 93 6f 03 	sts	0x036F, r24
	//MAX_RANGE = 200;
	//MIN_RANGE = 0;
	//MAX_RATE = 1000;
	//MIN_RATE = 10;

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[START_TASK_STK_SIZE - 1], 0);
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	4b e3       	ldi	r20, 0x3B	; 59
     5b6:	56 e0       	ldi	r21, 0x06	; 6
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	85 ee       	ldi	r24, 0xE5	; 229
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <OSTaskCreate>

    OSStart();                                             /* Start multitasking                       */
     5c4:	0e 94 88 0a 	call	0x1510	; 0x1510 <OSStart>

	while (1);
     5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <main+0x66>

000005ca <TaskStart>:
/*
 *********************************************************************************************************
 *                                              STARTUP TASK
 *********************************************************************************************************
 */
void  TaskStart (void *pdata) {
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <TaskStart+0x6>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
    pdata = pdata;                                         /* Prevent compiler warning                 */

	OSStatInit(); //uncomment if set OS_TASK_STAT_EN = 1   /* Initialize uC/OS-II's statistics         */
     5d8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <OSStatInit>

	//OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TASK_STK_SIZE - 1], 6);
	OSTaskCreate(SensorTask, (void *)0, &TaskSensorStk[TASK_STK_SIZE - 1], 8);
     5dc:	28 e0       	ldi	r18, 0x08	; 8
     5de:	47 e7       	ldi	r20, 0x77	; 119
     5e0:	54 e0       	ldi	r21, 0x04	; 4
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	88 e9       	ldi	r24, 0x98	; 152
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <OSTaskCreate>
	//OSTaskCreate(LedTask, (void *)0, &TaskLedStk[TASK_STK_SIZE - 1], 10);

	OSTaskCreate(SerialTransmitTask, (void *) 0, &TaskSerialTransmitStk[TASK_STK_SIZE-1], 12);
     5ee:	2c e0       	ldi	r18, 0x0C	; 12
     5f0:	47 ef       	ldi	r20, 0xF7	; 247
     5f2:	54 e0       	ldi	r21, 0x04	; 4
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	8d e0       	ldi	r24, 0x0D	; 13
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <OSTaskCreate>
	//OSTaskCreate(SerialReceiveTask, (void *) 0, &SerialReceiveTaskStk[TASK_STK_SIZE-1], 14);

    for (;;) {
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     600:	10 92 48 06 	sts	0x0648, r1
     604:	10 92 49 06 	sts	0x0649, r1
     608:	10 92 4a 06 	sts	0x064A, r1
     60c:	10 92 4b 06 	sts	0x064B, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     610:	88 ec       	ldi	r24, 0xC8	; 200
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <OSTimeDly>
    }
     618:	f3 cf       	rjmp	.-26     	; 0x600 <TaskStart+0x36>

0000061a <SerialTransmitTask>:
/*
 *********************************************************************************************************
 *                                              SerialTransmitTask
 *********************************************************************************************************
 */
void  SerialTransmitTask (void *pdata) {
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	2a 97       	sbiw	r28, 0x0a	; 10
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	9a 87       	std	Y+10, r25	; 0x0a
     630:	89 87       	std	Y+9, r24	; 0x09
	INT8U  err;
	void *msg;
	INT8U CharCounter=0;
     632:	19 82       	std	Y+1, r1	; 0x01
	INT16U StringLength;
	char *LocalMessage;

	for (;;) {
		msg = OSMboxPend(SerialTxMBox, 0, &err);
     634:	80 91 76 03 	lds	r24, 0x0376
     638:	90 91 77 03 	lds	r25, 0x0377
     63c:	9e 01       	movw	r18, r28
     63e:	28 5f       	subi	r18, 0xF8	; 248
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <OSMboxPend>
     64c:	9b 83       	std	Y+3, r25	; 0x03
     64e:	8a 83       	std	Y+2, r24	; 0x02
		switch(err){
     650:	88 85       	ldd	r24, Y+8	; 0x08
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	09 f0       	breq	.+2      	; 0x65c <SerialTransmitTask+0x42>
					OSSemPend(SerialTxSem,0,&err);
				}
				UCSR0B &= ~_BV(TXCIE0);	//disable TX_Empty Interrupt
				break;
			default:
				break;
     65a:	43 c0       	rjmp	.+134    	; 0x6e2 <SerialTransmitTask+0xc8>

	for (;;) {
		msg = OSMboxPend(SerialTxMBox, 0, &err);
		switch(err){
			case OS_NO_ERR:
				LocalMessage = (char*)msg;
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	9d 83       	std	Y+5, r25	; 0x05
     662:	8c 83       	std	Y+4, r24	; 0x04
				StringLength = (INT16U)strlen(LocalMessage);
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	9d 81       	ldd	r25, Y+5	; 0x05
     668:	0e 94 88 10 	call	0x2110	; 0x2110 <strlen>
     66c:	9f 83       	std	Y+7, r25	; 0x07
     66e:	8e 83       	std	Y+6, r24	; 0x06
				UCSR0B |= _BV(TXCIE0);	//enable TX_Empty Interrupt
     670:	81 ec       	ldi	r24, 0xC1	; 193
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	21 ec       	ldi	r18, 0xC1	; 193
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	20 64       	ori	r18, 0x40	; 64
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
				for (CharCounter=0; CharCounter<StringLength; ++CharCounter) {
     682:	19 82       	std	Y+1, r1	; 0x01
     684:	1c c0       	rjmp	.+56     	; 0x6be <SerialTransmitTask+0xa4>
					UDR0 = LocalMessage[CharCounter];
     686:	86 ec       	ldi	r24, 0xC6	; 198
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	29 81       	ldd	r18, Y+1	; 0x01
     68c:	22 2f       	mov	r18, r18
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	4c 81       	ldd	r20, Y+4	; 0x04
     692:	5d 81       	ldd	r21, Y+5	; 0x05
     694:	24 0f       	add	r18, r20
     696:	35 1f       	adc	r19, r21
     698:	f9 01       	movw	r30, r18
     69a:	20 81       	ld	r18, Z
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
					OSSemPend(SerialTxSem,0,&err);
     6a0:	80 91 f8 04 	lds	r24, 0x04F8
     6a4:	90 91 f9 04 	lds	r25, 0x04F9
     6a8:	9e 01       	movw	r18, r28
     6aa:	28 5f       	subi	r18, 0xF8	; 248
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	a9 01       	movw	r20, r18
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <OSSemPend>
		switch(err){
			case OS_NO_ERR:
				LocalMessage = (char*)msg;
				StringLength = (INT16U)strlen(LocalMessage);
				UCSR0B |= _BV(TXCIE0);	//enable TX_Empty Interrupt
				for (CharCounter=0; CharCounter<StringLength; ++CharCounter) {
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	8e 81       	ldd	r24, Y+6	; 0x06
     6c6:	9f 81       	ldd	r25, Y+7	; 0x07
     6c8:	28 17       	cp	r18, r24
     6ca:	39 07       	cpc	r19, r25
     6cc:	e0 f2       	brcs	.-72     	; 0x686 <SerialTransmitTask+0x6c>
					UDR0 = LocalMessage[CharCounter];
					OSSemPend(SerialTxSem,0,&err);
				}
				UCSR0B &= ~_BV(TXCIE0);	//disable TX_Empty Interrupt
     6ce:	81 ec       	ldi	r24, 0xC1	; 193
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	21 ec       	ldi	r18, 0xC1	; 193
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	2f 7b       	andi	r18, 0xBF	; 191
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
				break;
     6e0:	00 00       	nop
			default:
				break;
		}
	}
     6e2:	a8 cf       	rjmp	.-176    	; 0x634 <SerialTransmitTask+0x1a>

000006e4 <PostTxCompleteSem>:
}

/*	Routine to Post the Transmit buffer empty semaphore	*/
void PostTxCompleteSem (void) {
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	OSSemPost(SerialTxSem);
     6ec:	80 91 f8 04 	lds	r24, 0x04F8
     6f0:	90 91 f9 04 	lds	r25, 0x04F9
     6f4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <OSSemPost>
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <ReadSerialChar>:
		}
	}
}

/* Routine to Post the Receive buffer queue */
void ReadSerialChar(void){
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	1f 92       	push	r1
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
	char rxChar;	// fetch received byte value into variable "rxByte"
	//		must read UDR0 to clear interrupt flag!
	rxChar = UDR0;
     708:	86 ec       	ldi	r24, 0xC6	; 198
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	89 83       	std	Y+1, r24	; 0x01
	// extend this function so that it places the rxByte into a QUEUE
	OSMboxPost(SerialRxMbox, (void *)rxChar);
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9c 01       	movw	r18, r24
     71a:	80 91 6d 03 	lds	r24, 0x036D
     71e:	90 91 6e 03 	lds	r25, 0x036E
     722:	b9 01       	movw	r22, r18
     724:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <OSMboxPost>
}
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <SensorTask>:
/*
 *********************************************************************************************************
 *                                              ECOLOCATION
 *********************************************************************************************************
 */
void  SensorTask (void *pdata){
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	2c 97       	sbiw	r28, 0x0c	; 12
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	98 87       	std	Y+8, r25	; 0x08
     746:	8f 83       	std	Y+7, r24	; 0x07
	INT8U err;
	void *msg;
	char LocalMessage;
	timeoutFrequency = 10;
     748:	8a e0       	ldi	r24, 0x0A	; 10
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 fb 04 	sts	0x04FB, r25
     750:	80 93 fa 04 	sts	0x04FA, r24
	INT16U TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
     754:	20 91 fa 04 	lds	r18, 0x04FA
     758:	30 91 fb 04 	lds	r19, 0x04FB
     75c:	88 ec       	ldi	r24, 0xC8	; 200
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	b9 01       	movw	r22, r18
     762:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodhi4>
     766:	cb 01       	movw	r24, r22
     768:	9a 83       	std	Y+2, r25	; 0x02
     76a:	89 83       	std	Y+1, r24	; 0x01
	for (;;) {
		msg = OSMboxPend(TriggerMbox, TriggerTimeOut, &err);
     76c:	80 91 6f 03 	lds	r24, 0x036F
     770:	90 91 70 03 	lds	r25, 0x0370
     774:	ae 01       	movw	r20, r28
     776:	4a 5f       	subi	r20, 0xFA	; 250
     778:	5f 4f       	sbci	r21, 0xFF	; 255
     77a:	29 81       	ldd	r18, Y+1	; 0x01
     77c:	3a 81       	ldd	r19, Y+2	; 0x02
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <OSMboxPend>
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	8b 83       	std	Y+3, r24	; 0x03
		switch(err){
     788:	8e 81       	ldd	r24, Y+6	; 0x06
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	21 f0       	breq	.+8      	; 0x79a <SensorTask+0x6a>
     792:	8a 30       	cpi	r24, 0x0A	; 10
     794:	91 05       	cpc	r25, r1
     796:	09 f1       	breq	.+66     	; 0x7da <SensorTask+0xaa>
				echoState = ECHO_OFF_STATE;

				OSSemPend(TriggerSem,TriggerTimeOut,&err);
				break;
		}
	}
     798:	e9 cf       	rjmp	.-46     	; 0x76c <SensorTask+0x3c>
	INT16U TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
	for (;;) {
		msg = OSMboxPend(TriggerMbox, TriggerTimeOut, &err);
		switch(err){
			case OS_NO_ERR: // message
				LocalMessage = (char)msg;
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	9c 81       	ldd	r25, Y+4	; 0x04
     79e:	8d 83       	std	Y+5, r24	; 0x05
				switch (LocalMessage){
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	88 2f       	mov	r24, r24
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	82 37       	cpi	r24, 0x72	; 114
     7a8:	91 05       	cpc	r25, r1
     7aa:	31 f0       	breq	.+12     	; 0x7b8 <SensorTask+0x88>
     7ac:	88 37       	cpi	r24, 0x78	; 120
     7ae:	91 05       	cpc	r25, r1
     7b0:	81 f4       	brne	.+32     	; 0x7d2 <SensorTask+0xa2>
					case 'x':
						TriggerTimeOut = 0;
     7b2:	1a 82       	std	Y+2, r1	; 0x02
     7b4:	19 82       	std	Y+1, r1	; 0x01
						break;
     7b6:	10 c0       	rjmp	.+32     	; 0x7d8 <SensorTask+0xa8>
					case 'r':
						TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
     7b8:	20 91 fa 04 	lds	r18, 0x04FA
     7bc:	30 91 fb 04 	lds	r19, 0x04FB
     7c0:	88 ec       	ldi	r24, 0xC8	; 200
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	b9 01       	movw	r22, r18
     7c6:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodhi4>
     7ca:	cb 01       	movw	r24, r22
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
						break;
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <SensorTask+0xa8>
					default:
						TriggerTimeOut = 0;
     7d2:	1a 82       	std	Y+2, r1	; 0x02
     7d4:	19 82       	std	Y+1, r1	; 0x01
						break;
     7d6:	00 00       	nop
				}
				break;
     7d8:	2d c0       	rjmp	.+90     	; 0x834 <SensorTask+0x104>
			case OS_TIMEOUT: // trigger routine
				/*	Following cycle used to determine distance
					of nearest object through echolocation		*/
				PORTB |= _BV(PORTB4);	// set trigPin HIGH
     7da:	85 e2       	ldi	r24, 0x25	; 37
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	25 e2       	ldi	r18, 0x25	; 37
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	20 61       	ori	r18, 0x10	; 16
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
				cli();	//disable interrupts
     7ec:	f8 94       	cli
				EICRA = (1<<ISC01)|(1<<ISC00); // RISING EDGE on INT0 GENERATES AN INTERRUPT (see 328p Data Sheet, Table 12-2)
     7ee:	89 e6       	ldi	r24, 0x69	; 105
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	23 e0       	ldi	r18, 0x03	; 3
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
				TCNT2 = 0xE0;			/* sets counter value to 224 (11100000b)
     7f8:	82 eb       	ldi	r24, 0xB2	; 178
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	20 ee       	ldi	r18, 0xE0	; 224
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
											allows for 31 increments until overflow */
				PRR &= ~_BV(PRTIM2);	/* reset the bit to turn on Timer2 module
     802:	84 e6       	ldi	r24, 0x64	; 100
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	24 e6       	ldi	r18, 0x64	; 100
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	2f 7b       	andi	r18, 0xBF	; 191
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
											in the power management section */
				sei();	//enable interrupts
     814:	78 94       	sei
				echoState = ECHO_OFF_STATE;
     816:	10 92 71 03 	sts	0x0371, r1

				OSSemPend(TriggerSem,TriggerTimeOut,&err);
     81a:	80 91 69 03 	lds	r24, 0x0369
     81e:	90 91 6a 03 	lds	r25, 0x036A
     822:	ae 01       	movw	r20, r28
     824:	4a 5f       	subi	r20, 0xFA	; 250
     826:	5f 4f       	sbci	r21, 0xFF	; 255
     828:	29 81       	ldd	r18, Y+1	; 0x01
     82a:	3a 81       	ldd	r19, Y+2	; 0x02
     82c:	b9 01       	movw	r22, r18
     82e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <OSSemPend>
				break;
     832:	00 00       	nop
		}
	}
     834:	9b cf       	rjmp	.-202    	; 0x76c <SensorTask+0x3c>

00000836 <PostTriggerComplete>:
}

/* Interrupt driven by Timer2 overflow */
void PostTriggerComplete(void) {
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~_BV(PORTB4);	// turn trigger pin off
     83e:	85 e2       	ldi	r24, 0x25	; 37
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	25 e2       	ldi	r18, 0x25	; 37
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	2f 7e       	andi	r18, 0xEF	; 239
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
	PRR |= _BV(PRTIM2);		/* set the bit to turn off the Timer2 module
     850:	84 e6       	ldi	r24, 0x64	; 100
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	24 e6       	ldi	r18, 0x64	; 100
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	20 64       	ori	r18, 0x40	; 64
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
								in the power management section */
	//OSSemPost(TriggerSem);
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <EchoHelper>:

#if 1
void EchoHelper(void){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	a4 97       	sbiw	r28, 0x24	; 36
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
	char DistMessage[TX_BUFFER_SIZE];

	switch(echoState){
     87c:	80 91 71 03 	lds	r24, 0x0371
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	21 f0       	breq	.+8      	; 0x890 <EchoHelper+0x28>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	91 05       	cpc	r25, r1
     88c:	79 f0       	breq	.+30     	; 0x8ac <EchoHelper+0x44>
     88e:	5d c0       	rjmp	.+186    	; 0x94a <__stack+0x4b>
		case ECHO_OFF_STATE:
			TCNT1 = 0x0000;				// reset timer/counter1
     890:	84 e8       	ldi	r24, 0x84	; 132
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	11 82       	std	Z+1, r1	; 0x01
     898:	10 82       	st	Z, r1
			EICRA = (1<<ISC01);			// INT0 FALLING EDGE => INTERRUPT (see 328p Data Sheet, Table 12-2)
     89a:	89 e6       	ldi	r24, 0x69	; 105
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	22 e0       	ldi	r18, 0x02	; 2
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18

			echoState = ECHO_ON_STATE;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 71 03 	sts	0x0371, r24
			break;
     8aa:	52 c0       	rjmp	.+164    	; 0x950 <__stack+0x51>
		case ECHO_ON_STATE:
			cnt = TCNT1;				// read timer/counter1
     8ac:	84 e8       	ldi	r24, 0x84	; 132
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	90 93 73 03 	sts	0x0373, r25
     8ba:	80 93 72 03 	sts	0x0372, r24
			cnt /= SOUND_CONVERSION_FACTOR;
     8be:	80 91 72 03 	lds	r24, 0x0372
     8c2:	90 91 73 03 	lds	r25, 0x0373
     8c6:	9c 01       	movw	r18, r24
     8c8:	a9 e0       	ldi	r26, 0x09	; 9
     8ca:	bc e8       	ldi	r27, 0x8C	; 140
     8cc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__umulhisi3>
     8d0:	00 24       	eor	r0, r0
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	00 1c       	adc	r0, r0
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	00 1c       	adc	r0, r0
     8de:	89 2f       	mov	r24, r25
     8e0:	90 2d       	mov	r25, r0
     8e2:	90 93 73 03 	sts	0x0373, r25
     8e6:	80 93 72 03 	sts	0x0372, r24
			sprintf(DistMessage, "%u\n\r", cnt);
     8ea:	80 91 72 03 	lds	r24, 0x0372
     8ee:	90 91 73 03 	lds	r25, 0x0373
     8f2:	29 2f       	mov	r18, r25
     8f4:	2f 93       	push	r18
     8f6:	8f 93       	push	r24
     8f8:	87 e2       	ldi	r24, 0x27	; 39
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	89 2f       	mov	r24, r25
     8fe:	8f 93       	push	r24
     900:	87 e2       	ldi	r24, 0x27	; 39
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	8f 93       	push	r24
     906:	ce 01       	movw	r24, r28
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	89 2f       	mov	r24, r25
     90c:	8f 93       	push	r24
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	8f 93       	push	r24
     914:	0e 94 91 10 	call	0x2122	; 0x2122 <sprintf>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
			OSMboxPost(SerialTxMBox, (void *)DistMessage);
     924:	80 91 76 03 	lds	r24, 0x0376
     928:	90 91 77 03 	lds	r25, 0x0377
     92c:	9e 01       	movw	r18, r28
     92e:	2f 5f       	subi	r18, 0xFF	; 255
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	b9 01       	movw	r22, r18
     934:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <OSMboxPost>

			echoState = ECHO_OFF_STATE;
     938:	10 92 71 03 	sts	0x0371, r1
			OSSemPost(TriggerSem);
     93c:	80 91 69 03 	lds	r24, 0x0369
     940:	90 91 6a 03 	lds	r25, 0x036A
     944:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <OSSemPost>
			break;
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
		default:
			echoState = ECHO_OFF_STATE;
     94a:	10 92 71 03 	sts	0x0371, r1
			break;
     94e:	00 00       	nop
	}
}
     950:	a4 96       	adiw	r28, 0x24	; 36
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <InitPeripherals>:


void InitPeripherals(void);

void InitPeripherals(void)
{
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
	cli();			// disable global interrupts
     96a:	f8 94       	cli

	// manage WDT
	WatchDogReset();
     96c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	//MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
	//WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
	//WDTCSR=0x00;					// turn wdt off
	wdt_disable();
     970:	88 e1       	ldi	r24, 0x18	; 24
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	80 93 60 00 	sts	0x0060, r24
     97a:	10 92 60 00 	sts	0x0060, r1
     97e:	0f be       	out	0x3f, r0	; 63

#if 1
	// PortB
	//
	PORTB &= ~_BV(PORTB5);	// set pin 5 (Arduino DIO pin 13) low to turn led off
     980:	85 e2       	ldi	r24, 0x25	; 37
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	25 e2       	ldi	r18, 0x25	; 37
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	2f 7d       	andi	r18, 0xDF	; 223
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
	PORTB &= ~_BV(PORTB4);	// set pin 4 (trigPin) low
     992:	85 e2       	ldi	r24, 0x25	; 37
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	25 e2       	ldi	r18, 0x25	; 37
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	2f 7e       	andi	r18, 0xEF	; 239
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
	PORTB &= ~_BV(PORTB0);	// set pin 0 low
     9a4:	85 e2       	ldi	r24, 0x25	; 37
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	25 e2       	ldi	r18, 0x25	; 37
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	2e 7f       	andi	r18, 0xFE	; 254
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
	DDRB |= _BV(DDB5);		// set pin 5 of PORTB for output
     9b6:	84 e2       	ldi	r24, 0x24	; 36
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	24 e2       	ldi	r18, 0x24	; 36
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	f9 01       	movw	r30, r18
     9c0:	20 81       	ld	r18, Z
     9c2:	20 62       	ori	r18, 0x20	; 32
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
	DDRB |= _BV(DDB4);		// set pin 4 of PORTB for output
     9c8:	84 e2       	ldi	r24, 0x24	; 36
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	24 e2       	ldi	r18, 0x24	; 36
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	20 61       	ori	r18, 0x10	; 16
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0);		// set pin 0 of PORTB for output
     9da:	84 e2       	ldi	r24, 0x24	; 36
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	24 e2       	ldi	r18, 0x24	; 36
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	20 81       	ld	r18, Z
     9e6:	21 60       	ori	r18, 0x01	; 1
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
#endif

#if 1
	// PortD
	//		EXTERNAL INTERRUPT PIN (ARDUINO DIO pin 2)
	PORTD &= ~_BV(PORTD2);	// set pin 2 (Arduino DIO pin 2) low
     9ec:	8b e2       	ldi	r24, 0x2B	; 43
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	2b e2       	ldi	r18, 0x2B	; 43
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	2b 7f       	andi	r18, 0xFB	; 251
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
	DDRD &= ~_BV(DDD2);		// set pin 2 (echoPin) for input
     9fe:	8a e2       	ldi	r24, 0x2A	; 42
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	2a e2       	ldi	r18, 0x2A	; 42
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	2b 7f       	andi	r18, 0xFB	; 251
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18

	// External Interrupt Control Register A
	EICRA = (1<<ISC01) | (1<<ISC00);	// RISING EDGE on INT0 GENERATES AN INTERRUPT
     a10:	89 e6       	ldi	r24, 0x69	; 105
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	23 e0       	ldi	r18, 0x03	; 3
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0);				// clear the INT0 interrupt flag
     a1a:	8c e3       	ldi	r24, 0x3C	; 60
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);					// enable INT0 interrupt
     a24:	8d e3       	ldi	r24, 0x3D	; 61
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
#endif

#if 1
	// Timer0 : UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     a2e:	84 e4       	ldi	r24, 0x44	; 68
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	23 e0       	ldi	r18, 0x03	; 3
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     a38:	85 e4       	ldi	r24, 0x45	; 69
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	2d e0       	ldi	r18, 0x0D	; 13
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     a42:	87 e4       	ldi	r24, 0x47	; 71
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	2d e4       	ldi	r18, 0x4D	; 77
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     a4c:	8e e6       	ldi	r24, 0x6E	; 110
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2e e6       	ldi	r18, 0x6E	; 110
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	20 81       	ld	r18, Z
     a58:	21 60       	ori	r18, 0x01	; 1
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     a5e:	84 e6       	ldi	r24, 0x64	; 100
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	24 e6       	ldi	r18, 0x64	; 100
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	f9 01       	movw	r30, r18
     a68:	20 81       	ld	r18, Z
     a6a:	2f 7d       	andi	r18, 0xDF	; 223
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
#endif

#if 1
	// Timer1 : duration counter
	//
	TCCR1A = 0x00;				/* set timer1: OC1A/OC1B disconnected; normal mode           */
     a70:	80 e8       	ldi	r24, 0x80	; 128
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	fc 01       	movw	r30, r24
     a76:	10 82       	st	Z, r1
	TCCR1B = _BV(CS11);			/* timer1 clock = system clock/128      */
     a78:	81 e8       	ldi	r24, 0x81	; 129
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	22 e0       	ldi	r18, 0x02	; 2
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
	TCCR1C = 0x00;				/* NO force Compare */
     a82:	82 e8       	ldi	r24, 0x82	; 130
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	fc 01       	movw	r30, r24
     a88:	10 82       	st	Z, r1
	TIFR1 |= _BV(ICF1) | _BV(OCF1B) | _BV(OCF1A) | _BV(TOV1);	/* clear all flags */
     a8a:	86 e3       	ldi	r24, 0x36	; 54
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	26 e3       	ldi	r18, 0x36	; 54
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	f9 01       	movw	r30, r18
     a94:	20 81       	ld	r18, Z
     a96:	27 62       	ori	r18, 0x27	; 39
     a98:	fc 01       	movw	r30, r24
     a9a:	20 83       	st	Z, r18
	PRR &= ~_BV(PRTIM1);			/* reset the bit to turn ON Timer1 module in the power management section */
     a9c:	84 e6       	ldi	r24, 0x64	; 100
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	24 e6       	ldi	r18, 0x64	; 100
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	f9 01       	movw	r30, r18
     aa6:	20 81       	ld	r18, Z
     aa8:	27 7f       	andi	r18, 0xF7	; 247
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
#endif

#if 1
	// Timer2 : 10us timer
	//
	TCCR2A = 0x00;							// set timer2: OC2A/OC2B disconnected; normal mode
     aae:	80 eb       	ldi	r24, 0xB0	; 176
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	fc 01       	movw	r30, r24
     ab4:	10 82       	st	Z, r1
	//TCCR2B = _BV(CS22)|_BV(CS21)|_BV(CS20);	// timer2 clock = system clock/1024
	TCCR2B = _BV(CS21);						// timer2 clock = system clock/8
     ab6:	81 eb       	ldi	r24, 0xB1	; 177
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	22 e0       	ldi	r18, 0x02	; 2
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	TIFR2 |= _BV(TOV2);						// clear overflow bit
     ac0:	87 e3       	ldi	r24, 0x37	; 55
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	27 e3       	ldi	r18, 0x37	; 55
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	21 60       	ori	r18, 0x01	; 1
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
	TIMSK2 |= _BV(TOIE2);					// enable timer2 overflow interrupt
     ad2:	80 e7       	ldi	r24, 0x70	; 112
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	20 e7       	ldi	r18, 0x70	; 112
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	21 60       	ori	r18, 0x01	; 1
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 83       	st	Z, r18
	PRR |= _BV(PRTIM2);						// set the bit to turn off the Timer2 module in the power management section
     ae4:	84 e6       	ldi	r24, 0x64	; 100
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	24 e6       	ldi	r18, 0x64	; 100
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	f9 01       	movw	r30, r18
     aee:	20 81       	ld	r18, Z
     af0:	20 64       	ori	r18, 0x40	; 64
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
#endif

#if 1
	// USART0 (based on AVR ATMega 328p Data Sheet, pg. 183)
	//
	UBRR0H = (unsigned char)(UBRR>>8);	// set baud rate = 38400
     af6:	85 ec       	ldi	r24, 0xC5	; 197
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	fc 01       	movw	r30, r24
     afc:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)UBRR;		//
     afe:	84 ec       	ldi	r24, 0xC4	; 196
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	29 e1       	ldi	r18, 0x19	; 25
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
	//UCSR0A = (1<<U2X0); // doubles the effective baud rate (because OS_TICKS_PER_SECOND got halved)
	/* enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		//
     b08:	81 ec       	ldi	r24, 0xC1	; 193
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e1       	ldi	r18, 0x18	; 24
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
	/* set frame format: 8data, 1 stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01)|(0<USBS0);
     b12:	82 ec       	ldi	r24, 0xC2	; 194
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	27 e0       	ldi	r18, 0x07	; 7
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
#endif

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     b1c:	78 94       	sei
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <OSTaskStkInit>:
 **********************************************************************************************************
 */

//OS_STK *OSTaskStkInit (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
void *OSTaskStkInit (void (*task)(void *pd), void *pdata, void *ptos, INT16U opt)
{
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	2c 97       	sbiw	r28, 0x0c	; 12
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
     b3c:	78 87       	std	Y+8, r23	; 0x08
     b3e:	6f 83       	std	Y+7, r22	; 0x07
     b40:	5a 87       	std	Y+10, r21	; 0x0a
     b42:	49 87       	std	Y+9, r20	; 0x09
     b44:	3c 87       	std	Y+12, r19	; 0x0c
     b46:	2b 87       	std	Y+11, r18	; 0x0b
    INT8U  *stk;
    INT16U  tmp;

    opt     = opt;                          /* 'opt' is not used, prevent warning                       */
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
     b48:	89 85       	ldd	r24, Y+9	; 0x09
     b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	89 83       	std	Y+1, r24	; 0x01
    tmp     = (INT16U)task;
     b50:	8d 81       	ldd	r24, Y+5	; 0x05
     b52:	9e 81       	ldd	r25, Y+6	; 0x06
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	9c 01       	movw	r18, r24
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	31 09       	sbc	r19, r1
     b62:	3a 83       	std	Y+2, r19	; 0x02
     b64:	29 83       	std	Y+1, r18	; 0x01
     b66:	2b 81       	ldd	r18, Y+3	; 0x03
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	9c 01       	movw	r18, r24
     b72:	21 50       	subi	r18, 0x01	; 1
     b74:	31 09       	sbc	r19, r1
     b76:	3a 83       	std	Y+2, r19	; 0x02
     b78:	29 83       	std	Y+1, r18	; 0x01
     b7a:	2b 81       	ldd	r18, Y+3	; 0x03
     b7c:	3c 81       	ldd	r19, Y+4	; 0x04
     b7e:	23 2f       	mov	r18, r19
     b80:	33 27       	eor	r19, r19
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	9c 01       	movw	r18, r24
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	31 09       	sbc	r19, r1
     b90:	3a 83       	std	Y+2, r19	; 0x02
     b92:	29 83       	std	Y+1, r18	; 0x01
     b94:	fc 01       	movw	r30, r24
     b96:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	9c 01       	movw	r18, r24
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	31 09       	sbc	r19, r1
     ba2:	3a 83       	std	Y+2, r19	; 0x02
     ba4:	29 83       	std	Y+1, r18	; 0x01
     ba6:	fc 01       	movw	r30, r24
     ba8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	9c 01       	movw	r18, r24
     bb0:	21 50       	subi	r18, 0x01	; 1
     bb2:	31 09       	sbc	r19, r1
     bb4:	3a 83       	std	Y+2, r19	; 0x02
     bb6:	29 83       	std	Y+1, r18	; 0x01
     bb8:	fc 01       	movw	r30, r24
     bba:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	9c 01       	movw	r18, r24
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	31 09       	sbc	r19, r1
     bc6:	3a 83       	std	Y+2, r19	; 0x02
     bc8:	29 83       	std	Y+1, r18	; 0x01
     bca:	fc 01       	movw	r30, r24
     bcc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	9c 01       	movw	r18, r24
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	31 09       	sbc	r19, r1
     bd8:	3a 83       	std	Y+2, r19	; 0x02
     bda:	29 83       	std	Y+1, r18	; 0x01
     bdc:	fc 01       	movw	r30, r24
     bde:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	9c 01       	movw	r18, r24
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	31 09       	sbc	r19, r1
     bea:	3a 83       	std	Y+2, r19	; 0x02
     bec:	29 83       	std	Y+1, r18	; 0x01
     bee:	fc 01       	movw	r30, r24
     bf0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	9c 01       	movw	r18, r24
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	31 09       	sbc	r19, r1
     bfc:	3a 83       	std	Y+2, r19	; 0x02
     bfe:	29 83       	std	Y+1, r18	; 0x01
     c00:	fc 01       	movw	r30, r24
     c02:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	9c 01       	movw	r18, r24
     c0a:	21 50       	subi	r18, 0x01	; 1
     c0c:	31 09       	sbc	r19, r1
     c0e:	3a 83       	std	Y+2, r19	; 0x02
     c10:	29 83       	std	Y+1, r18	; 0x01
     c12:	fc 01       	movw	r30, r24
     c14:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	9c 01       	movw	r18, r24
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	31 09       	sbc	r19, r1
     c20:	3a 83       	std	Y+2, r19	; 0x02
     c22:	29 83       	std	Y+1, r18	; 0x01
     c24:	fc 01       	movw	r30, r24
     c26:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	9c 01       	movw	r18, r24
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	31 09       	sbc	r19, r1
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	29 83       	std	Y+1, r18	; 0x01
     c36:	fc 01       	movw	r30, r24
     c38:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	9c 01       	movw	r18, r24
     c40:	21 50       	subi	r18, 0x01	; 1
     c42:	31 09       	sbc	r19, r1
     c44:	3a 83       	std	Y+2, r19	; 0x02
     c46:	29 83       	std	Y+1, r18	; 0x01
     c48:	fc 01       	movw	r30, r24
     c4a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	9c 01       	movw	r18, r24
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	31 09       	sbc	r19, r1
     c56:	3a 83       	std	Y+2, r19	; 0x02
     c58:	29 83       	std	Y+1, r18	; 0x01
     c5a:	fc 01       	movw	r30, r24
     c5c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	9c 01       	movw	r18, r24
     c64:	21 50       	subi	r18, 0x01	; 1
     c66:	31 09       	sbc	r19, r1
     c68:	3a 83       	std	Y+2, r19	; 0x02
     c6a:	29 83       	std	Y+1, r18	; 0x01
     c6c:	fc 01       	movw	r30, r24
     c6e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	9c 01       	movw	r18, r24
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	31 09       	sbc	r19, r1
     c7a:	3a 83       	std	Y+2, r19	; 0x02
     c7c:	29 83       	std	Y+1, r18	; 0x01
     c7e:	fc 01       	movw	r30, r24
     c80:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	9c 01       	movw	r18, r24
     c88:	21 50       	subi	r18, 0x01	; 1
     c8a:	31 09       	sbc	r19, r1
     c8c:	3a 83       	std	Y+2, r19	; 0x02
     c8e:	29 83       	std	Y+1, r18	; 0x01
     c90:	fc 01       	movw	r30, r24
     c92:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	9c 01       	movw	r18, r24
     c9a:	21 50       	subi	r18, 0x01	; 1
     c9c:	31 09       	sbc	r19, r1
     c9e:	3a 83       	std	Y+2, r19	; 0x02
     ca0:	29 83       	std	Y+1, r18	; 0x01
     ca2:	fc 01       	movw	r30, r24
     ca4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	9c 01       	movw	r18, r24
     cac:	21 50       	subi	r18, 0x01	; 1
     cae:	31 09       	sbc	r19, r1
     cb0:	3a 83       	std	Y+2, r19	; 0x02
     cb2:	29 83       	std	Y+1, r18	; 0x01
     cb4:	fc 01       	movw	r30, r24
     cb6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	9c 01       	movw	r18, r24
     cbe:	21 50       	subi	r18, 0x01	; 1
     cc0:	31 09       	sbc	r19, r1
     cc2:	3a 83       	std	Y+2, r19	; 0x02
     cc4:	29 83       	std	Y+1, r18	; 0x01
     cc6:	fc 01       	movw	r30, r24
     cc8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	9c 01       	movw	r18, r24
     cd0:	21 50       	subi	r18, 0x01	; 1
     cd2:	31 09       	sbc	r19, r1
     cd4:	3a 83       	std	Y+2, r19	; 0x02
     cd6:	29 83       	std	Y+1, r18	; 0x01
     cd8:	fc 01       	movw	r30, r24
     cda:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	9c 01       	movw	r18, r24
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	31 09       	sbc	r19, r1
     ce6:	3a 83       	std	Y+2, r19	; 0x02
     ce8:	29 83       	std	Y+1, r18	; 0x01
     cea:	fc 01       	movw	r30, r24
     cec:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	9c 01       	movw	r18, r24
     cf4:	21 50       	subi	r18, 0x01	; 1
     cf6:	31 09       	sbc	r19, r1
     cf8:	3a 83       	std	Y+2, r19	; 0x02
     cfa:	29 83       	std	Y+1, r18	; 0x01
     cfc:	fc 01       	movw	r30, r24
     cfe:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	9c 01       	movw	r18, r24
     d06:	21 50       	subi	r18, 0x01	; 1
     d08:	31 09       	sbc	r19, r1
     d0a:	3a 83       	std	Y+2, r19	; 0x02
     d0c:	29 83       	std	Y+1, r18	; 0x01
     d0e:	fc 01       	movw	r30, r24
     d10:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	9c 01       	movw	r18, r24
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	31 09       	sbc	r19, r1
     d1c:	3a 83       	std	Y+2, r19	; 0x02
     d1e:	29 83       	std	Y+1, r18	; 0x01
     d20:	fc 01       	movw	r30, r24
     d22:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	9c 01       	movw	r18, r24
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	31 09       	sbc	r19, r1
     d2e:	3a 83       	std	Y+2, r19	; 0x02
     d30:	29 83       	std	Y+1, r18	; 0x01
     d32:	fc 01       	movw	r30, r24
     d34:	10 82       	st	Z, r1

    tmp    = (INT16U)pdata;
     d36:	8f 81       	ldd	r24, Y+7	; 0x07
     d38:	98 85       	ldd	r25, Y+8	; 0x08
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	9c 01       	movw	r18, r24
     d44:	21 50       	subi	r18, 0x01	; 1
     d46:	31 09       	sbc	r19, r1
     d48:	3a 83       	std	Y+2, r19	; 0x02
     d4a:	29 83       	std	Y+1, r18	; 0x01
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	9c 01       	movw	r18, r24
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	31 09       	sbc	r19, r1
     d5c:	3a 83       	std	Y+2, r19	; 0x02
     d5e:	29 83       	std	Y+1, r18	; 0x01
     d60:	2b 81       	ldd	r18, Y+3	; 0x03
     d62:	3c 81       	ldd	r19, Y+4	; 0x04
     d64:	23 2f       	mov	r18, r19
     d66:	33 27       	eor	r19, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	9c 01       	movw	r18, r24
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
     d76:	3a 83       	std	Y+2, r19	; 0x02
     d78:	29 83       	std	Y+1, r18	; 0x01
     d7a:	fc 01       	movw	r30, r24
     d7c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	9c 01       	movw	r18, r24
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	31 09       	sbc	r19, r1
     d88:	3a 83       	std	Y+2, r19	; 0x02
     d8a:	29 83       	std	Y+1, r18	; 0x01
     d8c:	fc 01       	movw	r30, r24
     d8e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	9c 01       	movw	r18, r24
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	31 09       	sbc	r19, r1
     d9a:	3a 83       	std	Y+2, r19	; 0x02
     d9c:	29 83       	std	Y+1, r18	; 0x01
     d9e:	fc 01       	movw	r30, r24
     da0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	9c 01       	movw	r18, r24
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	31 09       	sbc	r19, r1
     dac:	3a 83       	std	Y+2, r19	; 0x02
     dae:	29 83       	std	Y+1, r18	; 0x01
     db0:	fc 01       	movw	r30, r24
     db2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	9c 01       	movw	r18, r24
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	31 09       	sbc	r19, r1
     dbe:	3a 83       	std	Y+2, r19	; 0x02
     dc0:	29 83       	std	Y+1, r18	; 0x01
     dc2:	fc 01       	movw	r30, r24
     dc4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	9c 01       	movw	r18, r24
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	31 09       	sbc	r19, r1
     dd0:	3a 83       	std	Y+2, r19	; 0x02
     dd2:	29 83       	std	Y+1, r18	; 0x01
     dd4:	fc 01       	movw	r30, r24
     dd6:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	9c 01       	movw	r18, r24
     dde:	21 50       	subi	r18, 0x01	; 1
     de0:	31 09       	sbc	r19, r1
     de2:	3a 83       	std	Y+2, r19	; 0x02
     de4:	29 83       	std	Y+1, r18	; 0x01
     de6:	20 e8       	ldi	r18, 0x80	; 128
     de8:	fc 01       	movw	r30, r24
     dea:	20 83       	st	Z, r18
    return ((OS_STK *)stk);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
}
     df0:	2c 96       	adiw	r28, 0x0c	; 12
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	00 d0       	rcall	.+0      	; 0xe08 <OSTaskCreateHook+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
}
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0)
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	2c 97       	sbiw	r28, 0x0c	; 12
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	99 87       	std	Y+9, r25	; 0x09
     e4c:	88 87       	std	Y+8, r24	; 0x08
     e4e:	7b 87       	std	Y+11, r23	; 0x0b
     e50:	6a 87       	std	Y+10, r22	; 0x0a
     e52:	4c 87       	std	Y+12, r20	; 0x0c
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     e54:	88 85       	ldd	r24, Y+8	; 0x08
     e56:	99 85       	ldd	r25, Y+9	; 0x09
     e58:	fc 01       	movw	r30, r24
     e5a:	85 85       	ldd	r24, Z+13	; 0x0d
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	8c 5c       	subi	r24, 0xCC	; 204
     e62:	9e 4f       	sbci	r25, 0xFE	; 254
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	89 83       	std	Y+1, r24	; 0x01
    bity = OSMapTbl[y];
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	84 5d       	subi	r24, 0xD4	; 212
     e72:	9e 4f       	sbci	r25, 0xFE	; 254
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	8a 83       	std	Y+2, r24	; 0x02
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	28 85       	ldd	r18, Y+8	; 0x08
     e82:	39 85       	ldd	r19, Y+9	; 0x09
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	02 96       	adiw	r24, 0x02	; 2
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	8c 5c       	subi	r24, 0xCC	; 204
     e94:	9e 4f       	sbci	r25, 0xFE	; 254
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	8b 83       	std	Y+3, r24	; 0x03
    bitx = OSMapTbl[x];
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	84 5d       	subi	r24, 0xD4	; 212
     ea4:	9e 4f       	sbci	r25, 0xFE	; 254
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	8c 83       	std	Y+4, r24	; 0x04
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	98 2f       	mov	r25, r24
     eb0:	99 0f       	add	r25, r25
     eb2:	99 0f       	add	r25, r25
     eb4:	99 0f       	add	r25, r25
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	89 0f       	add	r24, r25
     eba:	8d 83       	std	Y+5, r24	; 0x05
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	29 81       	ldd	r18, Y+1	; 0x01
     ec4:	22 2f       	mov	r18, r18
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	48 85       	ldd	r20, Y+8	; 0x08
     eca:	59 85       	ldd	r21, Y+9	; 0x09
     ecc:	24 0f       	add	r18, r20
     ece:	35 1f       	adc	r19, r21
     ed0:	2e 5f       	subi	r18, 0xFE	; 254
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	32 2f       	mov	r19, r18
     eda:	2c 81       	ldd	r18, Y+4	; 0x04
     edc:	20 95       	com	r18
     ede:	23 23       	and	r18, r19
     ee0:	42 2f       	mov	r20, r18
     ee2:	28 85       	ldd	r18, Y+8	; 0x08
     ee4:	39 85       	ldd	r19, Y+9	; 0x09
     ee6:	28 0f       	add	r18, r24
     ee8:	39 1f       	adc	r19, r25
     eea:	2e 5f       	subi	r18, 0xFE	; 254
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	f9 01       	movw	r30, r18
     ef0:	40 83       	st	Z, r20
     ef2:	28 85       	ldd	r18, Y+8	; 0x08
     ef4:	39 85       	ldd	r19, Y+9	; 0x09
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	02 96       	adiw	r24, 0x02	; 2
     efc:	fc 01       	movw	r30, r24
     efe:	80 81       	ld	r24, Z
     f00:	88 23       	and	r24, r24
     f02:	69 f4       	brne	.+26     	; 0xf1e <OSEventTaskRdy+0xe8>
        pevent->OSEventGrp &= ~bity;
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	99 85       	ldd	r25, Y+9	; 0x09
     f08:	fc 01       	movw	r30, r24
     f0a:	85 85       	ldd	r24, Z+13	; 0x0d
     f0c:	98 2f       	mov	r25, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	80 95       	com	r24
     f12:	89 23       	and	r24, r25
     f14:	28 2f       	mov	r18, r24
     f16:	88 85       	ldd	r24, Y+8	; 0x08
     f18:	99 85       	ldd	r25, Y+9	; 0x09
     f1a:	fc 01       	movw	r30, r24
     f1c:	25 87       	std	Z+13, r18	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	83 54       	subi	r24, 0x43	; 67
     f2a:	99 4f       	sbci	r25, 0xF9	; 249
     f2c:	fc 01       	movw	r30, r24
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	9f 83       	std	Y+7, r25	; 0x07
     f34:	8e 83       	std	Y+6, r24	; 0x06
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	9f 81       	ldd	r25, Y+7	; 0x07
     f3a:	fc 01       	movw	r30, r24
     f3c:	13 86       	std	Z+11, r1	; 0x0b
     f3e:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     f40:	8e 81       	ldd	r24, Y+6	; 0x06
     f42:	9f 81       	ldd	r25, Y+7	; 0x07
     f44:	fc 01       	movw	r30, r24
     f46:	17 82       	std	Z+7, r1	; 0x07
     f48:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f50:	3b 85       	ldd	r19, Y+11	; 0x0b
     f52:	fc 01       	movw	r30, r24
     f54:	31 87       	std	Z+9, r19	; 0x09
     f56:	20 87       	std	Z+8, r18	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */
#endif
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	9f 81       	ldd	r25, Y+7	; 0x07
     f5c:	fc 01       	movw	r30, r24
     f5e:	84 85       	ldd	r24, Z+12	; 0x0c
     f60:	98 2f       	mov	r25, r24
     f62:	8c 85       	ldd	r24, Y+12	; 0x0c
     f64:	80 95       	com	r24
     f66:	89 23       	and	r24, r25
     f68:	28 2f       	mov	r18, r24
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	fc 01       	movw	r30, r24
     f70:	24 87       	std	Z+12, r18	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	fc 01       	movw	r30, r24
     f78:	84 85       	ldd	r24, Z+12	; 0x0c
     f7a:	88 23       	and	r24, r24
     f7c:	b1 f4       	brne	.+44     	; 0xfaa <OSEventTaskRdy+0x174>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     f7e:	90 91 56 06 	lds	r25, 0x0656
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	89 2b       	or	r24, r25
     f86:	80 93 56 06 	sts	0x0656, r24
        OSRdyTbl[y]     |=  bitx;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	29 81       	ldd	r18, Y+1	; 0x01
     f92:	22 2f       	mov	r18, r18
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	29 5a       	subi	r18, 0xA9	; 169
     f98:	39 4f       	sbci	r19, 0xF9	; 249
     f9a:	f9 01       	movw	r30, r18
     f9c:	30 81       	ld	r19, Z
     f9e:	2c 81       	ldd	r18, Y+4	; 0x04
     fa0:	23 2b       	or	r18, r19
     fa2:	89 5a       	subi	r24, 0xA9	; 169
     fa4:	99 4f       	sbci	r25, 0xF9	; 249
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
    }
}
     faa:	2c 96       	adiw	r28, 0x0c	; 12
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <OSEventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskWait (OS_EVENT *pevent)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <OSEventTaskWait+0x6>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
     fca:	80 91 62 06 	lds	r24, 0x0662
     fce:	90 91 63 06 	lds	r25, 0x0663
     fd2:	29 81       	ldd	r18, Y+1	; 0x01
     fd4:	3a 81       	ldd	r19, Y+2	; 0x02
     fd6:	fc 01       	movw	r30, r24
     fd8:	37 83       	std	Z+7, r19	; 0x07
     fda:	26 83       	std	Z+6, r18	; 0x06
    if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {      /* Task no longer ready      */
     fdc:	80 91 62 06 	lds	r24, 0x0662
     fe0:	90 91 63 06 	lds	r25, 0x0663
     fe4:	fc 01       	movw	r30, r24
     fe6:	87 85       	ldd	r24, Z+15	; 0x0f
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	20 91 62 06 	lds	r18, 0x0662
     ff0:	30 91 63 06 	lds	r19, 0x0663
     ff4:	f9 01       	movw	r30, r18
     ff6:	27 85       	ldd	r18, Z+15	; 0x0f
     ff8:	22 2f       	mov	r18, r18
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	29 5a       	subi	r18, 0xA9	; 169
     ffe:	39 4f       	sbci	r19, 0xF9	; 249
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	42 2f       	mov	r20, r18
    1006:	20 91 62 06 	lds	r18, 0x0662
    100a:	30 91 63 06 	lds	r19, 0x0663
    100e:	f9 01       	movw	r30, r18
    1010:	20 89       	ldd	r18, Z+16	; 0x10
    1012:	20 95       	com	r18
    1014:	24 23       	and	r18, r20
    1016:	42 2f       	mov	r20, r18
    1018:	9c 01       	movw	r18, r24
    101a:	29 5a       	subi	r18, 0xA9	; 169
    101c:	39 4f       	sbci	r19, 0xF9	; 249
    101e:	f9 01       	movw	r30, r18
    1020:	40 83       	st	Z, r20
    1022:	89 5a       	subi	r24, 0xA9	; 169
    1024:	99 4f       	sbci	r25, 0xF9	; 249
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	88 23       	and	r24, r24
    102c:	69 f4       	brne	.+26     	; 0x1048 <OSEventTaskWait+0x8c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    102e:	80 91 62 06 	lds	r24, 0x0662
    1032:	90 91 63 06 	lds	r25, 0x0663
    1036:	fc 01       	movw	r30, r24
    1038:	81 89       	ldd	r24, Z+17	; 0x11
    103a:	98 2f       	mov	r25, r24
    103c:	90 95       	com	r25
    103e:	80 91 56 06 	lds	r24, 0x0656
    1042:	89 23       	and	r24, r25
    1044:	80 93 56 06 	sts	0x0656, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    1048:	80 91 62 06 	lds	r24, 0x0662
    104c:	90 91 63 06 	lds	r25, 0x0663
    1050:	fc 01       	movw	r30, r24
    1052:	87 85       	ldd	r24, Z+15	; 0x0f
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	20 91 62 06 	lds	r18, 0x0662
    105c:	30 91 63 06 	lds	r19, 0x0663
    1060:	f9 01       	movw	r30, r18
    1062:	27 85       	ldd	r18, Z+15	; 0x0f
    1064:	22 2f       	mov	r18, r18
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	49 81       	ldd	r20, Y+1	; 0x01
    106a:	5a 81       	ldd	r21, Y+2	; 0x02
    106c:	24 0f       	add	r18, r20
    106e:	35 1f       	adc	r19, r21
    1070:	2e 5f       	subi	r18, 0xFE	; 254
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	f9 01       	movw	r30, r18
    1076:	40 81       	ld	r20, Z
    1078:	20 91 62 06 	lds	r18, 0x0662
    107c:	30 91 63 06 	lds	r19, 0x0663
    1080:	f9 01       	movw	r30, r18
    1082:	20 89       	ldd	r18, Z+16	; 0x10
    1084:	42 2b       	or	r20, r18
    1086:	29 81       	ldd	r18, Y+1	; 0x01
    1088:	3a 81       	ldd	r19, Y+2	; 0x02
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	02 96       	adiw	r24, 0x02	; 2
    1090:	fc 01       	movw	r30, r24
    1092:	40 83       	st	Z, r20
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	fc 01       	movw	r30, r24
    109a:	25 85       	ldd	r18, Z+13	; 0x0d
    109c:	80 91 62 06 	lds	r24, 0x0662
    10a0:	90 91 63 06 	lds	r25, 0x0663
    10a4:	fc 01       	movw	r30, r24
    10a6:	81 89       	ldd	r24, Z+17	; 0x11
    10a8:	28 2b       	or	r18, r24
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	fc 01       	movw	r30, r24
    10b0:	25 87       	std	Z+13, r18	; 0x0d
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <OSEventTO>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTO (OS_EVENT *pevent)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <OSEventTO+0x6>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
    if ((pevent->OSEventTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
    10ca:	80 91 62 06 	lds	r24, 0x0662
    10ce:	90 91 63 06 	lds	r25, 0x0663
    10d2:	fc 01       	movw	r30, r24
    10d4:	87 85       	ldd	r24, Z+15	; 0x0f
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	20 91 62 06 	lds	r18, 0x0662
    10de:	30 91 63 06 	lds	r19, 0x0663
    10e2:	f9 01       	movw	r30, r18
    10e4:	27 85       	ldd	r18, Z+15	; 0x0f
    10e6:	22 2f       	mov	r18, r18
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	49 81       	ldd	r20, Y+1	; 0x01
    10ec:	5a 81       	ldd	r21, Y+2	; 0x02
    10ee:	24 0f       	add	r18, r20
    10f0:	35 1f       	adc	r19, r21
    10f2:	2e 5f       	subi	r18, 0xFE	; 254
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	f9 01       	movw	r30, r18
    10f8:	20 81       	ld	r18, Z
    10fa:	42 2f       	mov	r20, r18
    10fc:	20 91 62 06 	lds	r18, 0x0662
    1100:	30 91 63 06 	lds	r19, 0x0663
    1104:	f9 01       	movw	r30, r18
    1106:	20 89       	ldd	r18, Z+16	; 0x10
    1108:	20 95       	com	r18
    110a:	24 23       	and	r18, r20
    110c:	42 2f       	mov	r20, r18
    110e:	29 81       	ldd	r18, Y+1	; 0x01
    1110:	3a 81       	ldd	r19, Y+2	; 0x02
    1112:	28 0f       	add	r18, r24
    1114:	39 1f       	adc	r19, r25
    1116:	2e 5f       	subi	r18, 0xFE	; 254
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	f9 01       	movw	r30, r18
    111c:	40 83       	st	Z, r20
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	3a 81       	ldd	r19, Y+2	; 0x02
    1122:	82 0f       	add	r24, r18
    1124:	93 1f       	adc	r25, r19
    1126:	02 96       	adiw	r24, 0x02	; 2
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	88 23       	and	r24, r24
    112e:	91 f4       	brne	.+36     	; 0x1154 <OSEventTO+0x98>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	fc 01       	movw	r30, r24
    1136:	85 85       	ldd	r24, Z+13	; 0x0d
    1138:	28 2f       	mov	r18, r24
    113a:	80 91 62 06 	lds	r24, 0x0662
    113e:	90 91 63 06 	lds	r25, 0x0663
    1142:	fc 01       	movw	r30, r24
    1144:	81 89       	ldd	r24, Z+17	; 0x11
    1146:	80 95       	com	r24
    1148:	82 23       	and	r24, r18
    114a:	28 2f       	mov	r18, r24
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	fc 01       	movw	r30, r24
    1152:	25 87       	std	Z+13, r18	; 0x0d
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    1154:	80 91 62 06 	lds	r24, 0x0662
    1158:	90 91 63 06 	lds	r25, 0x0663
    115c:	fc 01       	movw	r30, r24
    115e:	14 86       	std	Z+12, r1	; 0x0c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    1160:	80 91 62 06 	lds	r24, 0x0662
    1164:	90 91 63 06 	lds	r25, 0x0663
    1168:	fc 01       	movw	r30, r24
    116a:	17 82       	std	Z+7, r1	; 0x07
    116c:	16 82       	std	Z+6, r1	; 0x06
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <OSEventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	00 d0       	rcall	.+0      	; 0x117e <OSEventWaitListInit+0x6>
    117e:	1f 92       	push	r1
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
    INT8U i;

    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	fc 01       	movw	r30, r24
    118e:	15 86       	std	Z+13, r1	; 0x0d
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1190:	19 82       	std	Y+1, r1	; 0x01
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <OSEventWaitListInit+0x36>
        pevent->OSEventTbl[i] = 0x00;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	02 96       	adiw	r24, 0x02	; 2
    11a4:	fc 01       	movw	r30, r24
    11a6:	10 82       	st	Z, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;

    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	80 f3       	brcs	.-32     	; 0x1194 <OSEventWaitListInit+0x1c>
        pevent->OSEventTbl[i] = 0x00;
    }
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void OSInit (void)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <OSInit+0x6>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
#if 0
	DebugPulse();
#endif


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    11ca:	10 92 64 06 	sts	0x0664, r1
    11ce:	10 92 65 06 	sts	0x0665, r1
    11d2:	10 92 66 06 	sts	0x0666, r1
    11d6:	10 92 67 06 	sts	0x0667, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    11da:	10 92 61 06 	sts	0x0661, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    11de:	10 92 3e 06 	sts	0x063E, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    11e2:	10 92 53 06 	sts	0x0653, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
    11e6:	10 92 3f 06 	sts	0x063F, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    11ea:	10 92 40 06 	sts	0x0640, r1
    11ee:	10 92 41 06 	sts	0x0641, r1
    11f2:	10 92 42 06 	sts	0x0642, r1
    11f6:	10 92 43 06 	sts	0x0643, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    11fa:	10 92 48 06 	sts	0x0648, r1
    11fe:	10 92 49 06 	sts	0x0649, r1
    1202:	10 92 4a 06 	sts	0x064A, r1
    1206:	10 92 4b 06 	sts	0x064B, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    120a:	10 92 56 06 	sts	0x0656, r1
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    120e:	1a 82       	std	Y+2, r1	; 0x02
    1210:	19 82       	std	Y+1, r1	; 0x01
    1212:	0b c0       	rjmp	.+22     	; 0x122a <OSInit+0x6a>
        OSRdyTbl[i] = 0;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	89 5a       	subi	r24, 0xA9	; 169
    121a:	99 4f       	sbci	r25, 0xF9	; 249
    121c:	fc 01       	movw	r30, r24
    121e:	10 82       	st	Z, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	88 30       	cpi	r24, 0x08	; 8
    1230:	91 05       	cpc	r25, r1
    1232:	80 f3       	brcs	.-32     	; 0x1214 <OSInit+0x54>
        OSRdyTbl[i] = 0;
    }

    OSPrioCur     = 0;
    1234:	10 92 45 06 	sts	0x0645, r1
    OSPrioHighRdy = 0;
    1238:	10 92 44 06 	sts	0x0644, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    123c:	10 92 55 06 	sts	0x0655, r1
    1240:	10 92 54 06 	sts	0x0654, r1
    OSTCBCur      = (OS_TCB *)0;
    1244:	10 92 63 06 	sts	0x0663, r1
    1248:	10 92 62 06 	sts	0x0662, r1
    OSTCBList     = (OS_TCB *)0;
    124c:	10 92 47 06 	sts	0x0647, r1
    1250:	10 92 46 06 	sts	0x0646, r1
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    1254:	1a 82       	std	Y+2, r1	; 0x02
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <OSInit+0xb6>
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	83 54       	subi	r24, 0x43	; 67
    1264:	99 4f       	sbci	r25, 0xF9	; 249
    1266:	fc 01       	movw	r30, r24
    1268:	11 82       	std	Z+1, r1	; 0x01
    126a:	10 82       	st	Z, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	80 34       	cpi	r24, 0x40	; 64
    127c:	91 05       	cpc	r25, r1
    127e:	68 f3       	brcs	.-38     	; 0x125a <OSInit+0x9a>
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    1280:	1a 82       	std	Y+2, r1	; 0x02
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	28 c0       	rjmp	.+80     	; 0x12d6 <OSInit+0x116>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	9c 01       	movw	r18, r24
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	9c 01       	movw	r18, r24
    12a4:	2b 54       	subi	r18, 0x4B	; 75
    12a6:	3d 4f       	sbci	r19, 0xFD	; 253
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	ac 01       	movw	r20, r24
    12b2:	44 0f       	add	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	84 0f       	add	r24, r20
    12c0:	95 1f       	adc	r25, r21
    12c2:	89 54       	subi	r24, 0x49	; 73
    12c4:	9d 4f       	sbci	r25, 0xFD	; 253
    12c6:	fc 01       	movw	r30, r24
    12c8:	31 83       	std	Z+1, r19	; 0x01
    12ca:	20 83       	st	Z, r18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	89 30       	cpi	r24, 0x09	; 9
    12dc:	91 05       	cpc	r25, r1
    12de:	98 f2       	brcs	.-90     	; 0x1286 <OSInit+0xc6>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    12e0:	10 92 5a 03 	sts	0x035A, r1
    12e4:	10 92 59 03 	sts	0x0359, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
    12e8:	85 eb       	ldi	r24, 0xB5	; 181
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	90 93 51 06 	sts	0x0651, r25
    12f0:	80 93 50 06 	sts	0x0650, r24

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    12f4:	1a 82       	std	Y+2, r1	; 0x02
    12f6:	19 82       	std	Y+1, r1	; 0x01
    12f8:	29 c0       	rjmp	.+82     	; 0x134c <OSInit+0x18c>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	9c 01       	movw	r18, r24
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	28 1b       	sub	r18, r24
    1314:	39 0b       	sbc	r19, r25
    1316:	a9 01       	movw	r20, r18
    1318:	48 59       	subi	r20, 0x98	; 152
    131a:	59 4f       	sbci	r21, 0xF9	; 249
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	9c 01       	movw	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	33 1f       	adc	r19, r19
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	28 1b       	sub	r18, r24
    1334:	39 0b       	sbc	r19, r25
    1336:	c9 01       	movw	r24, r18
    1338:	88 59       	subi	r24, 0x98	; 152
    133a:	99 4f       	sbci	r25, 0xF9	; 249
    133c:	fc 01       	movw	r30, r24
    133e:	51 83       	std	Z+1, r21	; 0x01
    1340:	40 83       	st	Z, r20
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	85 30       	cpi	r24, 0x05	; 5
    1352:	91 05       	cpc	r25, r1
    1354:	90 f2       	brcs	.-92     	; 0x12fa <OSInit+0x13a>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
    1356:	10 92 af 06 	sts	0x06AF, r1
    135a:	10 92 ae 06 	sts	0x06AE, r1
    OSEventFreeList                          = &OSEventTbl[0];
    135e:	88 e6       	ldi	r24, 0x68	; 104
    1360:	96 e0       	ldi	r25, 0x06	; 6
    1362:	90 93 60 06 	sts	0x0660, r25
    1366:	80 93 5f 06 	sts	0x065F, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE,
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
    136a:	2f e3       	ldi	r18, 0x3F	; 63
    136c:	44 e7       	ldi	r20, 0x74	; 116
    136e:	52 e0       	ldi	r21, 0x02	; 2
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	9b e0       	ldi	r25, 0x0B	; 11
    1378:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat,
    137c:	2e e3       	ldi	r18, 0x3E	; 62
    137e:	44 eb       	ldi	r20, 0xB4	; 180
    1380:	52 e0       	ldi	r21, 0x02	; 2
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	8e e1       	ldi	r24, 0x1E	; 30
    1388:	9b e0       	ldi	r25, 0x0B	; 11
    138a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <OSTaskCreate>
                     &OSTaskStatStk[0],                           /* Set Top-Of-Stack                  */
                     OS_STAT_PRIO);                               /* One higher than the idle task     */
        #endif
    #endif
#endif
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
*********************************************************************************************************
*/

void OSIntExit (void)
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    OS_ENTER_CRITICAL();
    13a0:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
    13a2:	80 91 61 06 	lds	r24, 0x0661
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	80 93 61 06 	sts	0x0661, r24
    13ac:	90 91 61 06 	lds	r25, 0x0661
    13b0:	80 91 3e 06 	lds	r24, 0x063E
    13b4:	89 2b       	or	r24, r25
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <OSIntExit+0x24>
    13ba:	4b c0       	rjmp	.+150    	; 0x1452 <OSIntExit+0xba>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
    13bc:	80 91 56 06 	lds	r24, 0x0656
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	8c 5c       	subi	r24, 0xCC	; 204
    13c6:	9e 4f       	sbci	r25, 0xFE	; 254
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	80 93 34 02 	sts	0x0234, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
    13d0:	80 91 34 02 	lds	r24, 0x0234
    13d4:	28 2f       	mov	r18, r24
    13d6:	22 0f       	add	r18, r18
    13d8:	22 0f       	add	r18, r18
    13da:	22 0f       	add	r18, r18
    13dc:	80 91 34 02 	lds	r24, 0x0234
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	89 5a       	subi	r24, 0xA9	; 169
    13e6:	99 4f       	sbci	r25, 0xF9	; 249
    13e8:	fc 01       	movw	r30, r24
    13ea:	80 81       	ld	r24, Z
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	8c 5c       	subi	r24, 0xCC	; 204
    13f2:	9e 4f       	sbci	r25, 0xFE	; 254
    13f4:	fc 01       	movw	r30, r24
    13f6:	80 81       	ld	r24, Z
    13f8:	82 0f       	add	r24, r18
    13fa:	80 93 44 06 	sts	0x0644, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
    13fe:	90 91 44 06 	lds	r25, 0x0644
    1402:	80 91 45 06 	lds	r24, 0x0645
    1406:	98 17       	cp	r25, r24
    1408:	21 f1       	breq	.+72     	; 0x1452 <OSIntExit+0xba>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    140a:	80 91 44 06 	lds	r24, 0x0644
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	83 54       	subi	r24, 0x43	; 67
    1418:	99 4f       	sbci	r25, 0xF9	; 249
    141a:	fc 01       	movw	r30, r24
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	90 93 55 06 	sts	0x0655, r25
    1424:	80 93 54 06 	sts	0x0654, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
    1428:	80 91 48 06 	lds	r24, 0x0648
    142c:	90 91 49 06 	lds	r25, 0x0649
    1430:	a0 91 4a 06 	lds	r26, 0x064A
    1434:	b0 91 4b 06 	lds	r27, 0x064B
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	a1 1d       	adc	r26, r1
    143c:	b1 1d       	adc	r27, r1
    143e:	80 93 48 06 	sts	0x0648, r24
    1442:	90 93 49 06 	sts	0x0649, r25
    1446:	a0 93 4a 06 	sts	0x064A, r26
    144a:	b0 93 4b 06 	sts	0x064B, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
    144e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
    1452:	78 94       	sei
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <OSSched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
*********************************************************************************************************
*/

void OSSched (void)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	1f 92       	push	r1
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    INT8U y;


    OS_ENTER_CRITICAL();
    1464:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
    1466:	90 91 3e 06 	lds	r25, 0x063E
    146a:	80 91 61 06 	lds	r24, 0x0661
    146e:	89 2b       	or	r24, r25
    1470:	88 23       	and	r24, r24
    1472:	09 f0       	breq	.+2      	; 0x1476 <OSSched+0x1c>
    1474:	48 c0       	rjmp	.+144    	; 0x1506 <OSSched+0xac>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
    1476:	80 91 56 06 	lds	r24, 0x0656
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	8c 5c       	subi	r24, 0xCC	; 204
    1480:	9e 4f       	sbci	r25, 0xFE	; 254
    1482:	fc 01       	movw	r30, r24
    1484:	80 81       	ld	r24, Z
    1486:	89 83       	std	Y+1, r24	; 0x01
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	22 0f       	add	r18, r18
    148e:	22 0f       	add	r18, r18
    1490:	22 0f       	add	r18, r18
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	89 5a       	subi	r24, 0xA9	; 169
    149a:	99 4f       	sbci	r25, 0xF9	; 249
    149c:	fc 01       	movw	r30, r24
    149e:	80 81       	ld	r24, Z
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	8c 5c       	subi	r24, 0xCC	; 204
    14a6:	9e 4f       	sbci	r25, 0xFE	; 254
    14a8:	fc 01       	movw	r30, r24
    14aa:	80 81       	ld	r24, Z
    14ac:	82 0f       	add	r24, r18
    14ae:	80 93 44 06 	sts	0x0644, r24
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
    14b2:	90 91 44 06 	lds	r25, 0x0644
    14b6:	80 91 45 06 	lds	r24, 0x0645
    14ba:	98 17       	cp	r25, r24
    14bc:	21 f1       	breq	.+72     	; 0x1506 <OSSched+0xac>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    14be:	80 91 44 06 	lds	r24, 0x0644
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	83 54       	subi	r24, 0x43	; 67
    14cc:	99 4f       	sbci	r25, 0xF9	; 249
    14ce:	fc 01       	movw	r30, r24
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	90 93 55 06 	sts	0x0655, r25
    14d8:	80 93 54 06 	sts	0x0654, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
    14dc:	80 91 48 06 	lds	r24, 0x0648
    14e0:	90 91 49 06 	lds	r25, 0x0649
    14e4:	a0 91 4a 06 	lds	r26, 0x064A
    14e8:	b0 91 4b 06 	lds	r27, 0x064B
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	b1 1d       	adc	r27, r1
    14f2:	80 93 48 06 	sts	0x0648, r24
    14f6:	90 93 49 06 	sts	0x0649, r25
    14fa:	a0 93 4a 06 	sts	0x064A, r26
    14fe:	b0 93 4b 06 	sts	0x064B, r27
#if 1
			//DebugPulse ();
#endif

#if 1
            OS_TASK_SW();                        /* Perform a context switch                           */
    1502:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
    1506:	78 94       	sei
}
    1508:	0f 90       	pop	r0
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <OSStart>:
*                 b) Set OSRunning to TRUE.
*********************************************************************************************************
*/

void OSStart (void)
{
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <OSStart+0x6>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
#if 0
	DebugPulse();
#endif


    if (OSRunning == FALSE) {
    151a:	80 91 3f 06 	lds	r24, 0x063F
    151e:	88 23       	and	r24, r24
    1520:	d9 f5       	brne	.+118    	; 0x1598 <OSStart+0x88>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
    1522:	80 91 56 06 	lds	r24, 0x0656
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	8c 5c       	subi	r24, 0xCC	; 204
    152c:	9e 4f       	sbci	r25, 0xFE	; 254
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	89 83       	std	Y+1, r24	; 0x01
        x             = OSUnMapTbl[OSRdyTbl[y]];
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	89 5a       	subi	r24, 0xA9	; 169
    153c:	99 4f       	sbci	r25, 0xF9	; 249
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	8c 5c       	subi	r24, 0xCC	; 204
    1548:	9e 4f       	sbci	r25, 0xFE	; 254
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	8a 83       	std	Y+2, r24	; 0x02
        OSPrioHighRdy = (INT8U)((y << 3) + x);
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	98 2f       	mov	r25, r24
    1554:	99 0f       	add	r25, r25
    1556:	99 0f       	add	r25, r25
    1558:	99 0f       	add	r25, r25
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	89 0f       	add	r24, r25
    155e:	80 93 44 06 	sts	0x0644, r24
        OSPrioCur     = OSPrioHighRdy;
    1562:	80 91 44 06 	lds	r24, 0x0644
    1566:	80 93 45 06 	sts	0x0645, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    156a:	80 91 44 06 	lds	r24, 0x0644
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	83 54       	subi	r24, 0x43	; 67
    1578:	99 4f       	sbci	r25, 0xF9	; 249
    157a:	fc 01       	movw	r30, r24
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	90 93 55 06 	sts	0x0655, r25
    1584:	80 93 54 06 	sts	0x0654, r24
        OSTCBCur      = OSTCBHighRdy;
    1588:	80 91 54 06 	lds	r24, 0x0654
    158c:	90 91 55 06 	lds	r25, 0x0655
    1590:	90 93 63 06 	sts	0x0663, r25
    1594:	80 93 62 06 	sts	0x0662, r24
    }


#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
    1598:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
	DebugPulse();
#endif



}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <OSTimeDly>
    OS_ENTER_CRITICAL();
    15b6:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    15b8:	10 92 40 06 	sts	0x0640, r1
    15bc:	10 92 41 06 	sts	0x0641, r1
    15c0:	10 92 42 06 	sts	0x0642, r1
    15c4:	10 92 43 06 	sts	0x0643, r1
    OS_EXIT_CRITICAL();
    15c8:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
    15ca:	88 ec       	ldi	r24, 0xC8	; 200
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <OSTimeDly>
    OS_ENTER_CRITICAL();
    15d2:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
    15d4:	80 91 40 06 	lds	r24, 0x0640
    15d8:	90 91 41 06 	lds	r25, 0x0641
    15dc:	a0 91 42 06 	lds	r26, 0x0642
    15e0:	b0 91 43 06 	lds	r27, 0x0643
    15e4:	80 93 4c 06 	sts	0x064C, r24
    15e8:	90 93 4d 06 	sts	0x064D, r25
    15ec:	a0 93 4e 06 	sts	0x064E, r26
    15f0:	b0 93 4f 06 	sts	0x064F, r27
    OSStatRdy    = TRUE;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 bc 06 	sts	0x06BC, r24
    OS_EXIT_CRITICAL();
    15fa:	78 94       	sei
}
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <OSTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

void OSTaskIdle (void *pdata)
{
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <OSTaskIdle+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    1610:	f8 94       	cli
        OSIdleCtr++;
    1612:	80 91 40 06 	lds	r24, 0x0640
    1616:	90 91 41 06 	lds	r25, 0x0641
    161a:	a0 91 42 06 	lds	r26, 0x0642
    161e:	b0 91 43 06 	lds	r27, 0x0643
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	a1 1d       	adc	r26, r1
    1626:	b1 1d       	adc	r27, r1
    1628:	80 93 40 06 	sts	0x0640, r24
    162c:	90 93 41 06 	sts	0x0641, r25
    1630:	a0 93 42 06 	sts	0x0642, r26
    1634:	b0 93 43 06 	sts	0x0643, r27
        OS_EXIT_CRITICAL();
    1638:	78 94       	sei
    }
    163a:	ea cf       	rjmp	.-44     	; 0x1610 <OSTaskIdle+0xe>

0000163c <OSTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN
void OSTaskStat (void *pdata)
{
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2b 97       	sbiw	r28, 0x0b	; 11
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	9f 83       	std	Y+7, r25	; 0x07
    1652:	8e 83       	std	Y+6, r24	; 0x06
    INT32U run;
    INT8S  usage;


    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1654:	04 c0       	rjmp	.+8      	; 0x165e <OSTaskStat+0x22>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    1656:	80 e9       	ldi	r24, 0x90	; 144
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <OSTimeDly>
    INT32U run;
    INT8S  usage;


    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    165e:	80 91 bc 06 	lds	r24, 0x06BC
    1662:	88 23       	and	r24, r24
    1664:	c1 f3       	breq	.-16     	; 0x1656 <OSTaskStat+0x1a>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    1666:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    1668:	80 91 40 06 	lds	r24, 0x0640
    166c:	90 91 41 06 	lds	r25, 0x0641
    1670:	a0 91 42 06 	lds	r26, 0x0642
    1674:	b0 91 43 06 	lds	r27, 0x0643
    1678:	80 93 3d 07 	sts	0x073D, r24
    167c:	90 93 3e 07 	sts	0x073E, r25
    1680:	a0 93 3f 07 	sts	0x073F, r26
    1684:	b0 93 40 07 	sts	0x0740, r27
        run          = OSIdleCtr;
    1688:	80 91 40 06 	lds	r24, 0x0640
    168c:	90 91 41 06 	lds	r25, 0x0641
    1690:	a0 91 42 06 	lds	r26, 0x0642
    1694:	b0 91 43 06 	lds	r27, 0x0643
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	ab 83       	std	Y+3, r26	; 0x03
    169e:	bc 83       	std	Y+4, r27	; 0x04
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    16a0:	10 92 40 06 	sts	0x0640, r1
    16a4:	10 92 41 06 	sts	0x0641, r1
    16a8:	10 92 42 06 	sts	0x0642, r1
    16ac:	10 92 43 06 	sts	0x0643, r1
        OS_EXIT_CRITICAL();
    16b0:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
    16b2:	80 91 4c 06 	lds	r24, 0x064C
    16b6:	90 91 4d 06 	lds	r25, 0x064D
    16ba:	a0 91 4e 06 	lds	r26, 0x064E
    16be:	b0 91 4f 06 	lds	r27, 0x064F
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	79 f1       	breq	.+94     	; 0x1728 <OSTaskStat+0xec>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	4b 81       	ldd	r20, Y+3	; 0x03
    16d0:	5c 81       	ldd	r21, Y+4	; 0x04
    16d2:	84 e6       	ldi	r24, 0x64	; 100
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	dc 01       	movw	r26, r24
    16d8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__muluhisi3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	20 91 4c 06 	lds	r18, 0x064C
    16e4:	30 91 4d 06 	lds	r19, 0x064D
    16e8:	40 91 4e 06 	lds	r20, 0x064E
    16ec:	50 91 4f 06 	lds	r21, 0x064F
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodsi4>
    16f8:	da 01       	movw	r26, r20
    16fa:	c9 01       	movw	r24, r18
    16fc:	94 e6       	ldi	r25, 0x64	; 100
    16fe:	29 2f       	mov	r18, r25
    1700:	28 1b       	sub	r18, r24
    1702:	82 2f       	mov	r24, r18
    1704:	8d 83       	std	Y+5, r24	; 0x05
            if (usage > 100) {
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	85 36       	cpi	r24, 0x65	; 101
    170a:	24 f0       	brlt	.+8      	; 0x1714 <OSTaskStat+0xd8>
                OSCPUUsage = 100;
    170c:	84 e6       	ldi	r24, 0x64	; 100
    170e:	80 93 52 06 	sts	0x0652, r24
    1712:	0c c0       	rjmp	.+24     	; 0x172c <OSTaskStat+0xf0>
            } else if (usage < 0) {
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	88 23       	and	r24, r24
    1718:	1c f4       	brge	.+6      	; 0x1720 <OSTaskStat+0xe4>
                OSCPUUsage =   0;
    171a:	10 92 52 06 	sts	0x0652, r1
    171e:	06 c0       	rjmp	.+12     	; 0x172c <OSTaskStat+0xf0>
            } else {
                OSCPUUsage = usage;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	80 93 52 06 	sts	0x0652, r24
    1726:	02 c0       	rjmp	.+4      	; 0x172c <OSTaskStat+0xf0>
            }
        } else {
            OSCPUUsage = 0;
    1728:	10 92 52 06 	sts	0x0652, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    172c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <OSTimeDly>
    }
    1738:	96 cf       	rjmp	.-212    	; 0x1666 <OSTaskStat+0x2a>

0000173a <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2f 97       	sbiw	r28, 0x0f	; 15
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	7d 83       	std	Y+5, r23	; 0x05
    175e:	6c 83       	std	Y+4, r22	; 0x04
    1760:	5f 83       	std	Y+7, r21	; 0x07
    1762:	4e 83       	std	Y+6, r20	; 0x06
    1764:	39 87       	std	Y+9, r19	; 0x09
    1766:	28 87       	std	Y+8, r18	; 0x08
    1768:	1b 87       	std	Y+11, r17	; 0x0b
    176a:	0a 87       	std	Y+10, r16	; 0x0a
    176c:	fd 86       	std	Y+13, r15	; 0x0d
    176e:	ec 86       	std	Y+12, r14	; 0x0c
    1770:	df 86       	std	Y+15, r13	; 0x0f
    1772:	ce 86       	std	Y+14, r12	; 0x0e
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
    1774:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    1776:	80 91 50 06 	lds	r24, 0x0650
    177a:	90 91 51 06 	lds	r25, 0x0651
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    if (ptcb != (OS_TCB *)0) {
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	09 f4       	brne	.+2      	; 0x178c <OSTCBInit+0x52>
    178a:	aa c0       	rjmp	.+340    	; 0x18e0 <OSTCBInit+0x1a6>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	fc 01       	movw	r30, r24
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	90 93 51 06 	sts	0x0651, r25
    179a:	80 93 50 06 	sts	0x0650, r24
        OS_EXIT_CRITICAL();
    179e:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	fc 01       	movw	r30, r24
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	2b 81       	ldd	r18, Y+3	; 0x03
    17b4:	fc 01       	movw	r30, r24
    17b6:	25 87       	std	Z+13, r18	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	fc 01       	movw	r30, r24
    17be:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	fc 01       	movw	r30, r24
    17c6:	13 86       	std	Z+11, r1	; 0x0b
    17c8:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	26 95       	lsr	r18
    17d0:	26 95       	lsr	r18
    17d2:	26 95       	lsr	r18
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	fc 01       	movw	r30, r24
    17da:	27 87       	std	Z+15, r18	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	fc 01       	movw	r30, r24
    17e2:	87 85       	ldd	r24, Z+15	; 0x0f
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	84 5d       	subi	r24, 0xD4	; 212
    17ea:	9e 4f       	sbci	r25, 0xFE	; 254
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 81       	ld	r18, Z
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	fc 01       	movw	r30, r24
    17f6:	21 8b       	std	Z+17, r18	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	27 70       	andi	r18, 0x07	; 7
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	fc 01       	movw	r30, r24
    1804:	26 87       	std	Z+14, r18	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	fc 01       	movw	r30, r24
    180c:	86 85       	ldd	r24, Z+14	; 0x0e
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	84 5d       	subi	r24, 0xD4	; 212
    1814:	9e 4f       	sbci	r25, 0xFE	; 254
    1816:	fc 01       	movw	r30, r24
    1818:	20 81       	ld	r18, Z
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	20 8b       	std	Z+16, r18	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	fc 01       	movw	r30, r24
    1828:	17 82       	std	Z+7, r1	; 0x07
    182a:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	fc 01       	movw	r30, r24
    1832:	11 86       	std	Z+9, r1	; 0x09
    1834:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
    1836:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	83 54       	subi	r24, 0x43	; 67
    1844:	99 4f       	sbci	r25, 0xF9	; 249
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	3a 81       	ldd	r19, Y+2	; 0x02
    184a:	fc 01       	movw	r30, r24
    184c:	31 83       	std	Z+1, r19	; 0x01
    184e:	20 83       	st	Z, r18
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
    1850:	20 91 46 06 	lds	r18, 0x0646
    1854:	30 91 47 06 	lds	r19, 0x0647
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	fc 01       	movw	r30, r24
    185e:	33 83       	std	Z+3, r19	; 0x03
    1860:	22 83       	std	Z+2, r18	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	fc 01       	movw	r30, r24
    1868:	15 82       	std	Z+5, r1	; 0x05
    186a:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
    186c:	80 91 46 06 	lds	r24, 0x0646
    1870:	90 91 47 06 	lds	r25, 0x0647
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	49 f0       	breq	.+18     	; 0x188a <OSTCBInit+0x150>
            OSTCBList->OSTCBPrev = ptcb;
    1878:	80 91 46 06 	lds	r24, 0x0646
    187c:	90 91 47 06 	lds	r25, 0x0647
    1880:	29 81       	ldd	r18, Y+1	; 0x01
    1882:	3a 81       	ldd	r19, Y+2	; 0x02
    1884:	fc 01       	movw	r30, r24
    1886:	35 83       	std	Z+5, r19	; 0x05
    1888:	24 83       	std	Z+4, r18	; 0x04
        }
        OSTCBList               = ptcb;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	90 93 47 06 	sts	0x0647, r25
    1892:	80 93 46 06 	sts	0x0646, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	fc 01       	movw	r30, r24
    189c:	91 89       	ldd	r25, Z+17	; 0x11
    189e:	80 91 56 06 	lds	r24, 0x0656
    18a2:	89 2b       	or	r24, r25
    18a4:	80 93 56 06 	sts	0x0656, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	fc 01       	movw	r30, r24
    18ae:	87 85       	ldd	r24, Z+15	; 0x0f
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	29 81       	ldd	r18, Y+1	; 0x01
    18b6:	3a 81       	ldd	r19, Y+2	; 0x02
    18b8:	f9 01       	movw	r30, r18
    18ba:	27 85       	ldd	r18, Z+15	; 0x0f
    18bc:	22 2f       	mov	r18, r18
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	29 5a       	subi	r18, 0xA9	; 169
    18c2:	39 4f       	sbci	r19, 0xF9	; 249
    18c4:	f9 01       	movw	r30, r18
    18c6:	40 81       	ld	r20, Z
    18c8:	29 81       	ldd	r18, Y+1	; 0x01
    18ca:	3a 81       	ldd	r19, Y+2	; 0x02
    18cc:	f9 01       	movw	r30, r18
    18ce:	20 89       	ldd	r18, Z+16	; 0x10
    18d0:	24 2b       	or	r18, r20
    18d2:	89 5a       	subi	r24, 0xA9	; 169
    18d4:	99 4f       	sbci	r25, 0xF9	; 249
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
        OS_EXIT_CRITICAL();
    18da:	78 94       	sei
        return (OS_NO_ERR);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <OSTCBInit+0x1aa>
    } else {
        OS_EXIT_CRITICAL();
    18e0:	78 94       	sei
        return (OS_NO_MORE_TCB);
    18e2:	86 e4       	ldi	r24, 0x46	; 70
    }
}
    18e4:	2f 96       	adiw	r28, 0x0f	; 15
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	08 95       	ret

00001902 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void OSTimeTick (void)
{
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	00 d0       	rcall	.+0      	; 0x1908 <OSTimeTick+0x6>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
    190c:	0e 94 14 07 	call	0xe28	; 0xe28 <OSTimeTickHook>

    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    1910:	80 91 46 06 	lds	r24, 0x0646
    1914:	90 91 47 06 	lds	r25, 0x0647
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
    191c:	59 c0       	rjmp	.+178    	; 0x19d0 <OSTimeTick+0xce>
        OS_ENTER_CRITICAL();
    191e:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	fc 01       	movw	r30, r24
    1926:	82 85       	ldd	r24, Z+10	; 0x0a
    1928:	93 85       	ldd	r25, Z+11	; 0x0b
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	09 f4       	brne	.+2      	; 0x1930 <OSTimeTick+0x2e>
    192e:	48 c0       	rjmp	.+144    	; 0x19c0 <OSTimeTick+0xbe>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	fc 01       	movw	r30, r24
    1936:	82 85       	ldd	r24, Z+10	; 0x0a
    1938:	93 85       	ldd	r25, Z+11	; 0x0b
    193a:	9c 01       	movw	r18, r24
    193c:	21 50       	subi	r18, 0x01	; 1
    193e:	31 09       	sbc	r19, r1
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	fc 01       	movw	r30, r24
    1946:	33 87       	std	Z+11, r19	; 0x0b
    1948:	22 87       	std	Z+10, r18	; 0x0a
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	fc 01       	movw	r30, r24
    1950:	82 85       	ldd	r24, Z+10	; 0x0a
    1952:	93 85       	ldd	r25, Z+11	; 0x0b
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	a1 f5       	brne	.+104    	; 0x19c0 <OSTimeTick+0xbe>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	84 85       	ldd	r24, Z+12	; 0x0c
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	88 70       	andi	r24, 0x08	; 8
    1966:	99 27       	eor	r25, r25
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	19 f5       	brne	.+70     	; 0x19b2 <OSTimeTick+0xb0>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	fc 01       	movw	r30, r24
    1972:	91 89       	ldd	r25, Z+17	; 0x11
    1974:	80 91 56 06 	lds	r24, 0x0656
    1978:	89 2b       	or	r24, r25
    197a:	80 93 56 06 	sts	0x0656, r24
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	87 85       	ldd	r24, Z+15	; 0x0f
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	29 81       	ldd	r18, Y+1	; 0x01
    198c:	3a 81       	ldd	r19, Y+2	; 0x02
    198e:	f9 01       	movw	r30, r18
    1990:	27 85       	ldd	r18, Z+15	; 0x0f
    1992:	22 2f       	mov	r18, r18
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	29 5a       	subi	r18, 0xA9	; 169
    1998:	39 4f       	sbci	r19, 0xF9	; 249
    199a:	f9 01       	movw	r30, r18
    199c:	40 81       	ld	r20, Z
    199e:	29 81       	ldd	r18, Y+1	; 0x01
    19a0:	3a 81       	ldd	r19, Y+2	; 0x02
    19a2:	f9 01       	movw	r30, r18
    19a4:	20 89       	ldd	r18, Z+16	; 0x10
    19a6:	24 2b       	or	r18, r20
    19a8:	89 5a       	subi	r24, 0xA9	; 169
    19aa:	99 4f       	sbci	r25, 0xF9	; 249
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <OSTimeTick+0xbe>
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	21 e0       	ldi	r18, 0x01	; 1
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	fc 01       	movw	r30, r24
    19bc:	33 87       	std	Z+11, r19	; 0x0b
    19be:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	fc 01       	movw	r30, r24
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
        OS_EXIT_CRITICAL();
    19ce:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */

    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	fc 01       	movw	r30, r24
    19d6:	85 85       	ldd	r24, Z+13	; 0x0d
    19d8:	8f 33       	cpi	r24, 0x3F	; 63
    19da:	09 f0       	breq	.+2      	; 0x19de <OSTimeTick+0xdc>
    19dc:	a0 cf       	rjmp	.-192    	; 0x191e <OSTimeTick+0x1c>
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }

    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
    19de:	f8 94       	cli
    OSTime++;
    19e0:	80 91 64 06 	lds	r24, 0x0664
    19e4:	90 91 65 06 	lds	r25, 0x0665
    19e8:	a0 91 66 06 	lds	r26, 0x0666
    19ec:	b0 91 67 06 	lds	r27, 0x0667
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	a1 1d       	adc	r26, r1
    19f4:	b1 1d       	adc	r27, r1
    19f6:	80 93 64 06 	sts	0x0664, r24
    19fa:	90 93 65 06 	sts	0x0665, r25
    19fe:	a0 93 66 06 	sts	0x0666, r26
    1a02:	b0 93 67 06 	sts	0x0667, r27
    OS_EXIT_CRITICAL();
    1a06:	78 94       	sei
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <OSMboxCreate+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <OSMboxCreate+0x8>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
    1a22:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    1a24:	80 91 5f 06 	lds	r24, 0x065F
    1a28:	90 91 60 06 	lds	r25, 0x0660
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    1a30:	80 91 5f 06 	lds	r24, 0x065F
    1a34:	90 91 60 06 	lds	r25, 0x0660
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	59 f0       	breq	.+22     	; 0x1a52 <OSMboxCreate+0x40>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1a3c:	80 91 5f 06 	lds	r24, 0x065F
    1a40:	90 91 60 06 	lds	r25, 0x0660
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	90 93 60 06 	sts	0x0660, r25
    1a4e:	80 93 5f 06 	sts	0x065F, r24
    }
    OS_EXIT_CRITICAL();
    1a52:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <OSMboxCreate+0x6a>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	fc 01       	movw	r30, r24
    1a64:	24 87       	std	Z+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	fc 01       	movw	r30, r24
    1a70:	31 83       	std	Z+1, r19	; 0x01
    1a72:	20 83       	st	Z, r18
        OSEventWaitListInit(pevent);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	0e 94 bc 08 	call	0x1178	; 0x1178 <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	08 95       	ret

00001a8e <OSMboxPend>:
*                            event control block.
*********************************************************************************************************
*/

void *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	28 97       	sbiw	r28, 0x08	; 8
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	9c 83       	std	Y+4, r25	; 0x04
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
    1aa6:	7e 83       	std	Y+6, r23	; 0x06
    1aa8:	6d 83       	std	Y+5, r22	; 0x05
    1aaa:	58 87       	std	Y+8, r21	; 0x08
    1aac:	4f 83       	std	Y+7, r20	; 0x07
    void  *msg;


    OS_ENTER_CRITICAL();
    1aae:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	84 85       	ldd	r24, Z+12	; 0x0c
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	49 f0       	breq	.+18     	; 0x1ace <OSMboxPend+0x40>
        OS_EXIT_CRITICAL();
    1abc:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
    1abe:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac0:	98 85       	ldd	r25, Y+8	; 0x08
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	20 83       	st	Z, r18
        return ((void *)0);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	99 c0       	rjmp	.+306    	; 0x1c00 <OSMboxPend+0x172>
    }
    msg = pevent->OSEventPtr;
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    if (msg != (void *)0) {                           /* See if there is already a message             */
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	59 f0       	breq	.+22     	; 0x1afa <OSMboxPend+0x6c>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	fc 01       	movw	r30, r24
    1aea:	11 82       	std	Z+1, r1	; 0x01
    1aec:	10 82       	st	Z, r1
        OS_EXIT_CRITICAL();
    1aee:	78 94       	sei
        *err = OS_NO_ERR;
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	fc 01       	movw	r30, r24
    1af6:	10 82       	st	Z, r1
    1af8:	81 c0       	rjmp	.+258    	; 0x1bfc <OSMboxPend+0x16e>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
    1afa:	80 91 61 06 	lds	r24, 0x0661
    1afe:	88 23       	and	r24, r24
    1b00:	39 f0       	breq	.+14     	; 0x1b10 <OSMboxPend+0x82>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
    1b02:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
    1b04:	8f 81       	ldd	r24, Y+7	; 0x07
    1b06:	98 85       	ldd	r25, Y+8	; 0x08
    1b08:	22 e0       	ldi	r18, 0x02	; 2
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
    1b0e:	76 c0       	rjmp	.+236    	; 0x1bfc <OSMboxPend+0x16e>
    } else {
        OSTCBCur->OSTCBStat |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    1b10:	80 91 62 06 	lds	r24, 0x0662
    1b14:	90 91 63 06 	lds	r25, 0x0663
    1b18:	20 91 62 06 	lds	r18, 0x0662
    1b1c:	30 91 63 06 	lds	r19, 0x0663
    1b20:	f9 01       	movw	r30, r18
    1b22:	24 85       	ldd	r18, Z+12	; 0x0c
    1b24:	22 60       	ori	r18, 0x02	; 2
    1b26:	fc 01       	movw	r30, r24
    1b28:	24 87       	std	Z+12, r18	; 0x0c
        OSTCBCur->OSTCBDly   = timeout;               /* Load timeout in TCB                           */
    1b2a:	80 91 62 06 	lds	r24, 0x0662
    1b2e:	90 91 63 06 	lds	r25, 0x0663
    1b32:	2d 81       	ldd	r18, Y+5	; 0x05
    1b34:	3e 81       	ldd	r19, Y+6	; 0x06
    1b36:	fc 01       	movw	r30, r24
    1b38:	33 87       	std	Z+11, r19	; 0x0b
    1b3a:	22 87       	std	Z+10, r18	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	0e 94 de 07 	call	0xfbc	; 0xfbc <OSEventTaskWait>
        OS_EXIT_CRITICAL();
    1b44:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready to run  */
    1b46:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
        OS_ENTER_CRITICAL();
    1b4a:	f8 94       	cli
        if ((msg = OSTCBCur->OSTCBMsg) != (void *)0) {     /* See if we were given the message         */
    1b4c:	80 91 62 06 	lds	r24, 0x0662
    1b50:	90 91 63 06 	lds	r25, 0x0663
    1b54:	fc 01       	movw	r30, r24
    1b56:	80 85       	ldd	r24, Z+8	; 0x08
    1b58:	91 85       	ldd	r25, Z+9	; 0x09
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	9a 81       	ldd	r25, Y+2	; 0x02
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	d1 f0       	breq	.+52     	; 0x1b9a <OSMboxPend+0x10c>
            OSTCBCur->OSTCBMsg      = (void *)0;           /* Yes, clear message received              */
    1b66:	80 91 62 06 	lds	r24, 0x0662
    1b6a:	90 91 63 06 	lds	r25, 0x0663
    1b6e:	fc 01       	movw	r30, r24
    1b70:	11 86       	std	Z+9, r1	; 0x09
    1b72:	10 86       	std	Z+8, r1	; 0x08
            OSTCBCur->OSTCBStat     = OS_STAT_RDY;
    1b74:	80 91 62 06 	lds	r24, 0x0662
    1b78:	90 91 63 06 	lds	r25, 0x0663
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	14 86       	std	Z+12, r1	; 0x0c
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;       /* No longer waiting for event              */
    1b80:	80 91 62 06 	lds	r24, 0x0662
    1b84:	90 91 63 06 	lds	r25, 0x0663
    1b88:	fc 01       	movw	r30, r24
    1b8a:	17 82       	std	Z+7, r1	; 0x07
    1b8c:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    1b8e:	78 94       	sei
            *err                    = OS_NO_ERR;
    1b90:	8f 81       	ldd	r24, Y+7	; 0x07
    1b92:	98 85       	ldd	r25, Y+8	; 0x08
    1b94:	fc 01       	movw	r30, r24
    1b96:	10 82       	st	Z, r1
    1b98:	31 c0       	rjmp	.+98     	; 0x1bfc <OSMboxPend+0x16e>
        } else if (OSTCBCur->OSTCBStat & OS_STAT_MBOX) {   /* If status is not OS_STAT_RDY, timed out  */
    1b9a:	80 91 62 06 	lds	r24, 0x0662
    1b9e:	90 91 63 06 	lds	r25, 0x0663
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	82 70       	andi	r24, 0x02	; 2
    1bac:	99 27       	eor	r25, r25
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <OSMboxPend+0x13e>
            OSEventTO(pevent);                             /* Make task ready                          */
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSEventTO>
            OS_EXIT_CRITICAL();
    1bba:	78 94       	sei
            msg                     = (void *)0;           /* Set message contents to NULL             */
    1bbc:	1a 82       	std	Y+2, r1	; 0x02
    1bbe:	19 82       	std	Y+1, r1	; 0x01
            *err                    = OS_TIMEOUT;          /* Indicate that a timeout occured          */
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	2a e0       	ldi	r18, 0x0A	; 10
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 83       	st	Z, r18
    1bca:	18 c0       	rjmp	.+48     	; 0x1bfc <OSMboxPend+0x16e>
        } else {
            msg                     = pevent->OSEventPtr;  /* Message received                         */
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
            pevent->OSEventPtr      = (void *)0;           /* Clear the mailbox                        */
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	fc 01       	movw	r30, r24
    1be0:	11 82       	std	Z+1, r1	; 0x01
    1be2:	10 82       	st	Z, r1
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    1be4:	80 91 62 06 	lds	r24, 0x0662
    1be8:	90 91 63 06 	lds	r25, 0x0663
    1bec:	fc 01       	movw	r30, r24
    1bee:	17 82       	std	Z+7, r1	; 0x07
    1bf0:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    1bf2:	78 94       	sei
            *err                    = OS_NO_ERR;
    1bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf6:	98 85       	ldd	r25, Y+8	; 0x08
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	10 82       	st	Z, r1
        }
    }
    return (msg);                                          /* Return the message received (or NULL)    */
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c00:	28 96       	adiw	r28, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <OSMboxPost>:
*              OS_ERR_EVENT_TYPE  If you are attempting to post to a non mailbox.
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <OSMboxPost+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <OSMboxPost+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	7c 83       	std	Y+4, r23	; 0x04
    1c24:	6b 83       	std	Y+3, r22	; 0x03
    OS_ENTER_CRITICAL();
    1c26:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <OSMboxPost+0x28>
        OS_EXIT_CRITICAL();
    1c34:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	26 c0       	rjmp	.+76     	; 0x1c86 <OSMboxPost+0x74>
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	fc 01       	movw	r30, r24
    1c40:	85 85       	ldd	r24, Z+13	; 0x0d
    1c42:	88 23       	and	r24, r24
    1c44:	69 f0       	breq	.+26     	; 0x1c60 <OSMboxPost+0x4e>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	42 e0       	ldi	r20, 0x02	; 2
    1c50:	b9 01       	movw	r22, r18
    1c52:	0e 94 1b 07 	call	0xe36	; 0xe36 <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
    1c56:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
    1c58:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
        return (OS_NO_ERR);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <OSMboxPost+0x74>
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	fc 01       	movw	r30, r24
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <OSMboxPost+0x62>
            OS_EXIT_CRITICAL();
    1c6e:	78 94       	sei
            return (OS_MBOX_FULL);
    1c70:	84 e1       	ldi	r24, 0x14	; 20
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <OSMboxPost+0x74>
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	31 83       	std	Z+1, r19	; 0x01
    1c80:	20 83       	st	Z, r18
            OS_EXIT_CRITICAL();
    1c82:	78 94       	sei
            return (OS_NO_ERR);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <OSSemCreate+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <OSSemCreate+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
    1ca4:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    1ca6:	80 91 5f 06 	lds	r24, 0x065F
    1caa:	90 91 60 06 	lds	r25, 0x0660
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    1cb2:	80 91 5f 06 	lds	r24, 0x065F
    1cb6:	90 91 60 06 	lds	r25, 0x0660
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	59 f0       	breq	.+22     	; 0x1cd4 <OSSemCreate+0x40>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1cbe:	80 91 5f 06 	lds	r24, 0x065F
    1cc2:	90 91 60 06 	lds	r25, 0x0660
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	90 93 60 06 	sts	0x0660, r25
    1cd0:	80 93 5f 06 	sts	0x065F, r24
    }
    OS_EXIT_CRITICAL();
    1cd4:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <OSSemCreate+0x6a>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	23 e0       	ldi	r18, 0x03	; 3
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	24 87       	std	Z+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	33 87       	std	Z+11, r19	; 0x0b
    1cf4:	22 87       	std	Z+10, r18	; 0x0a
        OSEventWaitListInit(pevent);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfa:	0e 94 bc 08 	call	0x1178	; 0x1178 <OSEventWaitListInit>
    }
    return (pevent);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <OSSemPend+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <OSSemPend+0x8>
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <OSSemPend+0xa>
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	7c 83       	std	Y+4, r23	; 0x04
    1d24:	6b 83       	std	Y+3, r22	; 0x03
    1d26:	5e 83       	std	Y+6, r21	; 0x06
    1d28:	4d 83       	std	Y+5, r20	; 0x05
    OS_ENTER_CRITICAL();
    1d2a:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	fc 01       	movw	r30, r24
    1d32:	84 85       	ldd	r24, Z+12	; 0x0c
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <OSSemPend+0x34>
        OS_EXIT_CRITICAL();
    1d38:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	21 e0       	ldi	r18, 0x01	; 1
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
    }
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	fc 01       	movw	r30, r24
    1d4a:	82 85       	ldd	r24, Z+10	; 0x0a
    1d4c:	93 85       	ldd	r25, Z+11	; 0x0b
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	99 f0       	breq	.+38     	; 0x1d78 <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	fc 01       	movw	r30, r24
    1d58:	82 85       	ldd	r24, Z+10	; 0x0a
    1d5a:	93 85       	ldd	r25, Z+11	; 0x0b
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	31 09       	sbc	r19, r1
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	fc 01       	movw	r30, r24
    1d68:	33 87       	std	Z+11, r19	; 0x0b
    1d6a:	22 87       	std	Z+10, r18	; 0x0a
        OS_EXIT_CRITICAL();
    1d6c:	78 94       	sei
        *err = OS_NO_ERR;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	fc 01       	movw	r30, r24
    1d74:	10 82       	st	Z, r1
    1d76:	4c c0       	rjmp	.+152    	; 0x1e10 <OSSemPend+0x100>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
    1d78:	80 91 61 06 	lds	r24, 0x0661
    1d7c:	88 23       	and	r24, r24
    1d7e:	39 f0       	breq	.+14     	; 0x1d8e <OSSemPend+0x7e>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
    1d80:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	22 e0       	ldi	r18, 0x02	; 2
    1d88:	fc 01       	movw	r30, r24
    1d8a:	20 83       	st	Z, r18
    1d8c:	41 c0       	rjmp	.+130    	; 0x1e10 <OSSemPend+0x100>
    } else {                                          /* Otherwise, must wait until event occurs       */
        OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
    1d8e:	80 91 62 06 	lds	r24, 0x0662
    1d92:	90 91 63 06 	lds	r25, 0x0663
    1d96:	20 91 62 06 	lds	r18, 0x0662
    1d9a:	30 91 63 06 	lds	r19, 0x0663
    1d9e:	f9 01       	movw	r30, r18
    1da0:	24 85       	ldd	r18, Z+12	; 0x0c
    1da2:	21 60       	ori	r18, 0x01	; 1
    1da4:	fc 01       	movw	r30, r24
    1da6:	24 87       	std	Z+12, r18	; 0x0c
        OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
    1da8:	80 91 62 06 	lds	r24, 0x0662
    1dac:	90 91 63 06 	lds	r25, 0x0663
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	fc 01       	movw	r30, r24
    1db6:	33 87       	std	Z+11, r19	; 0x0b
    1db8:	22 87       	std	Z+10, r18	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	0e 94 de 07 	call	0xfbc	; 0xfbc <OSEventTaskWait>
        OS_EXIT_CRITICAL();
    1dc2:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready         */
    1dc4:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
        OS_ENTER_CRITICAL();
    1dc8:	f8 94       	cli
        if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {      /* Must have timed out if still waiting for event*/
    1dca:	80 91 62 06 	lds	r24, 0x0662
    1dce:	90 91 63 06 	lds	r25, 0x0663
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	84 85       	ldd	r24, Z+12	; 0x0c
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	81 70       	andi	r24, 0x01	; 1
    1ddc:	99 27       	eor	r25, r25
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	59 f0       	breq	.+22     	; 0x1df8 <OSSemPend+0xe8>
            OSEventTO(pevent);
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSEventTO>
            OS_EXIT_CRITICAL();
    1dea:	78 94       	sei
            *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	fc 01       	movw	r30, r24
    1df4:	20 83       	st	Z, r18
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <OSSemPend+0x100>
        } else {
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    1df8:	80 91 62 06 	lds	r24, 0x0662
    1dfc:	90 91 63 06 	lds	r25, 0x0663
    1e00:	fc 01       	movw	r30, r24
    1e02:	17 82       	std	Z+7, r1	; 0x07
    1e04:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    1e06:	78 94       	sei
            *err = OS_NO_ERR;
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	10 82       	st	Z, r1
        }
    }
}
    1e10:	26 96       	adiw	r28, 0x06	; 6
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <OSSemPost>:
*              OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a semaphore
*********************************************************************************************************
*/

INT8U OSSemPost (OS_EVENT *pevent)
{
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <OSSemPost+0x6>
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    OS_ENTER_CRITICAL();
    1e30:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	fc 01       	movw	r30, r24
    1e38:	84 85       	ldd	r24, Z+12	; 0x0c
    1e3a:	83 30       	cpi	r24, 0x03	; 3
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <OSSemPost+0x22>
        OS_EXIT_CRITICAL();
    1e3e:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	2d c0       	rjmp	.+90     	; 0x1e9e <OSSemPost+0x7c>
    }
    if (pevent->OSEventGrp) {                              /* See if any task waiting for semaphore    */
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	fc 01       	movw	r30, r24
    1e4a:	85 85       	ldd	r24, Z+13	; 0x0d
    1e4c:	88 23       	and	r24, r24
    1e4e:	61 f0       	breq	.+24     	; 0x1e68 <OSSemPost+0x46>
        OSEventTaskRdy(pevent, (void *)0, OS_STAT_SEM);    /* Ready highest prio task waiting on event */
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 1b 07 	call	0xe36	; 0xe36 <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
    1e5e:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
    1e60:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
        return (OS_NO_ERR);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	1b c0       	rjmp	.+54     	; 0x1e9e <OSSemPost+0x7c>
    } else {
        if (pevent->OSEventCnt < 65535) {             /* Make sure semaphore will not overflow         */
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	82 85       	ldd	r24, Z+10	; 0x0a
    1e70:	93 85       	ldd	r25, Z+11	; 0x0b
    1e72:	8f 3f       	cpi	r24, 0xFF	; 255
    1e74:	ff ef       	ldi	r31, 0xFF	; 255
    1e76:	9f 07       	cpc	r25, r31
    1e78:	81 f0       	breq	.+32     	; 0x1e9a <OSSemPost+0x78>
            pevent->OSEventCnt++;                     /* Increment semaphore count to register event   */
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	fc 01       	movw	r30, r24
    1e80:	82 85       	ldd	r24, Z+10	; 0x0a
    1e82:	93 85       	ldd	r25, Z+11	; 0x0b
    1e84:	9c 01       	movw	r18, r24
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	fc 01       	movw	r30, r24
    1e90:	33 87       	std	Z+11, r19	; 0x0b
    1e92:	22 87       	std	Z+10, r18	; 0x0a
            OS_EXIT_CRITICAL();
    1e94:	78 94       	sei
            return (OS_NO_ERR);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <OSSemPost+0x7c>
        } else {                                      /* Semaphore value has reached its maximum       */
            OS_EXIT_CRITICAL();
    1e9a:	78 94       	sei
            return (OS_SEM_OVF);
    1e9c:	82 e3       	ldi	r24, 0x32	; 50
        }
    }
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	2a 97       	sbiw	r28, 0x0a	; 10
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	9d 83       	std	Y+5, r25	; 0x05
    1eca:	8c 83       	std	Y+4, r24	; 0x04
    1ecc:	7f 83       	std	Y+7, r23	; 0x07
    1ece:	6e 83       	std	Y+6, r22	; 0x06
    1ed0:	59 87       	std	Y+9, r21	; 0x09
    1ed2:	48 87       	std	Y+8, r20	; 0x08
    1ed4:	2a 87       	std	Y+10, r18	; 0x0a

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
    1ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed8:	80 34       	cpi	r24, 0x40	; 64
    1eda:	10 f0       	brcs	.+4      	; 0x1ee0 <OSTaskCreate+0x38>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    1edc:	8a e2       	ldi	r24, 0x2A	; 42
    1ede:	65 c0       	rjmp	.+202    	; 0x1faa <OSTaskCreate+0x102>
    }
    OS_ENTER_CRITICAL();
    1ee0:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    1ee2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	83 54       	subi	r24, 0x43	; 67
    1eee:	99 4f       	sbci	r25, 0xF9	; 249
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <OSTaskCreate+0x54>
    1efa:	55 c0       	rjmp	.+170    	; 0x1fa6 <OSTaskCreate+0xfe>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	83 54       	subi	r24, 0x43	; 67
    1f08:	99 4f       	sbci	r25, 0xF9	; 249
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	fc 01       	movw	r30, r24
    1f10:	31 83       	std	Z+1, r19	; 0x01
    1f12:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    1f14:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
    1f16:	48 85       	ldd	r20, Y+8	; 0x08
    1f18:	59 85       	ldd	r21, Y+9	; 0x09
    1f1a:	6e 81       	ldd	r22, Y+6	; 0x06
    1f1c:	7f 81       	ldd	r23, Y+7	; 0x07
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	9d 81       	ldd	r25, Y+5	; 0x05
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	0e 94 92 05 	call	0xb24	; 0xb24 <OSTaskStkInit>
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	c1 2c       	mov	r12, r1
    1f34:	d1 2c       	mov	r13, r1
    1f36:	e1 2c       	mov	r14, r1
    1f38:	f1 2c       	mov	r15, r1
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	bc 01       	movw	r22, r24
    1f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4a:	0e 94 9d 0b 	call	0x173a	; 0x173a <OSTCBInit>
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
        if (err == OS_NO_ERR) {
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 23       	and	r24, r24
    1f54:	d1 f4       	brne	.+52     	; 0x1f8a <OSTaskCreate+0xe2>
            OS_ENTER_CRITICAL();
    1f56:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
    1f58:	80 91 53 06 	lds	r24, 0x0653
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	80 93 53 06 	sts	0x0653, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
    1f62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	83 54       	subi	r24, 0x43	; 67
    1f6e:	99 4f       	sbci	r25, 0xF9	; 249
    1f70:	fc 01       	movw	r30, r24
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	0e 94 01 07 	call	0xe02	; 0xe02 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
    1f7a:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
    1f7c:	80 91 3f 06 	lds	r24, 0x063F
    1f80:	88 23       	and	r24, r24
    1f82:	79 f0       	breq	.+30     	; 0x1fa2 <OSTaskCreate+0xfa>
#if 0
				DebugPulse();
#endif					
                OSSched();
    1f84:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
    1f88:	0c c0       	rjmp	.+24     	; 0x1fa2 <OSTaskCreate+0xfa>
            }
        } else {
            OS_ENTER_CRITICAL();
    1f8a:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    1f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	83 54       	subi	r24, 0x43	; 67
    1f98:	99 4f       	sbci	r25, 0xF9	; 249
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	11 82       	std	Z+1, r1	; 0x01
    1f9e:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    1fa0:	78 94       	sei

#if 0
		DebugPulse();
#endif	
		
        return (err);
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <OSTaskCreate+0x102>
    } else {
        OS_EXIT_CRITICAL();
    1fa6:	78 94       	sei
        return (OS_PRIO_EXIST);
    1fa8:	88 e2       	ldi	r24, 0x28	; 40
    }	
}
    1faa:	2a 96       	adiw	r28, 0x0a	; 10
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	df 90       	pop	r13
    1fc4:	cf 90       	pop	r12
    1fc6:	08 95       	ret

00001fc8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <OSTimeDly+0x6>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    if (ticks > 0) {                                                      /* 0 means no delay!         */
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <OSTimeDly+0x18>
    1fde:	43 c0       	rjmp	.+134    	; 0x2066 <OSTimeDly+0x9e>
        OS_ENTER_CRITICAL();
    1fe0:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
    1fe2:	80 91 62 06 	lds	r24, 0x0662
    1fe6:	90 91 63 06 	lds	r25, 0x0663
    1fea:	fc 01       	movw	r30, r24
    1fec:	87 85       	ldd	r24, Z+15	; 0x0f
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	20 91 62 06 	lds	r18, 0x0662
    1ff6:	30 91 63 06 	lds	r19, 0x0663
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	27 85       	ldd	r18, Z+15	; 0x0f
    1ffe:	22 2f       	mov	r18, r18
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	29 5a       	subi	r18, 0xA9	; 169
    2004:	39 4f       	sbci	r19, 0xF9	; 249
    2006:	f9 01       	movw	r30, r18
    2008:	20 81       	ld	r18, Z
    200a:	42 2f       	mov	r20, r18
    200c:	20 91 62 06 	lds	r18, 0x0662
    2010:	30 91 63 06 	lds	r19, 0x0663
    2014:	f9 01       	movw	r30, r18
    2016:	20 89       	ldd	r18, Z+16	; 0x10
    2018:	20 95       	com	r18
    201a:	24 23       	and	r18, r20
    201c:	42 2f       	mov	r20, r18
    201e:	9c 01       	movw	r18, r24
    2020:	29 5a       	subi	r18, 0xA9	; 169
    2022:	39 4f       	sbci	r19, 0xF9	; 249
    2024:	f9 01       	movw	r30, r18
    2026:	40 83       	st	Z, r20
    2028:	89 5a       	subi	r24, 0xA9	; 169
    202a:	99 4f       	sbci	r25, 0xF9	; 249
    202c:	fc 01       	movw	r30, r24
    202e:	80 81       	ld	r24, Z
    2030:	88 23       	and	r24, r24
    2032:	69 f4       	brne	.+26     	; 0x204e <OSTimeDly+0x86>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    2034:	80 91 62 06 	lds	r24, 0x0662
    2038:	90 91 63 06 	lds	r25, 0x0663
    203c:	fc 01       	movw	r30, r24
    203e:	81 89       	ldd	r24, Z+17	; 0x11
    2040:	98 2f       	mov	r25, r24
    2042:	90 95       	com	r25
    2044:	80 91 56 06 	lds	r24, 0x0656
    2048:	89 23       	and	r24, r25
    204a:	80 93 56 06 	sts	0x0656, r24
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
    204e:	80 91 62 06 	lds	r24, 0x0662
    2052:	90 91 63 06 	lds	r25, 0x0663
    2056:	29 81       	ldd	r18, Y+1	; 0x01
    2058:	3a 81       	ldd	r19, Y+2	; 0x02
    205a:	fc 01       	movw	r30, r24
    205c:	33 87       	std	Z+11, r19	; 0x0b
    205e:	22 87       	std	Z+10, r18	; 0x0a
        OS_EXIT_CRITICAL();
    2060:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
    2062:	0e 94 2d 0a 	call	0x145a	; 0x145a <OSSched>
    }
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <__udivmodhi4>:
    2070:	aa 1b       	sub	r26, r26
    2072:	bb 1b       	sub	r27, r27
    2074:	51 e1       	ldi	r21, 0x11	; 17
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <__udivmodhi4_ep>

00002078 <__udivmodhi4_loop>:
    2078:	aa 1f       	adc	r26, r26
    207a:	bb 1f       	adc	r27, r27
    207c:	a6 17       	cp	r26, r22
    207e:	b7 07       	cpc	r27, r23
    2080:	10 f0       	brcs	.+4      	; 0x2086 <__udivmodhi4_ep>
    2082:	a6 1b       	sub	r26, r22
    2084:	b7 0b       	sbc	r27, r23

00002086 <__udivmodhi4_ep>:
    2086:	88 1f       	adc	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	5a 95       	dec	r21
    208c:	a9 f7       	brne	.-22     	; 0x2078 <__udivmodhi4_loop>
    208e:	80 95       	com	r24
    2090:	90 95       	com	r25
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	08 95       	ret

00002098 <__udivmodsi4>:
    2098:	a1 e2       	ldi	r26, 0x21	; 33
    209a:	1a 2e       	mov	r1, r26
    209c:	aa 1b       	sub	r26, r26
    209e:	bb 1b       	sub	r27, r27
    20a0:	fd 01       	movw	r30, r26
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <__udivmodsi4_ep>

000020a4 <__udivmodsi4_loop>:
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	ee 1f       	adc	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	a2 17       	cp	r26, r18
    20ae:	b3 07       	cpc	r27, r19
    20b0:	e4 07       	cpc	r30, r20
    20b2:	f5 07       	cpc	r31, r21
    20b4:	20 f0       	brcs	.+8      	; 0x20be <__udivmodsi4_ep>
    20b6:	a2 1b       	sub	r26, r18
    20b8:	b3 0b       	sbc	r27, r19
    20ba:	e4 0b       	sbc	r30, r20
    20bc:	f5 0b       	sbc	r31, r21

000020be <__udivmodsi4_ep>:
    20be:	66 1f       	adc	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	1a 94       	dec	r1
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <__udivmodsi4_loop>
    20ca:	60 95       	com	r22
    20cc:	70 95       	com	r23
    20ce:	80 95       	com	r24
    20d0:	90 95       	com	r25
    20d2:	9b 01       	movw	r18, r22
    20d4:	ac 01       	movw	r20, r24
    20d6:	bd 01       	movw	r22, r26
    20d8:	cf 01       	movw	r24, r30
    20da:	08 95       	ret

000020dc <__umulhisi3>:
    20dc:	a2 9f       	mul	r26, r18
    20de:	b0 01       	movw	r22, r0
    20e0:	b3 9f       	mul	r27, r19
    20e2:	c0 01       	movw	r24, r0
    20e4:	a3 9f       	mul	r26, r19
    20e6:	70 0d       	add	r23, r0
    20e8:	81 1d       	adc	r24, r1
    20ea:	11 24       	eor	r1, r1
    20ec:	91 1d       	adc	r25, r1
    20ee:	b2 9f       	mul	r27, r18
    20f0:	70 0d       	add	r23, r0
    20f2:	81 1d       	adc	r24, r1
    20f4:	11 24       	eor	r1, r1
    20f6:	91 1d       	adc	r25, r1
    20f8:	08 95       	ret

000020fa <__muluhisi3>:
    20fa:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__umulhisi3>
    20fe:	a5 9f       	mul	r26, r21
    2100:	90 0d       	add	r25, r0
    2102:	b4 9f       	mul	r27, r20
    2104:	90 0d       	add	r25, r0
    2106:	a4 9f       	mul	r26, r20
    2108:	80 0d       	add	r24, r0
    210a:	91 1d       	adc	r25, r1
    210c:	11 24       	eor	r1, r1
    210e:	08 95       	ret

00002110 <strlen>:
    2110:	fc 01       	movw	r30, r24
    2112:	01 90       	ld	r0, Z+
    2114:	00 20       	and	r0, r0
    2116:	e9 f7       	brne	.-6      	; 0x2112 <strlen+0x2>
    2118:	80 95       	com	r24
    211a:	90 95       	com	r25
    211c:	8e 0f       	add	r24, r30
    211e:	9f 1f       	adc	r25, r31
    2120:	08 95       	ret

00002122 <sprintf>:
    2122:	ae e0       	ldi	r26, 0x0E	; 14
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e9       	ldi	r30, 0x97	; 151
    2128:	f0 e1       	ldi	r31, 0x10	; 16
    212a:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__prologue_saves__+0x1c>
    212e:	0d 89       	ldd	r16, Y+21	; 0x15
    2130:	1e 89       	ldd	r17, Y+22	; 0x16
    2132:	86 e0       	ldi	r24, 0x06	; 6
    2134:	8c 83       	std	Y+4, r24	; 0x04
    2136:	1a 83       	std	Y+2, r17	; 0x02
    2138:	09 83       	std	Y+1, r16	; 0x01
    213a:	8f ef       	ldi	r24, 0xFF	; 255
    213c:	9f e7       	ldi	r25, 0x7F	; 127
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	ae 01       	movw	r20, r28
    2144:	47 5e       	subi	r20, 0xE7	; 231
    2146:	5f 4f       	sbci	r21, 0xFF	; 255
    2148:	6f 89       	ldd	r22, Y+23	; 0x17
    214a:	78 8d       	ldd	r23, Y+24	; 0x18
    214c:	ce 01       	movw	r24, r28
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	0e 94 b3 10 	call	0x2166	; 0x2166 <vfprintf>
    2154:	ef 81       	ldd	r30, Y+7	; 0x07
    2156:	f8 85       	ldd	r31, Y+8	; 0x08
    2158:	e0 0f       	add	r30, r16
    215a:	f1 1f       	adc	r31, r17
    215c:	10 82       	st	Z, r1
    215e:	2e 96       	adiw	r28, 0x0e	; 14
    2160:	e4 e0       	ldi	r30, 0x04	; 4
    2162:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__epilogue_restores__+0x1c>

00002166 <vfprintf>:
    2166:	ac e0       	ldi	r26, 0x0C	; 12
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e9 eb       	ldi	r30, 0xB9	; 185
    216c:	f0 e1       	ldi	r31, 0x10	; 16
    216e:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__prologue_saves__>
    2172:	7c 01       	movw	r14, r24
    2174:	6b 01       	movw	r12, r22
    2176:	8a 01       	movw	r16, r20
    2178:	fc 01       	movw	r30, r24
    217a:	17 82       	std	Z+7, r1	; 0x07
    217c:	16 82       	std	Z+6, r1	; 0x06
    217e:	83 81       	ldd	r24, Z+3	; 0x03
    2180:	81 ff       	sbrs	r24, 1
    2182:	bd c1       	rjmp	.+890    	; 0x24fe <vfprintf+0x398>
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	4c 01       	movw	r8, r24
    218a:	f7 01       	movw	r30, r14
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	f6 01       	movw	r30, r12
    2190:	93 fd       	sbrc	r25, 3
    2192:	85 91       	lpm	r24, Z+
    2194:	93 ff       	sbrs	r25, 3
    2196:	81 91       	ld	r24, Z+
    2198:	6f 01       	movw	r12, r30
    219a:	88 23       	and	r24, r24
    219c:	09 f4       	brne	.+2      	; 0x21a0 <vfprintf+0x3a>
    219e:	ab c1       	rjmp	.+854    	; 0x24f6 <vfprintf+0x390>
    21a0:	85 32       	cpi	r24, 0x25	; 37
    21a2:	39 f4       	brne	.+14     	; 0x21b2 <vfprintf+0x4c>
    21a4:	93 fd       	sbrc	r25, 3
    21a6:	85 91       	lpm	r24, Z+
    21a8:	93 ff       	sbrs	r25, 3
    21aa:	81 91       	ld	r24, Z+
    21ac:	6f 01       	movw	r12, r30
    21ae:	85 32       	cpi	r24, 0x25	; 37
    21b0:	29 f4       	brne	.+10     	; 0x21bc <vfprintf+0x56>
    21b2:	b7 01       	movw	r22, r14
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    21ba:	e7 cf       	rjmp	.-50     	; 0x218a <vfprintf+0x24>
    21bc:	51 2c       	mov	r5, r1
    21be:	31 2c       	mov	r3, r1
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	20 32       	cpi	r18, 0x20	; 32
    21c4:	a0 f4       	brcc	.+40     	; 0x21ee <vfprintf+0x88>
    21c6:	8b 32       	cpi	r24, 0x2B	; 43
    21c8:	69 f0       	breq	.+26     	; 0x21e4 <vfprintf+0x7e>
    21ca:	30 f4       	brcc	.+12     	; 0x21d8 <vfprintf+0x72>
    21cc:	80 32       	cpi	r24, 0x20	; 32
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <vfprintf+0x80>
    21d0:	83 32       	cpi	r24, 0x23	; 35
    21d2:	69 f4       	brne	.+26     	; 0x21ee <vfprintf+0x88>
    21d4:	20 61       	ori	r18, 0x10	; 16
    21d6:	2c c0       	rjmp	.+88     	; 0x2230 <vfprintf+0xca>
    21d8:	8d 32       	cpi	r24, 0x2D	; 45
    21da:	39 f0       	breq	.+14     	; 0x21ea <vfprintf+0x84>
    21dc:	80 33       	cpi	r24, 0x30	; 48
    21de:	39 f4       	brne	.+14     	; 0x21ee <vfprintf+0x88>
    21e0:	21 60       	ori	r18, 0x01	; 1
    21e2:	26 c0       	rjmp	.+76     	; 0x2230 <vfprintf+0xca>
    21e4:	22 60       	ori	r18, 0x02	; 2
    21e6:	24 60       	ori	r18, 0x04	; 4
    21e8:	23 c0       	rjmp	.+70     	; 0x2230 <vfprintf+0xca>
    21ea:	28 60       	ori	r18, 0x08	; 8
    21ec:	21 c0       	rjmp	.+66     	; 0x2230 <vfprintf+0xca>
    21ee:	27 fd       	sbrc	r18, 7
    21f0:	27 c0       	rjmp	.+78     	; 0x2240 <vfprintf+0xda>
    21f2:	30 ed       	ldi	r19, 0xD0	; 208
    21f4:	38 0f       	add	r19, r24
    21f6:	3a 30       	cpi	r19, 0x0A	; 10
    21f8:	78 f4       	brcc	.+30     	; 0x2218 <vfprintf+0xb2>
    21fa:	26 ff       	sbrs	r18, 6
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <vfprintf+0xa4>
    21fe:	fa e0       	ldi	r31, 0x0A	; 10
    2200:	5f 9e       	mul	r5, r31
    2202:	30 0d       	add	r19, r0
    2204:	11 24       	eor	r1, r1
    2206:	53 2e       	mov	r5, r19
    2208:	13 c0       	rjmp	.+38     	; 0x2230 <vfprintf+0xca>
    220a:	8a e0       	ldi	r24, 0x0A	; 10
    220c:	38 9e       	mul	r3, r24
    220e:	30 0d       	add	r19, r0
    2210:	11 24       	eor	r1, r1
    2212:	33 2e       	mov	r3, r19
    2214:	20 62       	ori	r18, 0x20	; 32
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <vfprintf+0xca>
    2218:	8e 32       	cpi	r24, 0x2E	; 46
    221a:	21 f4       	brne	.+8      	; 0x2224 <vfprintf+0xbe>
    221c:	26 fd       	sbrc	r18, 6
    221e:	6b c1       	rjmp	.+726    	; 0x24f6 <vfprintf+0x390>
    2220:	20 64       	ori	r18, 0x40	; 64
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <vfprintf+0xca>
    2224:	8c 36       	cpi	r24, 0x6C	; 108
    2226:	11 f4       	brne	.+4      	; 0x222c <vfprintf+0xc6>
    2228:	20 68       	ori	r18, 0x80	; 128
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <vfprintf+0xca>
    222c:	88 36       	cpi	r24, 0x68	; 104
    222e:	41 f4       	brne	.+16     	; 0x2240 <vfprintf+0xda>
    2230:	f6 01       	movw	r30, r12
    2232:	93 fd       	sbrc	r25, 3
    2234:	85 91       	lpm	r24, Z+
    2236:	93 ff       	sbrs	r25, 3
    2238:	81 91       	ld	r24, Z+
    223a:	6f 01       	movw	r12, r30
    223c:	81 11       	cpse	r24, r1
    223e:	c1 cf       	rjmp	.-126    	; 0x21c2 <vfprintf+0x5c>
    2240:	98 2f       	mov	r25, r24
    2242:	9f 7d       	andi	r25, 0xDF	; 223
    2244:	95 54       	subi	r25, 0x45	; 69
    2246:	93 30       	cpi	r25, 0x03	; 3
    2248:	28 f4       	brcc	.+10     	; 0x2254 <vfprintf+0xee>
    224a:	0c 5f       	subi	r16, 0xFC	; 252
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	ff e3       	ldi	r31, 0x3F	; 63
    2250:	f9 83       	std	Y+1, r31	; 0x01
    2252:	0d c0       	rjmp	.+26     	; 0x226e <vfprintf+0x108>
    2254:	83 36       	cpi	r24, 0x63	; 99
    2256:	31 f0       	breq	.+12     	; 0x2264 <vfprintf+0xfe>
    2258:	83 37       	cpi	r24, 0x73	; 115
    225a:	71 f0       	breq	.+28     	; 0x2278 <vfprintf+0x112>
    225c:	83 35       	cpi	r24, 0x53	; 83
    225e:	09 f0       	breq	.+2      	; 0x2262 <vfprintf+0xfc>
    2260:	5b c0       	rjmp	.+182    	; 0x2318 <vfprintf+0x1b2>
    2262:	22 c0       	rjmp	.+68     	; 0x22a8 <vfprintf+0x142>
    2264:	f8 01       	movw	r30, r16
    2266:	80 81       	ld	r24, Z
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	0e 5f       	subi	r16, 0xFE	; 254
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	44 24       	eor	r4, r4
    2270:	43 94       	inc	r4
    2272:	51 2c       	mov	r5, r1
    2274:	54 01       	movw	r10, r8
    2276:	15 c0       	rjmp	.+42     	; 0x22a2 <vfprintf+0x13c>
    2278:	38 01       	movw	r6, r16
    227a:	f2 e0       	ldi	r31, 0x02	; 2
    227c:	6f 0e       	add	r6, r31
    227e:	71 1c       	adc	r7, r1
    2280:	f8 01       	movw	r30, r16
    2282:	a0 80       	ld	r10, Z
    2284:	b1 80       	ldd	r11, Z+1	; 0x01
    2286:	26 ff       	sbrs	r18, 6
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <vfprintf+0x12a>
    228a:	65 2d       	mov	r22, r5
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <vfprintf+0x12e>
    2290:	6f ef       	ldi	r22, 0xFF	; 255
    2292:	7f ef       	ldi	r23, 0xFF	; 255
    2294:	c5 01       	movw	r24, r10
    2296:	2c 87       	std	Y+12, r18	; 0x0c
    2298:	0e 94 90 12 	call	0x2520	; 0x2520 <strnlen>
    229c:	2c 01       	movw	r4, r24
    229e:	83 01       	movw	r16, r6
    22a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    22a2:	2f 77       	andi	r18, 0x7F	; 127
    22a4:	22 2e       	mov	r2, r18
    22a6:	17 c0       	rjmp	.+46     	; 0x22d6 <vfprintf+0x170>
    22a8:	38 01       	movw	r6, r16
    22aa:	f2 e0       	ldi	r31, 0x02	; 2
    22ac:	6f 0e       	add	r6, r31
    22ae:	71 1c       	adc	r7, r1
    22b0:	f8 01       	movw	r30, r16
    22b2:	a0 80       	ld	r10, Z
    22b4:	b1 80       	ldd	r11, Z+1	; 0x01
    22b6:	26 ff       	sbrs	r18, 6
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <vfprintf+0x15a>
    22ba:	65 2d       	mov	r22, r5
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <vfprintf+0x15e>
    22c0:	6f ef       	ldi	r22, 0xFF	; 255
    22c2:	7f ef       	ldi	r23, 0xFF	; 255
    22c4:	c5 01       	movw	r24, r10
    22c6:	2c 87       	std	Y+12, r18	; 0x0c
    22c8:	0e 94 85 12 	call	0x250a	; 0x250a <strnlen_P>
    22cc:	2c 01       	movw	r4, r24
    22ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    22d0:	20 68       	ori	r18, 0x80	; 128
    22d2:	22 2e       	mov	r2, r18
    22d4:	83 01       	movw	r16, r6
    22d6:	23 fc       	sbrc	r2, 3
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <vfprintf+0x1aa>
    22da:	83 2d       	mov	r24, r3
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	48 16       	cp	r4, r24
    22e0:	59 06       	cpc	r5, r25
    22e2:	b0 f4       	brcc	.+44     	; 0x2310 <vfprintf+0x1aa>
    22e4:	b7 01       	movw	r22, r14
    22e6:	80 e2       	ldi	r24, 0x20	; 32
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    22ee:	3a 94       	dec	r3
    22f0:	f4 cf       	rjmp	.-24     	; 0x22da <vfprintf+0x174>
    22f2:	f5 01       	movw	r30, r10
    22f4:	27 fc       	sbrc	r2, 7
    22f6:	85 91       	lpm	r24, Z+
    22f8:	27 fe       	sbrs	r2, 7
    22fa:	81 91       	ld	r24, Z+
    22fc:	5f 01       	movw	r10, r30
    22fe:	b7 01       	movw	r22, r14
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    2306:	31 10       	cpse	r3, r1
    2308:	3a 94       	dec	r3
    230a:	f1 e0       	ldi	r31, 0x01	; 1
    230c:	4f 1a       	sub	r4, r31
    230e:	51 08       	sbc	r5, r1
    2310:	41 14       	cp	r4, r1
    2312:	51 04       	cpc	r5, r1
    2314:	71 f7       	brne	.-36     	; 0x22f2 <vfprintf+0x18c>
    2316:	e5 c0       	rjmp	.+458    	; 0x24e2 <vfprintf+0x37c>
    2318:	84 36       	cpi	r24, 0x64	; 100
    231a:	11 f0       	breq	.+4      	; 0x2320 <vfprintf+0x1ba>
    231c:	89 36       	cpi	r24, 0x69	; 105
    231e:	39 f5       	brne	.+78     	; 0x236e <vfprintf+0x208>
    2320:	f8 01       	movw	r30, r16
    2322:	27 ff       	sbrs	r18, 7
    2324:	07 c0       	rjmp	.+14     	; 0x2334 <vfprintf+0x1ce>
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	0c 5f       	subi	r16, 0xFC	; 252
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	08 c0       	rjmp	.+16     	; 0x2344 <vfprintf+0x1de>
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	88 27       	eor	r24, r24
    233a:	77 fd       	sbrc	r23, 7
    233c:	80 95       	com	r24
    233e:	98 2f       	mov	r25, r24
    2340:	0e 5f       	subi	r16, 0xFE	; 254
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	2f 76       	andi	r18, 0x6F	; 111
    2346:	b2 2e       	mov	r11, r18
    2348:	97 ff       	sbrs	r25, 7
    234a:	09 c0       	rjmp	.+18     	; 0x235e <vfprintf+0x1f8>
    234c:	90 95       	com	r25
    234e:	80 95       	com	r24
    2350:	70 95       	com	r23
    2352:	61 95       	neg	r22
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	20 68       	ori	r18, 0x80	; 128
    235c:	b2 2e       	mov	r11, r18
    235e:	2a e0       	ldi	r18, 0x0A	; 10
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	a4 01       	movw	r20, r8
    2364:	0e 94 cd 12 	call	0x259a	; 0x259a <__ultoa_invert>
    2368:	a8 2e       	mov	r10, r24
    236a:	a8 18       	sub	r10, r8
    236c:	44 c0       	rjmp	.+136    	; 0x23f6 <vfprintf+0x290>
    236e:	85 37       	cpi	r24, 0x75	; 117
    2370:	29 f4       	brne	.+10     	; 0x237c <vfprintf+0x216>
    2372:	2f 7e       	andi	r18, 0xEF	; 239
    2374:	b2 2e       	mov	r11, r18
    2376:	2a e0       	ldi	r18, 0x0A	; 10
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	25 c0       	rjmp	.+74     	; 0x23c6 <vfprintf+0x260>
    237c:	f2 2f       	mov	r31, r18
    237e:	f9 7f       	andi	r31, 0xF9	; 249
    2380:	bf 2e       	mov	r11, r31
    2382:	8f 36       	cpi	r24, 0x6F	; 111
    2384:	c1 f0       	breq	.+48     	; 0x23b6 <vfprintf+0x250>
    2386:	18 f4       	brcc	.+6      	; 0x238e <vfprintf+0x228>
    2388:	88 35       	cpi	r24, 0x58	; 88
    238a:	79 f0       	breq	.+30     	; 0x23aa <vfprintf+0x244>
    238c:	b4 c0       	rjmp	.+360    	; 0x24f6 <vfprintf+0x390>
    238e:	80 37       	cpi	r24, 0x70	; 112
    2390:	19 f0       	breq	.+6      	; 0x2398 <vfprintf+0x232>
    2392:	88 37       	cpi	r24, 0x78	; 120
    2394:	21 f0       	breq	.+8      	; 0x239e <vfprintf+0x238>
    2396:	af c0       	rjmp	.+350    	; 0x24f6 <vfprintf+0x390>
    2398:	2f 2f       	mov	r18, r31
    239a:	20 61       	ori	r18, 0x10	; 16
    239c:	b2 2e       	mov	r11, r18
    239e:	b4 fe       	sbrs	r11, 4
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <vfprintf+0x256>
    23a2:	8b 2d       	mov	r24, r11
    23a4:	84 60       	ori	r24, 0x04	; 4
    23a6:	b8 2e       	mov	r11, r24
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <vfprintf+0x256>
    23aa:	24 ff       	sbrs	r18, 4
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <vfprintf+0x25c>
    23ae:	9f 2f       	mov	r25, r31
    23b0:	96 60       	ori	r25, 0x06	; 6
    23b2:	b9 2e       	mov	r11, r25
    23b4:	06 c0       	rjmp	.+12     	; 0x23c2 <vfprintf+0x25c>
    23b6:	28 e0       	ldi	r18, 0x08	; 8
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	05 c0       	rjmp	.+10     	; 0x23c6 <vfprintf+0x260>
    23bc:	20 e1       	ldi	r18, 0x10	; 16
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <vfprintf+0x260>
    23c2:	20 e1       	ldi	r18, 0x10	; 16
    23c4:	32 e0       	ldi	r19, 0x02	; 2
    23c6:	f8 01       	movw	r30, r16
    23c8:	b7 fe       	sbrs	r11, 7
    23ca:	07 c0       	rjmp	.+14     	; 0x23da <vfprintf+0x274>
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0c 5f       	subi	r16, 0xFC	; 252
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	06 c0       	rjmp	.+12     	; 0x23e6 <vfprintf+0x280>
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 5f       	subi	r16, 0xFE	; 254
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	a4 01       	movw	r20, r8
    23e8:	0e 94 cd 12 	call	0x259a	; 0x259a <__ultoa_invert>
    23ec:	a8 2e       	mov	r10, r24
    23ee:	a8 18       	sub	r10, r8
    23f0:	fb 2d       	mov	r31, r11
    23f2:	ff 77       	andi	r31, 0x7F	; 127
    23f4:	bf 2e       	mov	r11, r31
    23f6:	b6 fe       	sbrs	r11, 6
    23f8:	0b c0       	rjmp	.+22     	; 0x2410 <vfprintf+0x2aa>
    23fa:	2b 2d       	mov	r18, r11
    23fc:	2e 7f       	andi	r18, 0xFE	; 254
    23fe:	a5 14       	cp	r10, r5
    2400:	50 f4       	brcc	.+20     	; 0x2416 <vfprintf+0x2b0>
    2402:	b4 fe       	sbrs	r11, 4
    2404:	0a c0       	rjmp	.+20     	; 0x241a <vfprintf+0x2b4>
    2406:	b2 fc       	sbrc	r11, 2
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x2b4>
    240a:	2b 2d       	mov	r18, r11
    240c:	2e 7e       	andi	r18, 0xEE	; 238
    240e:	05 c0       	rjmp	.+10     	; 0x241a <vfprintf+0x2b4>
    2410:	7a 2c       	mov	r7, r10
    2412:	2b 2d       	mov	r18, r11
    2414:	03 c0       	rjmp	.+6      	; 0x241c <vfprintf+0x2b6>
    2416:	7a 2c       	mov	r7, r10
    2418:	01 c0       	rjmp	.+2      	; 0x241c <vfprintf+0x2b6>
    241a:	75 2c       	mov	r7, r5
    241c:	24 ff       	sbrs	r18, 4
    241e:	0d c0       	rjmp	.+26     	; 0x243a <vfprintf+0x2d4>
    2420:	fe 01       	movw	r30, r28
    2422:	ea 0d       	add	r30, r10
    2424:	f1 1d       	adc	r31, r1
    2426:	80 81       	ld	r24, Z
    2428:	80 33       	cpi	r24, 0x30	; 48
    242a:	11 f4       	brne	.+4      	; 0x2430 <vfprintf+0x2ca>
    242c:	29 7e       	andi	r18, 0xE9	; 233
    242e:	09 c0       	rjmp	.+18     	; 0x2442 <vfprintf+0x2dc>
    2430:	22 ff       	sbrs	r18, 2
    2432:	06 c0       	rjmp	.+12     	; 0x2440 <vfprintf+0x2da>
    2434:	73 94       	inc	r7
    2436:	73 94       	inc	r7
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <vfprintf+0x2dc>
    243a:	82 2f       	mov	r24, r18
    243c:	86 78       	andi	r24, 0x86	; 134
    243e:	09 f0       	breq	.+2      	; 0x2442 <vfprintf+0x2dc>
    2440:	73 94       	inc	r7
    2442:	23 fd       	sbrc	r18, 3
    2444:	13 c0       	rjmp	.+38     	; 0x246c <vfprintf+0x306>
    2446:	20 ff       	sbrs	r18, 0
    2448:	06 c0       	rjmp	.+12     	; 0x2456 <vfprintf+0x2f0>
    244a:	5a 2c       	mov	r5, r10
    244c:	73 14       	cp	r7, r3
    244e:	18 f4       	brcc	.+6      	; 0x2456 <vfprintf+0x2f0>
    2450:	53 0c       	add	r5, r3
    2452:	57 18       	sub	r5, r7
    2454:	73 2c       	mov	r7, r3
    2456:	73 14       	cp	r7, r3
    2458:	68 f4       	brcc	.+26     	; 0x2474 <vfprintf+0x30e>
    245a:	b7 01       	movw	r22, r14
    245c:	80 e2       	ldi	r24, 0x20	; 32
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	2c 87       	std	Y+12, r18	; 0x0c
    2462:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    2466:	73 94       	inc	r7
    2468:	2c 85       	ldd	r18, Y+12	; 0x0c
    246a:	f5 cf       	rjmp	.-22     	; 0x2456 <vfprintf+0x2f0>
    246c:	73 14       	cp	r7, r3
    246e:	10 f4       	brcc	.+4      	; 0x2474 <vfprintf+0x30e>
    2470:	37 18       	sub	r3, r7
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <vfprintf+0x310>
    2474:	31 2c       	mov	r3, r1
    2476:	24 ff       	sbrs	r18, 4
    2478:	12 c0       	rjmp	.+36     	; 0x249e <vfprintf+0x338>
    247a:	b7 01       	movw	r22, r14
    247c:	80 e3       	ldi	r24, 0x30	; 48
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	2c 87       	std	Y+12, r18	; 0x0c
    2482:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    2486:	2c 85       	ldd	r18, Y+12	; 0x0c
    2488:	22 ff       	sbrs	r18, 2
    248a:	17 c0       	rjmp	.+46     	; 0x24ba <vfprintf+0x354>
    248c:	21 ff       	sbrs	r18, 1
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <vfprintf+0x330>
    2490:	88 e5       	ldi	r24, 0x58	; 88
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	02 c0       	rjmp	.+4      	; 0x249a <vfprintf+0x334>
    2496:	88 e7       	ldi	r24, 0x78	; 120
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	b7 01       	movw	r22, r14
    249c:	0c c0       	rjmp	.+24     	; 0x24b6 <vfprintf+0x350>
    249e:	82 2f       	mov	r24, r18
    24a0:	86 78       	andi	r24, 0x86	; 134
    24a2:	59 f0       	breq	.+22     	; 0x24ba <vfprintf+0x354>
    24a4:	21 fd       	sbrc	r18, 1
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <vfprintf+0x346>
    24a8:	80 e2       	ldi	r24, 0x20	; 32
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <vfprintf+0x348>
    24ac:	8b e2       	ldi	r24, 0x2B	; 43
    24ae:	27 fd       	sbrc	r18, 7
    24b0:	8d e2       	ldi	r24, 0x2D	; 45
    24b2:	b7 01       	movw	r22, r14
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    24ba:	a5 14       	cp	r10, r5
    24bc:	38 f4       	brcc	.+14     	; 0x24cc <vfprintf+0x366>
    24be:	b7 01       	movw	r22, r14
    24c0:	80 e3       	ldi	r24, 0x30	; 48
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    24c8:	5a 94       	dec	r5
    24ca:	f7 cf       	rjmp	.-18     	; 0x24ba <vfprintf+0x354>
    24cc:	aa 94       	dec	r10
    24ce:	f4 01       	movw	r30, r8
    24d0:	ea 0d       	add	r30, r10
    24d2:	f1 1d       	adc	r31, r1
    24d4:	80 81       	ld	r24, Z
    24d6:	b7 01       	movw	r22, r14
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    24de:	a1 10       	cpse	r10, r1
    24e0:	f5 cf       	rjmp	.-22     	; 0x24cc <vfprintf+0x366>
    24e2:	33 20       	and	r3, r3
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <vfprintf+0x382>
    24e6:	51 ce       	rjmp	.-862    	; 0x218a <vfprintf+0x24>
    24e8:	b7 01       	movw	r22, r14
    24ea:	80 e2       	ldi	r24, 0x20	; 32
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 9b 12 	call	0x2536	; 0x2536 <fputc>
    24f2:	3a 94       	dec	r3
    24f4:	f6 cf       	rjmp	.-20     	; 0x24e2 <vfprintf+0x37c>
    24f6:	f7 01       	movw	r30, r14
    24f8:	86 81       	ldd	r24, Z+6	; 0x06
    24fa:	97 81       	ldd	r25, Z+7	; 0x07
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <vfprintf+0x39c>
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	2c 96       	adiw	r28, 0x0c	; 12
    2504:	e2 e1       	ldi	r30, 0x12	; 18
    2506:	0c 94 47 13 	jmp	0x268e	; 0x268e <__epilogue_restores__>

0000250a <strnlen_P>:
    250a:	fc 01       	movw	r30, r24
    250c:	05 90       	lpm	r0, Z+
    250e:	61 50       	subi	r22, 0x01	; 1
    2510:	70 40       	sbci	r23, 0x00	; 0
    2512:	01 10       	cpse	r0, r1
    2514:	d8 f7       	brcc	.-10     	; 0x250c <strnlen_P+0x2>
    2516:	80 95       	com	r24
    2518:	90 95       	com	r25
    251a:	8e 0f       	add	r24, r30
    251c:	9f 1f       	adc	r25, r31
    251e:	08 95       	ret

00002520 <strnlen>:
    2520:	fc 01       	movw	r30, r24
    2522:	61 50       	subi	r22, 0x01	; 1
    2524:	70 40       	sbci	r23, 0x00	; 0
    2526:	01 90       	ld	r0, Z+
    2528:	01 10       	cpse	r0, r1
    252a:	d8 f7       	brcc	.-10     	; 0x2522 <strnlen+0x2>
    252c:	80 95       	com	r24
    252e:	90 95       	com	r25
    2530:	8e 0f       	add	r24, r30
    2532:	9f 1f       	adc	r25, r31
    2534:	08 95       	ret

00002536 <fputc>:
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	18 2f       	mov	r17, r24
    2540:	09 2f       	mov	r16, r25
    2542:	eb 01       	movw	r28, r22
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	81 fd       	sbrc	r24, 1
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <fputc+0x1a>
    254a:	8f ef       	ldi	r24, 0xFF	; 255
    254c:	9f ef       	ldi	r25, 0xFF	; 255
    254e:	20 c0       	rjmp	.+64     	; 0x2590 <fputc+0x5a>
    2550:	82 ff       	sbrs	r24, 2
    2552:	10 c0       	rjmp	.+32     	; 0x2574 <fputc+0x3e>
    2554:	4e 81       	ldd	r20, Y+6	; 0x06
    2556:	5f 81       	ldd	r21, Y+7	; 0x07
    2558:	2c 81       	ldd	r18, Y+4	; 0x04
    255a:	3d 81       	ldd	r19, Y+5	; 0x05
    255c:	42 17       	cp	r20, r18
    255e:	53 07       	cpc	r21, r19
    2560:	7c f4       	brge	.+30     	; 0x2580 <fputc+0x4a>
    2562:	e8 81       	ld	r30, Y
    2564:	f9 81       	ldd	r31, Y+1	; 0x01
    2566:	9f 01       	movw	r18, r30
    2568:	2f 5f       	subi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	39 83       	std	Y+1, r19	; 0x01
    256e:	28 83       	st	Y, r18
    2570:	10 83       	st	Z, r17
    2572:	06 c0       	rjmp	.+12     	; 0x2580 <fputc+0x4a>
    2574:	e8 85       	ldd	r30, Y+8	; 0x08
    2576:	f9 85       	ldd	r31, Y+9	; 0x09
    2578:	81 2f       	mov	r24, r17
    257a:	09 95       	icall
    257c:	89 2b       	or	r24, r25
    257e:	29 f7       	brne	.-54     	; 0x254a <fputc+0x14>
    2580:	2e 81       	ldd	r18, Y+6	; 0x06
    2582:	3f 81       	ldd	r19, Y+7	; 0x07
    2584:	2f 5f       	subi	r18, 0xFF	; 255
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
    2588:	3f 83       	std	Y+7, r19	; 0x07
    258a:	2e 83       	std	Y+6, r18	; 0x06
    258c:	81 2f       	mov	r24, r17
    258e:	90 2f       	mov	r25, r16
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <__ultoa_invert>:
    259a:	fa 01       	movw	r30, r20
    259c:	aa 27       	eor	r26, r26
    259e:	28 30       	cpi	r18, 0x08	; 8
    25a0:	51 f1       	breq	.+84     	; 0x25f6 <__ultoa_invert+0x5c>
    25a2:	20 31       	cpi	r18, 0x10	; 16
    25a4:	81 f1       	breq	.+96     	; 0x2606 <__ultoa_invert+0x6c>
    25a6:	e8 94       	clt
    25a8:	6f 93       	push	r22
    25aa:	6e 7f       	andi	r22, 0xFE	; 254
    25ac:	6e 5f       	subi	r22, 0xFE	; 254
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	8f 4f       	sbci	r24, 0xFF	; 255
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	af 4f       	sbci	r26, 0xFF	; 255
    25b6:	b1 e0       	ldi	r27, 0x01	; 1
    25b8:	3e d0       	rcall	.+124    	; 0x2636 <__ultoa_invert+0x9c>
    25ba:	b4 e0       	ldi	r27, 0x04	; 4
    25bc:	3c d0       	rcall	.+120    	; 0x2636 <__ultoa_invert+0x9c>
    25be:	67 0f       	add	r22, r23
    25c0:	78 1f       	adc	r23, r24
    25c2:	89 1f       	adc	r24, r25
    25c4:	9a 1f       	adc	r25, r26
    25c6:	a1 1d       	adc	r26, r1
    25c8:	68 0f       	add	r22, r24
    25ca:	79 1f       	adc	r23, r25
    25cc:	8a 1f       	adc	r24, r26
    25ce:	91 1d       	adc	r25, r1
    25d0:	a1 1d       	adc	r26, r1
    25d2:	6a 0f       	add	r22, r26
    25d4:	71 1d       	adc	r23, r1
    25d6:	81 1d       	adc	r24, r1
    25d8:	91 1d       	adc	r25, r1
    25da:	a1 1d       	adc	r26, r1
    25dc:	20 d0       	rcall	.+64     	; 0x261e <__ultoa_invert+0x84>
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__ultoa_invert+0x48>
    25e0:	68 94       	set
    25e2:	3f 91       	pop	r19
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	26 9f       	mul	r18, r22
    25e8:	11 24       	eor	r1, r1
    25ea:	30 19       	sub	r19, r0
    25ec:	30 5d       	subi	r19, 0xD0	; 208
    25ee:	31 93       	st	Z+, r19
    25f0:	de f6       	brtc	.-74     	; 0x25a8 <__ultoa_invert+0xe>
    25f2:	cf 01       	movw	r24, r30
    25f4:	08 95       	ret
    25f6:	46 2f       	mov	r20, r22
    25f8:	47 70       	andi	r20, 0x07	; 7
    25fa:	40 5d       	subi	r20, 0xD0	; 208
    25fc:	41 93       	st	Z+, r20
    25fe:	b3 e0       	ldi	r27, 0x03	; 3
    2600:	0f d0       	rcall	.+30     	; 0x2620 <__ultoa_invert+0x86>
    2602:	c9 f7       	brne	.-14     	; 0x25f6 <__ultoa_invert+0x5c>
    2604:	f6 cf       	rjmp	.-20     	; 0x25f2 <__ultoa_invert+0x58>
    2606:	46 2f       	mov	r20, r22
    2608:	4f 70       	andi	r20, 0x0F	; 15
    260a:	40 5d       	subi	r20, 0xD0	; 208
    260c:	4a 33       	cpi	r20, 0x3A	; 58
    260e:	18 f0       	brcs	.+6      	; 0x2616 <__ultoa_invert+0x7c>
    2610:	49 5d       	subi	r20, 0xD9	; 217
    2612:	31 fd       	sbrc	r19, 1
    2614:	40 52       	subi	r20, 0x20	; 32
    2616:	41 93       	st	Z+, r20
    2618:	02 d0       	rcall	.+4      	; 0x261e <__ultoa_invert+0x84>
    261a:	a9 f7       	brne	.-22     	; 0x2606 <__ultoa_invert+0x6c>
    261c:	ea cf       	rjmp	.-44     	; 0x25f2 <__ultoa_invert+0x58>
    261e:	b4 e0       	ldi	r27, 0x04	; 4
    2620:	a6 95       	lsr	r26
    2622:	97 95       	ror	r25
    2624:	87 95       	ror	r24
    2626:	77 95       	ror	r23
    2628:	67 95       	ror	r22
    262a:	ba 95       	dec	r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__ultoa_invert+0x86>
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	61 05       	cpc	r22, r1
    2632:	71 05       	cpc	r23, r1
    2634:	08 95       	ret
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	0a 2e       	mov	r0, r26
    263c:	06 94       	lsr	r0
    263e:	57 95       	ror	r21
    2640:	47 95       	ror	r20
    2642:	37 95       	ror	r19
    2644:	27 95       	ror	r18
    2646:	ba 95       	dec	r27
    2648:	c9 f7       	brne	.-14     	; 0x263c <__ultoa_invert+0xa2>
    264a:	62 0f       	add	r22, r18
    264c:	73 1f       	adc	r23, r19
    264e:	84 1f       	adc	r24, r20
    2650:	95 1f       	adc	r25, r21
    2652:	a0 1d       	adc	r26, r0
    2654:	08 95       	ret

00002656 <__prologue_saves__>:
    2656:	2f 92       	push	r2
    2658:	3f 92       	push	r3
    265a:	4f 92       	push	r4
    265c:	5f 92       	push	r5
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8f 92       	push	r8
    2664:	9f 92       	push	r9
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	ca 1b       	sub	r28, r26
    2680:	db 0b       	sbc	r29, r27
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	09 94       	ijmp

0000268e <__epilogue_restores__>:
    268e:	2a 88       	ldd	r2, Y+18	; 0x12
    2690:	39 88       	ldd	r3, Y+17	; 0x11
    2692:	48 88       	ldd	r4, Y+16	; 0x10
    2694:	5f 84       	ldd	r5, Y+15	; 0x0f
    2696:	6e 84       	ldd	r6, Y+14	; 0x0e
    2698:	7d 84       	ldd	r7, Y+13	; 0x0d
    269a:	8c 84       	ldd	r8, Y+12	; 0x0c
    269c:	9b 84       	ldd	r9, Y+11	; 0x0b
    269e:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a0:	b9 84       	ldd	r11, Y+9	; 0x09
    26a2:	c8 84       	ldd	r12, Y+8	; 0x08
    26a4:	df 80       	ldd	r13, Y+7	; 0x07
    26a6:	ee 80       	ldd	r14, Y+6	; 0x06
    26a8:	fd 80       	ldd	r15, Y+5	; 0x05
    26aa:	0c 81       	ldd	r16, Y+4	; 0x04
    26ac:	1b 81       	ldd	r17, Y+3	; 0x03
    26ae:	aa 81       	ldd	r26, Y+2	; 0x02
    26b0:	b9 81       	ldd	r27, Y+1	; 0x01
    26b2:	ce 0f       	add	r28, r30
    26b4:	d1 1d       	adc	r29, r1
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	ed 01       	movw	r28, r26
    26c2:	08 95       	ret

000026c4 <_exit>:
    26c4:	f8 94       	cli

000026c6 <__stop_program>:
    26c6:	ff cf       	rjmp	.-2      	; 0x26c6 <__stop_program>
