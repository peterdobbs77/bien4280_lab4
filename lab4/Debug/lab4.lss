
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00002b18  00002bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000509  00800234  00800234  00002ce0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00002d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001609  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057a  00000000  00000000  00004551  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d9  00000000  00000000  00004acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000710  00000000  00000000  000054a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083d  00000000  00000000  00005bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb8  00000000  00000000  000063f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  000072a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 c1 01 	jmp	0x382	; 0x382 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 33       	cpi	r26, 0x3D	; 61
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b1 02 	call	0x562	; 0x562 <main>
      9e:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:

OSStartHighRdy:
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
      a6:	00 91 3b 06 	lds	r16, 0x063B
                inc     R16                         ;
      aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
      ac:	00 93 3b 06 	sts	0x063B, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
      b0:	e0 91 50 06 	lds	r30, 0x0650
                lds     R31,OSTCBHighRdy+1          ; ready to run
      b4:	f0 91 51 06 	lds	r31, 0x0651

                ld      R28,Z+                      ; Load stack L pointer
      b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
      ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
      bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
      be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
                ret                                 ; Start task
     104:	08 95       	ret

00000106 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     14a:	e0 91 5e 06 	lds	r30, 0x065E
                lds     R31,OSTCBCur+1              ;
     14e:	f0 91 5f 06 	lds	r31, 0x065F

                in      r28,_SFR_IO_ADDR(SPL)
     152:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     154:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     156:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     158:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     15a:	00 91 40 06 	lds	r16, 0x0640
                sts     OSPrioCur,R16
     15e:	00 93 41 06 	sts	0x0641, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     162:	e0 91 50 06 	lds	r30, 0x0650
                lds     R31,OSTCBHighRdy+1          ; ready to run
     166:	f0 91 51 06 	lds	r31, 0x0651
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     16a:	e0 93 5e 06 	sts	0x065E, r30
                sts     OSTCBCur+1,R31              ;
     16e:	f0 93 5f 06 	sts	0x065F, r31

                ld      R28,Z+                      ; Restore Y pointer
     172:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     174:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     176:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     178:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
                ret
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     1c0:	00 91 40 06 	lds	r16, 0x0640
                sts     OSPrioCur,R16               ;
     1c4:	00 93 41 06 	sts	0x0641, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     1c8:	e0 91 50 06 	lds	r30, 0x0650
                lds     R31,OSTCBHighRdy+1          ;
     1cc:	f0 91 51 06 	lds	r31, 0x0651
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     1d0:	e0 93 5e 06 	sts	0x065E, r30
                sts     OSTCBCur+1,R31              ;
     1d4:	f0 93 5f 06 	sts	0x065F, r31

                ld      R28,Z+                      ; Restore Y pointer
     1d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
                ret
     224:	08 95       	ret

00000226 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     26c:	00 91 5d 06 	lds	r16, 0x065D
                inc     R16                         ;
     270:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     272:	00 93 5d 06 	sts	0x065D, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     276:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     27a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     27c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     27e:	e0 91 5e 06 	lds	r30, 0x065E
                lds     R31,OSTCBCur+1              ;
     282:	f0 91 5f 06 	lds	r31, 0x065F
                st      Z+,R28                      ; Save Y pointer
     286:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)
     28a:	02 eb       	ldi	r16, 0xB2	; 178
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     28c:	06 bd       	out	0x26, r16	; 38

                sei                                 ; Enable interrupts
     28e:	78 94       	sei

                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     290:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <OSTimeTick>
                nop
     294:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     296:	0e 94 a5 0a 	call	0x154a	; 0x154a <OSIntExit>

                POPSREG
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     2de:	08 95       	ret

000002e0 <WatchDogReset>:


.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     2e0:	a8 95       	wdr
				ret
     2e2:	08 95       	ret

000002e4 <__vector_9>:

#if 1
.global TIMER2_OVF_vect
TIMER2_OVF_vect:
				PUSHRS                              ; Save all registers
     2e4:	0f 92       	push	r0
     2e6:	1f 92       	push	r1
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     324:	0f b7       	in	r16, 0x3f	; 63
     326:	00 68       	ori	r16, 0x80	; 128
     328:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     32a:	00 91 5d 06 	lds	r16, 0x065D
                inc     R16                         ;
     32e:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     330:	00 93 5d 06 	sts	0x065D, r16

                call    PostTriggerComplete			; Call timer1 overflow incrementer
     334:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <PostTriggerComplete>

                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     338:	0e 94 a5 0a 	call	0x154a	; 0x154a <OSIntExit>
				POPSREG
     33c:	0f 91       	pop	r16
     33e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	7f 90       	pop	r7
     372:	6f 90       	pop	r6
     374:	5f 90       	pop	r5
     376:	4f 90       	pop	r4
     378:	3f 90       	pop	r3
     37a:	2f 90       	pop	r2
     37c:	1f 90       	pop	r1
     37e:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     380:	08 95       	ret

00000382 <SerTxISR>:


#if 1
.global USART_TX_vect								; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:		PUSHRS                              ; Save all registers
     382:	0f 92       	push	r0
     384:	1f 92       	push	r1
     386:	2f 92       	push	r2
     388:	3f 92       	push	r3
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ef 93       	push	r30
     3c0:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     3c2:	0f b7       	in	r16, 0x3f	; 63
     3c4:	00 68       	ori	r16, 0x80	; 128
     3c6:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     3c8:	00 91 5d 06 	lds	r16, 0x065D
                inc     R16                         ;
     3cc:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     3ce:	00 93 5d 06 	sts	0x065D, r16

				call	PostTxCompleteSem			; Post semaphore indicating transmission of data byte complete
     3d2:	0e 94 4b 04 	call	0x896	; 0x896 <PostTxCompleteSem>
				nop
     3d6:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     3d8:	0e 94 a5 0a 	call	0x154a	; 0x154a <OSIntExit>

                POPSREG
     3dc:	0f 91       	pop	r16
     3de:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	4f 90       	pop	r4
     418:	3f 90       	pop	r3
     41a:	2f 90       	pop	r2
     41c:	1f 90       	pop	r1
     41e:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     420:	08 95       	ret

00000422 <__vector_18>:
#endif

.global USART_RX_vect								; Receive Start Interrupt
USART_RX_vect:
SerRxISR:		PUSHRS								; Save all registers
     422:	0f 92       	push	r0
     424:	1f 92       	push	r1
     426:	2f 92       	push	r2
     428:	3f 92       	push	r3
     42a:	4f 92       	push	r4
     42c:	5f 92       	push	r5
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
				PUSHSREGISR                         ; Save SREG with I bit set!
     462:	0f b7       	in	r16, 0x3f	; 63
     464:	00 68       	ori	r16, 0x80	; 128
     466:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     468:	00 91 5d 06 	lds	r16, 0x065D
                inc     R16                         ;
     46c:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     46e:	00 93 5d 06 	sts	0x065D, r16

				call	ReadSerialChar				;
     472:	0e 94 58 04 	call	0x8b0	; 0x8b0 <ReadSerialChar>
				nop
     476:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     478:	0e 94 a5 0a 	call	0x154a	; 0x154a <OSIntExit>

                POPSREG
     47c:	0f 91       	pop	r16
     47e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	9f 90       	pop	r9
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	5f 90       	pop	r5
     4b6:	4f 90       	pop	r4
     4b8:	3f 90       	pop	r3
     4ba:	2f 90       	pop	r2
     4bc:	1f 90       	pop	r1
     4be:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     4c0:	08 95       	ret

000004c2 <__vector_1>:


.global INT0_vect
INT0_vect:		PUSHRS								; Save all registers
     4c2:	0f 92       	push	r0
     4c4:	1f 92       	push	r1
     4c6:	2f 92       	push	r2
     4c8:	3f 92       	push	r3
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
				PUSHSREGISR                         ; Save SREG with I bit set!
     502:	0f b7       	in	r16, 0x3f	; 63
     504:	00 68       	ori	r16, 0x80	; 128
     506:	0f 93       	push	r16

				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     508:	00 91 5d 06 	lds	r16, 0x065D
                inc     R16                         ;
     50c:	03 95       	inc	r16
				sts		OSIntNesting,R16			;
     50e:	00 93 5d 06 	sts	0x065D, r16

				call	EchoHelper					; Call pin-driven interrupt handling
     512:	0e 94 0d 05 	call	0xa1a	; 0xa1a <EchoHelper>
				nop
     516:	00 00       	nop
				call	OSIntExit					;
     518:	0e 94 a5 0a 	call	0x154a	; 0x154a <OSIntExit>

				POPSREG
     51c:	0f 91       	pop	r16
     51e:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	bf 90       	pop	r11
     54a:	af 90       	pop	r10
     54c:	9f 90       	pop	r9
     54e:	8f 90       	pop	r8
     550:	7f 90       	pop	r7
     552:	6f 90       	pop	r6
     554:	5f 90       	pop	r5
     556:	4f 90       	pop	r4
     558:	3f 90       	pop	r3
     55a:	2f 90       	pop	r2
     55c:	1f 90       	pop	r1
     55e:	0f 90       	pop	r0
     560:	08 95       	ret

00000562 <main>:
/*
 *********************************************************************************************************
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
	InitPeripherals();
     56a:	0e 94 8a 05 	call	0xb14	; 0xb14 <InitPeripherals>

    OSInit();                                              /* Initialize uC/OS-II                      */
     56e:	0e 94 b9 09 	call	0x1372	; 0x1372 <OSInit>

/* Create OS_EVENT resources here  */;
	SerialTxMBox = OSMboxCreate((void *)0);
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <OSMboxCreate>
     57a:	90 93 75 03 	sts	0x0375, r25
     57e:	80 93 74 03 	sts	0x0374, r24
	//SerialRxMbox = OSMboxCreate((void *)0);
	SerialTxSem = OSSemCreate(1);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <OSSemCreate>
     58a:	90 93 f7 04 	sts	0x04F7, r25
     58e:	80 93 f6 04 	sts	0x04F6, r24
	TriggerSem = OSSemCreate(1);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <OSSemCreate>
     59a:	90 93 6a 03 	sts	0x036A, r25
     59e:	80 93 69 03 	sts	0x0369, r24
	//LedMBox = OSMboxCreate((void *)0);
	TriggerMbox = OSMboxCreate((void *)0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <OSMboxCreate>
     5aa:	90 93 70 03 	sts	0x0370, r25
     5ae:	80 93 6f 03 	sts	0x036F, r24
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[START_TASK_STK_SIZE - 1], 0);
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	49 e3       	ldi	r20, 0x39	; 57
     5b6:	56 e0       	ldi	r21, 0x06	; 6
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	85 ee       	ldi	r24, 0xE5	; 229
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>

    OSStart();                                             /* Start multitasking                       */
     5c4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <OSStart>

	while (1);
     5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <main+0x66>

000005ca <TaskStart>:
/*
 *********************************************************************************************************
 *                                              STARTUP TASK
 *********************************************************************************************************
 */
void  TaskStart (void *pdata) {
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <TaskStart+0x6>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
    pdata = pdata;                                         /* Prevent compiler warning                 */

	OSStatInit(); //uncomment if set OS_TASK_STAT_EN = 1   /* Initialize uC/OS-II's statistics         */
     5d8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <OSStatInit>

	//OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TASK_STK_SIZE - 1], 6);
	OSTaskCreate(SensorTask, (void *)0, &TaskSensorStk[TASK_STK_SIZE - 1], 8);
     5dc:	28 e0       	ldi	r18, 0x08	; 8
     5de:	45 e7       	ldi	r20, 0x75	; 117
     5e0:	54 e0       	ldi	r21, 0x04	; 4
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	81 e7       	ldi	r24, 0x71	; 113
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>
	OSTaskCreate(LedTask, (void *)0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     5ee:	2a e0       	ldi	r18, 0x0A	; 10
     5f0:	49 ef       	ldi	r20, 0xF9	; 249
     5f2:	55 e0       	ldi	r21, 0x05	; 5
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	86 e1       	ldi	r24, 0x16	; 22
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>

	OSTaskCreate(SerialTransmitTask, (void *) 0, &TaskSerialTransmitStk[TASK_STK_SIZE-1], 12);
     600:	2c e0       	ldi	r18, 0x0C	; 12
     602:	45 ef       	ldi	r20, 0xF5	; 245
     604:	54 e0       	ldi	r21, 0x04	; 4
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	86 ee       	ldi	r24, 0xE6	; 230
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>
	//OSTaskCreate(SerialReceiveTask, (void *) 0, &SerialReceiveTaskStk[TASK_STK_SIZE-1], 14);

    for (;;) {
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     612:	10 92 44 06 	sts	0x0644, r1
     616:	10 92 45 06 	sts	0x0645, r1
     61a:	10 92 46 06 	sts	0x0646, r1
     61e:	10 92 47 06 	sts	0x0647, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     622:	88 ec       	ldi	r24, 0xC8	; 200
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
    }
     62a:	f3 cf       	rjmp	.-26     	; 0x612 <TaskStart+0x48>

0000062c <LedTask>:
/*
 *********************************************************************************************************
 *                                              LED TASK (blinky)
 *********************************************************************************************************
 */
void  LedTask (void *pdata) {
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	2e 97       	sbiw	r28, 0x0e	; 14
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	9e 87       	std	Y+14, r25	; 0x0e
     642:	8d 87       	std	Y+13, r24	; 0x0d
	void *msg;
	FP32 frequency = 1.0;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 e8       	ldi	r26, 0x80	; 128
     64a:	bf e3       	ldi	r27, 0x3F	; 63
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	ab 83       	std	Y+3, r26	; 0x03
     652:	bc 83       	std	Y+4, r27	; 0x04
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
     654:	84 e1       	ldi	r24, 0x14	; 20
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	9e 83       	std	Y+6, r25	; 0x06
     65a:	8d 83       	std	Y+5, r24	; 0x05
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
     65c:	28 ec       	ldi	r18, 0xC8	; 200
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	8d 81       	ldd	r24, Y+5	; 0x05
     662:	9e 81       	ldd	r25, Y+6	; 0x06
     664:	a9 01       	movw	r20, r18
     666:	48 1b       	sub	r20, r24
     668:	59 0b       	sbc	r21, r25
     66a:	ca 01       	movw	r24, r20
     66c:	98 87       	std	Y+8, r25	; 0x08
     66e:	8f 83       	std	Y+7, r24	; 0x07
	INT16U LocalMessage = NO_SYSTEM_ERROR;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9a 87       	std	Y+10, r25	; 0x0a
     676:	89 87       	std	Y+9, r24	; 0x09

	for (;;) {
		msg = OSMboxAccept(LedMBox);
     678:	80 91 6b 03 	lds	r24, 0x036B
     67c:	90 91 6c 03 	lds	r25, 0x036C
     680:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <OSMboxAccept>
     684:	9c 87       	std	Y+12, r25	; 0x0c
     686:	8b 87       	std	Y+11, r24	; 0x0b
		LocalMessage = (INT16U)msg;
     688:	8b 85       	ldd	r24, Y+11	; 0x0b
     68a:	9c 85       	ldd	r25, Y+12	; 0x0c
     68c:	9a 87       	std	Y+10, r25	; 0x0a
     68e:	89 87       	std	Y+9, r24	; 0x09
		switch (LocalMessage){
     690:	89 85       	ldd	r24, Y+9	; 0x09
     692:	9a 85       	ldd	r25, Y+10	; 0x0a
     694:	82 30       	cpi	r24, 0x02	; 2
     696:	91 05       	cpc	r25, r1
     698:	f1 f0       	breq	.+60     	; 0x6d6 <LedTask+0xaa>
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	91 05       	cpc	r25, r1
     69e:	91 f1       	breq	.+100    	; 0x704 <LedTask+0xd8>
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	91 05       	cpc	r25, r1
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <LedTask+0x7c>
				OnPeriodTimeout = OS_TICKS_PER_SEC/2;
				OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
				break;
			case NO_MSG_SENT:
			default:
				break;
     6a6:	45 c0       	rjmp	.+138    	; 0x732 <LedTask+0x106>
	for (;;) {
		msg = OSMboxAccept(LedMBox);
		LocalMessage = (INT16U)msg;
		switch (LocalMessage){
			case NO_SYSTEM_ERROR:		//f = 1.0 Hz (10% duty)
				frequency = 1.0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a0 e8       	ldi	r26, 0x80	; 128
     6ae:	bf e3       	ldi	r27, 0x3F	; 63
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	9a 83       	std	Y+2, r25	; 0x02
     6b4:	ab 83       	std	Y+3, r26	; 0x03
     6b6:	bc 83       	std	Y+4, r27	; 0x04
				OnPeriodTimeout = OS_TICKS_PER_SEC/10;
     6b8:	84 e1       	ldi	r24, 0x14	; 20
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9e 83       	std	Y+6, r25	; 0x06
     6be:	8d 83       	std	Y+5, r24	; 0x05
				OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
     6c0:	28 ec       	ldi	r18, 0xC8	; 200
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	8d 81       	ldd	r24, Y+5	; 0x05
     6c6:	9e 81       	ldd	r25, Y+6	; 0x06
     6c8:	f9 01       	movw	r30, r18
     6ca:	e8 1b       	sub	r30, r24
     6cc:	f9 0b       	sbc	r31, r25
     6ce:	cf 01       	movw	r24, r30
     6d0:	98 87       	std	Y+8, r25	; 0x08
     6d2:	8f 83       	std	Y+7, r24	; 0x07
				break;
     6d4:	2e c0       	rjmp	.+92     	; 0x732 <LedTask+0x106>
			case MEDIUM_PRIORITY_ERROR:	//f = 0.4 Hz (50% duty)
				frequency = 0.4;
     6d6:	8d ec       	ldi	r24, 0xCD	; 205
     6d8:	9c ec       	ldi	r25, 0xCC	; 204
     6da:	ac ec       	ldi	r26, 0xCC	; 204
     6dc:	be e3       	ldi	r27, 0x3E	; 62
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	ab 83       	std	Y+3, r26	; 0x03
     6e4:	bc 83       	std	Y+4, r27	; 0x04
				OnPeriodTimeout = OS_TICKS_PER_SEC/2;
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	9e 83       	std	Y+6, r25	; 0x06
     6ec:	8d 83       	std	Y+5, r24	; 0x05
				OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
     6ee:	28 ec       	ldi	r18, 0xC8	; 200
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	8d 81       	ldd	r24, Y+5	; 0x05
     6f4:	9e 81       	ldd	r25, Y+6	; 0x06
     6f6:	a9 01       	movw	r20, r18
     6f8:	48 1b       	sub	r20, r24
     6fa:	59 0b       	sbc	r21, r25
     6fc:	ca 01       	movw	r24, r20
     6fe:	98 87       	std	Y+8, r25	; 0x08
     700:	8f 83       	std	Y+7, r24	; 0x07
				break;
     702:	17 c0       	rjmp	.+46     	; 0x732 <LedTask+0x106>
			case HIGH_PRIORITY_ERROR:	//f = 2.4 Hz (50% duty)
				frequency = 2.4;
     704:	8a e9       	ldi	r24, 0x9A	; 154
     706:	99 e9       	ldi	r25, 0x99	; 153
     708:	a9 e1       	ldi	r26, 0x19	; 25
     70a:	b0 e4       	ldi	r27, 0x40	; 64
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	ab 83       	std	Y+3, r26	; 0x03
     712:	bc 83       	std	Y+4, r27	; 0x04
				OnPeriodTimeout = OS_TICKS_PER_SEC/2;
     714:	84 e6       	ldi	r24, 0x64	; 100
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	8d 83       	std	Y+5, r24	; 0x05
				OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
     71c:	28 ec       	ldi	r18, 0xC8	; 200
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	f9 01       	movw	r30, r18
     726:	e8 1b       	sub	r30, r24
     728:	f9 0b       	sbc	r31, r25
     72a:	cf 01       	movw	r24, r30
     72c:	98 87       	std	Y+8, r25	; 0x08
     72e:	8f 83       	std	Y+7, r24	; 0x07
				break;
     730:	00 00       	nop
			case NO_MSG_SENT:
			default:
				break;
		}
		PORTB |= _BV(PORTB5); //LED ON
     732:	85 e2       	ldi	r24, 0x25	; 37
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	25 e2       	ldi	r18, 0x25	; 37
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	f9 01       	movw	r30, r18
     73c:	20 81       	ld	r18, Z
     73e:	20 62       	ori	r18, 0x20	; 32
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
		OSTimeDly(OnPeriodTimeout/frequency);
     744:	8d 81       	ldd	r24, Y+5	; 0x05
     746:	9e 81       	ldd	r25, Y+6	; 0x06
     748:	cc 01       	movw	r24, r24
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatunsisf>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	29 81       	ldd	r18, Y+1	; 0x01
     75c:	3a 81       	ldd	r19, Y+2	; 0x02
     75e:	4b 81       	ldd	r20, Y+3	; 0x03
     760:	5c 81       	ldd	r21, Y+4	; 0x04
     762:	bc 01       	movw	r22, r24
     764:	cd 01       	movw	r24, r26
     766:	0e 94 3e 11 	call	0x227c	; 0x227c <__divsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	0e 94 a6 11 	call	0x234c	; 0x234c <__fixunssfsi>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); //LED OFF
     77e:	85 e2       	ldi	r24, 0x25	; 37
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	25 e2       	ldi	r18, 0x25	; 37
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	2f 7d       	andi	r18, 0xDF	; 223
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
		OSTimeDly(OffPeriodTimeout/frequency);
     790:	8f 81       	ldd	r24, Y+7	; 0x07
     792:	98 85       	ldd	r25, Y+8	; 0x08
     794:	cc 01       	movw	r24, r24
     796:	a0 e0       	ldi	r26, 0x00	; 0
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatunsisf>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	3a 81       	ldd	r19, Y+2	; 0x02
     7aa:	4b 81       	ldd	r20, Y+3	; 0x03
     7ac:	5c 81       	ldd	r21, Y+4	; 0x04
     7ae:	bc 01       	movw	r22, r24
     7b0:	cd 01       	movw	r24, r26
     7b2:	0e 94 3e 11 	call	0x227c	; 0x227c <__divsf3>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	bc 01       	movw	r22, r24
     7bc:	cd 01       	movw	r24, r26
     7be:	0e 94 a6 11 	call	0x234c	; 0x234c <__fixunssfsi>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
	}
     7ca:	56 cf       	rjmp	.-340    	; 0x678 <LedTask+0x4c>

000007cc <SerialTransmitTask>:
/*
 *********************************************************************************************************
 *                                              SerialTransmitTask
 *********************************************************************************************************
 */
void  SerialTransmitTask (void *pdata) {
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	2a 97       	sbiw	r28, 0x0a	; 10
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	9a 87       	std	Y+10, r25	; 0x0a
     7e2:	89 87       	std	Y+9, r24	; 0x09
	INT8U  err;
	void *msg;
	INT8U CharCounter=0;
     7e4:	19 82       	std	Y+1, r1	; 0x01
	INT16U StringLength;
	char *LocalMessage;

	for (;;) {
		msg = OSMboxPend(SerialTxMBox, 0, &err);
     7e6:	80 91 74 03 	lds	r24, 0x0374
     7ea:	90 91 75 03 	lds	r25, 0x0375
     7ee:	9e 01       	movw	r18, r28
     7f0:	28 5f       	subi	r18, 0xF8	; 248
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	a9 01       	movw	r20, r18
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <OSMboxPend>
     7fe:	9b 83       	std	Y+3, r25	; 0x03
     800:	8a 83       	std	Y+2, r24	; 0x02
		switch(err){
     802:	88 85       	ldd	r24, Y+8	; 0x08
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	09 f0       	breq	.+2      	; 0x80e <SerialTransmitTask+0x42>
					OSSemPend(SerialTxSem,0,&err);
				}
				UCSR0B &= ~_BV(TXCIE0);	//disable TX_Empty Interrupt
				break;
			default:
				break;
     80c:	43 c0       	rjmp	.+134    	; 0x894 <SerialTransmitTask+0xc8>

	for (;;) {
		msg = OSMboxPend(SerialTxMBox, 0, &err);
		switch(err){
			case OS_NO_ERR:
				LocalMessage = (char*)msg;
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	9b 81       	ldd	r25, Y+3	; 0x03
     812:	9d 83       	std	Y+5, r25	; 0x05
     814:	8c 83       	std	Y+4, r24	; 0x04
				StringLength = (INT16U)strlen(LocalMessage);
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	9d 81       	ldd	r25, Y+5	; 0x05
     81a:	0e 94 b0 12 	call	0x2560	; 0x2560 <strlen>
     81e:	9f 83       	std	Y+7, r25	; 0x07
     820:	8e 83       	std	Y+6, r24	; 0x06
				UCSR0B |= _BV(TXCIE0);	//enable TX_Empty Interrupt
     822:	81 ec       	ldi	r24, 0xC1	; 193
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	21 ec       	ldi	r18, 0xC1	; 193
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	f9 01       	movw	r30, r18
     82c:	20 81       	ld	r18, Z
     82e:	20 64       	ori	r18, 0x40	; 64
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
				for (CharCounter=0; CharCounter<StringLength; ++CharCounter) {
     834:	19 82       	std	Y+1, r1	; 0x01
     836:	1c c0       	rjmp	.+56     	; 0x870 <SerialTransmitTask+0xa4>
					UDR0 = LocalMessage[CharCounter];
     838:	86 ec       	ldi	r24, 0xC6	; 198
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	29 81       	ldd	r18, Y+1	; 0x01
     83e:	22 2f       	mov	r18, r18
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	4c 81       	ldd	r20, Y+4	; 0x04
     844:	5d 81       	ldd	r21, Y+5	; 0x05
     846:	24 0f       	add	r18, r20
     848:	35 1f       	adc	r19, r21
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
					OSSemPend(SerialTxSem,0,&err);
     852:	80 91 f6 04 	lds	r24, 0x04F6
     856:	90 91 f7 04 	lds	r25, 0x04F7
     85a:	9e 01       	movw	r18, r28
     85c:	28 5f       	subi	r18, 0xF8	; 248
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	a9 01       	movw	r20, r18
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <OSSemPend>
		switch(err){
			case OS_NO_ERR:
				LocalMessage = (char*)msg;
				StringLength = (INT16U)strlen(LocalMessage);
				UCSR0B |= _BV(TXCIE0);	//enable TX_Empty Interrupt
				for (CharCounter=0; CharCounter<StringLength; ++CharCounter) {
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	e0 f2       	brcs	.-72     	; 0x838 <SerialTransmitTask+0x6c>
					UDR0 = LocalMessage[CharCounter];
					OSSemPend(SerialTxSem,0,&err);
				}
				UCSR0B &= ~_BV(TXCIE0);	//disable TX_Empty Interrupt
     880:	81 ec       	ldi	r24, 0xC1	; 193
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	21 ec       	ldi	r18, 0xC1	; 193
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	2f 7b       	andi	r18, 0xBF	; 191
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
				break;
     892:	00 00       	nop
			default:
				break;
		}
	}
     894:	a8 cf       	rjmp	.-176    	; 0x7e6 <SerialTransmitTask+0x1a>

00000896 <PostTxCompleteSem>:
}

/*	Routine to Post the Transmit buffer empty semaphore	*/
void PostTxCompleteSem (void) {
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	OSSemPost(SerialTxSem);
     89e:	80 91 f6 04 	lds	r24, 0x04F6
     8a2:	90 91 f7 04 	lds	r25, 0x04F7
     8a6:	0e 94 17 10 	call	0x202e	; 0x202e <OSSemPost>
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <ReadSerialChar>:
		}
	}
}

/* Routine to Post the Receive buffer queue */
void ReadSerialChar(void){
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
	char rxChar;	// fetch received byte value into variable "rxByte"
	//		must read UDR0 to clear interrupt flag!
	rxChar = UDR0;
     8ba:	86 ec       	ldi	r24, 0xC6	; 198
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	fc 01       	movw	r30, r24
     8c0:	80 81       	ld	r24, Z
     8c2:	89 83       	std	Y+1, r24	; 0x01
	// extend this function so that it places the rxByte into a QUEUE
	OSMboxPost(SerialRxMbox, (void *)rxChar);
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	9c 01       	movw	r18, r24
     8cc:	80 91 6d 03 	lds	r24, 0x036D
     8d0:	90 91 6e 03 	lds	r25, 0x036E
     8d4:	b9 01       	movw	r22, r18
     8d6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <OSMboxPost>
}
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <SensorTask>:
/*
 *********************************************************************************************************
 *                                              ECOLOCATION
 *********************************************************************************************************
 */
void  SensorTask (void *pdata){
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	2c 97       	sbiw	r28, 0x0c	; 12
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	98 87       	std	Y+8, r25	; 0x08
     8f8:	8f 83       	std	Y+7, r24	; 0x07
	INT8U err;
	void *msg;
	char LocalMessage;
	timeoutFrequency = 100;
     8fa:	84 e6       	ldi	r24, 0x64	; 100
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	90 93 f9 04 	sts	0x04F9, r25
     902:	80 93 f8 04 	sts	0x04F8, r24
	INT16U TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
     906:	20 91 f8 04 	lds	r18, 0x04F8
     90a:	30 91 f9 04 	lds	r19, 0x04F9
     90e:	88 ec       	ldi	r24, 0xC8	; 200
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	b9 01       	movw	r22, r18
     914:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodhi4>
     918:	cb 01       	movw	r24, r22
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01
	for (;;) {
		msg = OSMboxPend(TriggerMbox, TriggerTimeOut, &err);
     91e:	80 91 6f 03 	lds	r24, 0x036F
     922:	90 91 70 03 	lds	r25, 0x0370
     926:	ae 01       	movw	r20, r28
     928:	4a 5f       	subi	r20, 0xFA	; 250
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	29 81       	ldd	r18, Y+1	; 0x01
     92e:	3a 81       	ldd	r19, Y+2	; 0x02
     930:	b9 01       	movw	r22, r18
     932:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <OSMboxPend>
     936:	9c 83       	std	Y+4, r25	; 0x04
     938:	8b 83       	std	Y+3, r24	; 0x03
		switch(err){
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
     944:	8a 30       	cpi	r24, 0x0A	; 10
     946:	91 05       	cpc	r25, r1
     948:	09 f1       	breq	.+66     	; 0x98c <__stack+0x8d>
				echoState = ECHO_OFF_STATE;

				OSSemPend(TriggerSem,TriggerTimeOut,&err);
				break;
		}
	}
     94a:	e9 cf       	rjmp	.-46     	; 0x91e <__stack+0x1f>
	INT16U TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
	for (;;) {
		msg = OSMboxPend(TriggerMbox, TriggerTimeOut, &err);
		switch(err){
			case OS_NO_ERR: // message
				LocalMessage = (char)msg;
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	8d 83       	std	Y+5, r24	; 0x05
				switch (LocalMessage){
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	88 2f       	mov	r24, r24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 37       	cpi	r24, 0x72	; 114
     95a:	91 05       	cpc	r25, r1
     95c:	31 f0       	breq	.+12     	; 0x96a <__stack+0x6b>
     95e:	88 37       	cpi	r24, 0x78	; 120
     960:	91 05       	cpc	r25, r1
     962:	81 f4       	brne	.+32     	; 0x984 <__stack+0x85>
					case 'x':
						TriggerTimeOut = 0;
     964:	1a 82       	std	Y+2, r1	; 0x02
     966:	19 82       	std	Y+1, r1	; 0x01
						break;
     968:	10 c0       	rjmp	.+32     	; 0x98a <__stack+0x8b>
					case 'r':
						TriggerTimeOut = OS_TICKS_PER_SEC/timeoutFrequency;
     96a:	20 91 f8 04 	lds	r18, 0x04F8
     96e:	30 91 f9 04 	lds	r19, 0x04F9
     972:	88 ec       	ldi	r24, 0xC8	; 200
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	b9 01       	movw	r22, r18
     978:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodhi4>
     97c:	cb 01       	movw	r24, r22
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
						break;
     982:	03 c0       	rjmp	.+6      	; 0x98a <__stack+0x8b>
					default:
						TriggerTimeOut = 0;
     984:	1a 82       	std	Y+2, r1	; 0x02
     986:	19 82       	std	Y+1, r1	; 0x01
						break;
     988:	00 00       	nop
				}
				break;
     98a:	2d c0       	rjmp	.+90     	; 0x9e6 <__stack+0xe7>
			case OS_TIMEOUT: // trigger routine
				/*	Following cycle used to determine distance
					of nearest object through echolocation		*/
				PORTB |= _BV(PORTB4);	// set trigPin HIGH
     98c:	85 e2       	ldi	r24, 0x25	; 37
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	25 e2       	ldi	r18, 0x25	; 37
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	20 61       	ori	r18, 0x10	; 16
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
				cli();	//disable interrupts
     99e:	f8 94       	cli
				EICRA = (1<<ISC01)|(1<<ISC00); // RISING EDGE on INT0 GENERATES AN INTERRUPT (see 328p Data Sheet, Table 12-2)
     9a0:	89 e6       	ldi	r24, 0x69	; 105
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	23 e0       	ldi	r18, 0x03	; 3
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
				TCNT2 = 0xE0;			/* sets counter value to 224 (11100000b)
     9aa:	82 eb       	ldi	r24, 0xB2	; 178
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	20 ee       	ldi	r18, 0xE0	; 224
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
											allows for 31 increments until overflow */
				PRR &= ~_BV(PRTIM2);	/* reset the bit to turn on Timer2 module
     9b4:	84 e6       	ldi	r24, 0x64	; 100
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	24 e6       	ldi	r18, 0x64	; 100
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	f9 01       	movw	r30, r18
     9be:	20 81       	ld	r18, Z
     9c0:	2f 7b       	andi	r18, 0xBF	; 191
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
											in the power management section */
				sei();	//enable interrupts
     9c6:	78 94       	sei
				echoState = ECHO_OFF_STATE;
     9c8:	10 92 71 03 	sts	0x0371, r1

				OSSemPend(TriggerSem,TriggerTimeOut,&err);
     9cc:	80 91 69 03 	lds	r24, 0x0369
     9d0:	90 91 6a 03 	lds	r25, 0x036A
     9d4:	ae 01       	movw	r20, r28
     9d6:	4a 5f       	subi	r20, 0xFA	; 250
     9d8:	5f 4f       	sbci	r21, 0xFF	; 255
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	3a 81       	ldd	r19, Y+2	; 0x02
     9de:	b9 01       	movw	r22, r18
     9e0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <OSSemPend>
				break;
     9e4:	00 00       	nop
		}
	}
     9e6:	9b cf       	rjmp	.-202    	; 0x91e <__stack+0x1f>

000009e8 <PostTriggerComplete>:
}

/* Interrupt driven by Timer2 overflow */
void PostTriggerComplete(void) {
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~_BV(PORTB4);	// turn trigger pin off
     9f0:	85 e2       	ldi	r24, 0x25	; 37
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	25 e2       	ldi	r18, 0x25	; 37
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	2f 7e       	andi	r18, 0xEF	; 239
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
	PRR |= _BV(PRTIM2);		/* set the bit to turn off the Timer2 module
     a02:	84 e6       	ldi	r24, 0x64	; 100
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	24 e6       	ldi	r18, 0x64	; 100
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	20 64       	ori	r18, 0x40	; 64
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
								in the power management section */
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <EchoHelper>:

void EchoHelper(void){
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	a4 97       	sbiw	r28, 0x24	; 36
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
	char DistMessage[TX_BUFFER_SIZE];

	switch(echoState){
     a2e:	80 91 71 03 	lds	r24, 0x0371
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	21 f0       	breq	.+8      	; 0xa42 <EchoHelper+0x28>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	91 05       	cpc	r25, r1
     a3e:	79 f0       	breq	.+30     	; 0xa5e <EchoHelper+0x44>
     a40:	5d c0       	rjmp	.+186    	; 0xafc <EchoHelper+0xe2>
		case ECHO_OFF_STATE:
			TCNT1 = 0x0000;				// reset timer/counter1
     a42:	84 e8       	ldi	r24, 0x84	; 132
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	fc 01       	movw	r30, r24
     a48:	11 82       	std	Z+1, r1	; 0x01
     a4a:	10 82       	st	Z, r1
			EICRA = (1<<ISC01);			// INT0 FALLING EDGE => INTERRUPT (see 328p Data Sheet, Table 12-2)
     a4c:	89 e6       	ldi	r24, 0x69	; 105
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	22 e0       	ldi	r18, 0x02	; 2
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18

			echoState = ECHO_ON_STATE;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 71 03 	sts	0x0371, r24
			break;
     a5c:	52 c0       	rjmp	.+164    	; 0xb02 <EchoHelper+0xe8>
		case ECHO_ON_STATE:
			cnt = TCNT1;				// read timer/counter1
     a5e:	84 e8       	ldi	r24, 0x84	; 132
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	90 93 73 03 	sts	0x0373, r25
     a6c:	80 93 72 03 	sts	0x0372, r24
			cnt /= SOUND_CONVERSION_FACTOR;
     a70:	80 91 72 03 	lds	r24, 0x0372
     a74:	90 91 73 03 	lds	r25, 0x0373
     a78:	9c 01       	movw	r18, r24
     a7a:	a9 e0       	ldi	r26, 0x09	; 9
     a7c:	bc e8       	ldi	r27, 0x8C	; 140
     a7e:	0e 94 96 12 	call	0x252c	; 0x252c <__umulhisi3>
     a82:	00 24       	eor	r0, r0
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	00 1c       	adc	r0, r0
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	00 1c       	adc	r0, r0
     a90:	89 2f       	mov	r24, r25
     a92:	90 2d       	mov	r25, r0
     a94:	90 93 73 03 	sts	0x0373, r25
     a98:	80 93 72 03 	sts	0x0372, r24
			sprintf(DistMessage, "%u\n\r", cnt);
     a9c:	80 91 72 03 	lds	r24, 0x0372
     aa0:	90 91 73 03 	lds	r25, 0x0373
     aa4:	29 2f       	mov	r18, r25
     aa6:	2f 93       	push	r18
     aa8:	8f 93       	push	r24
     aaa:	87 e2       	ldi	r24, 0x27	; 39
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	89 2f       	mov	r24, r25
     ab0:	8f 93       	push	r24
     ab2:	87 e2       	ldi	r24, 0x27	; 39
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	8f 93       	push	r24
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	89 2f       	mov	r24, r25
     abe:	8f 93       	push	r24
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	8f 93       	push	r24
     ac6:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
			OSMboxPost(SerialTxMBox, (void *)DistMessage);
     ad6:	80 91 74 03 	lds	r24, 0x0374
     ada:	90 91 75 03 	lds	r25, 0x0375
     ade:	9e 01       	movw	r18, r28
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <OSMboxPost>

			echoState = ECHO_OFF_STATE;
     aea:	10 92 71 03 	sts	0x0371, r1
			OSSemPost(TriggerSem);
     aee:	80 91 69 03 	lds	r24, 0x0369
     af2:	90 91 6a 03 	lds	r25, 0x036A
     af6:	0e 94 17 10 	call	0x202e	; 0x202e <OSSemPost>
			break;
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <EchoHelper+0xe8>
		default:
			echoState = ECHO_OFF_STATE;
     afc:	10 92 71 03 	sts	0x0371, r1
			break;
     b00:	00 00       	nop
	}
     b02:	a4 96       	adiw	r28, 0x24	; 36
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <InitPeripherals>:


void InitPeripherals(void);

void InitPeripherals(void)
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	cli();			// disable global interrupts
     b1c:	f8 94       	cli

	// manage WDT
	WatchDogReset();
     b1e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	//MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
	//WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
	//WDTCSR=0x00;					// turn wdt off
	wdt_disable();
     b22:	88 e1       	ldi	r24, 0x18	; 24
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	80 93 60 00 	sts	0x0060, r24
     b2c:	10 92 60 00 	sts	0x0060, r1
     b30:	0f be       	out	0x3f, r0	; 63

#if 1
	// PortB
	//
	PORTB &= ~_BV(PORTB5);	// set pin 5 (Arduino DIO pin 13) low to turn led off
     b32:	85 e2       	ldi	r24, 0x25	; 37
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	25 e2       	ldi	r18, 0x25	; 37
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	f9 01       	movw	r30, r18
     b3c:	20 81       	ld	r18, Z
     b3e:	2f 7d       	andi	r18, 0xDF	; 223
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
	PORTB &= ~_BV(PORTB4);	// set pin 4 (trigPin) low
     b44:	85 e2       	ldi	r24, 0x25	; 37
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	25 e2       	ldi	r18, 0x25	; 37
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	f9 01       	movw	r30, r18
     b4e:	20 81       	ld	r18, Z
     b50:	2f 7e       	andi	r18, 0xEF	; 239
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
	PORTB &= ~_BV(PORTB0);	// set pin 0 low
     b56:	85 e2       	ldi	r24, 0x25	; 37
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	25 e2       	ldi	r18, 0x25	; 37
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	2e 7f       	andi	r18, 0xFE	; 254
     b64:	fc 01       	movw	r30, r24
     b66:	20 83       	st	Z, r18
	DDRB |= _BV(DDB5);		// set pin 5 of PORTB for output
     b68:	84 e2       	ldi	r24, 0x24	; 36
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	24 e2       	ldi	r18, 0x24	; 36
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	20 62       	ori	r18, 0x20	; 32
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
	DDRB |= _BV(DDB4);		// set pin 4 of PORTB for output
     b7a:	84 e2       	ldi	r24, 0x24	; 36
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	24 e2       	ldi	r18, 0x24	; 36
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	20 61       	ori	r18, 0x10	; 16
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0);		// set pin 0 of PORTB for output
     b8c:	84 e2       	ldi	r24, 0x24	; 36
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	24 e2       	ldi	r18, 0x24	; 36
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	21 60       	ori	r18, 0x01	; 1
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
#endif

#if 1
	// PortD
	//		EXTERNAL INTERRUPT PIN (ARDUINO DIO pin 2)
	PORTD &= ~_BV(PORTD2);	// set pin 2 (Arduino DIO pin 2) low
     b9e:	8b e2       	ldi	r24, 0x2B	; 43
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	2b e2       	ldi	r18, 0x2B	; 43
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	2b 7f       	andi	r18, 0xFB	; 251
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
	DDRD &= ~_BV(DDD2);		// set pin 2 (echoPin) for input
     bb0:	8a e2       	ldi	r24, 0x2A	; 42
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2a e2       	ldi	r18, 0x2A	; 42
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	2b 7f       	andi	r18, 0xFB	; 251
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18

	// External Interrupt Control Register A
	EICRA = (1<<ISC01) | (1<<ISC00);	// RISING EDGE on INT0 GENERATES AN INTERRUPT
     bc2:	89 e6       	ldi	r24, 0x69	; 105
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	23 e0       	ldi	r18, 0x03	; 3
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
	EIFR  = (1<<INTF0);				// clear the INT0 interrupt flag
     bcc:	8c e3       	ldi	r24, 0x3C	; 60
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);					// enable INT0 interrupt
     bd6:	8d e3       	ldi	r24, 0x3D	; 61
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
#endif

#if 1
	// Timer0 : UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     be0:	84 e4       	ldi	r24, 0x44	; 68
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	23 e0       	ldi	r18, 0x03	; 3
     be6:	fc 01       	movw	r30, r24
     be8:	20 83       	st	Z, r18
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     bea:	85 e4       	ldi	r24, 0x45	; 69
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	2d e0       	ldi	r18, 0x0D	; 13
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     bf4:	87 e4       	ldi	r24, 0x47	; 71
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	2d e4       	ldi	r18, 0x4D	; 77
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     bfe:	8e e6       	ldi	r24, 0x6E	; 110
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2e e6       	ldi	r18, 0x6E	; 110
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	21 60       	ori	r18, 0x01	; 1
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     c10:	84 e6       	ldi	r24, 0x64	; 100
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	24 e6       	ldi	r18, 0x64	; 100
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	f9 01       	movw	r30, r18
     c1a:	20 81       	ld	r18, Z
     c1c:	2f 7d       	andi	r18, 0xDF	; 223
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
#endif

#if 1
	// Timer1 : duration counter
	//
	TCCR1A = 0x00;				/* set timer1: OC1A/OC1B disconnected; normal mode           */
     c22:	80 e8       	ldi	r24, 0x80	; 128
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	fc 01       	movw	r30, r24
     c28:	10 82       	st	Z, r1
	TCCR1B = _BV(CS11);			/* timer1 clock = system clock/128      */
     c2a:	81 e8       	ldi	r24, 0x81	; 129
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	22 e0       	ldi	r18, 0x02	; 2
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
	TCCR1C = 0x00;				/* NO force Compare */
     c34:	82 e8       	ldi	r24, 0x82	; 130
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	fc 01       	movw	r30, r24
     c3a:	10 82       	st	Z, r1
	TIFR1 |= _BV(ICF1) | _BV(OCF1B) | _BV(OCF1A) | _BV(TOV1);	/* clear all flags */
     c3c:	86 e3       	ldi	r24, 0x36	; 54
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	26 e3       	ldi	r18, 0x36	; 54
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	27 62       	ori	r18, 0x27	; 39
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
	PRR &= ~_BV(PRTIM1);			/* reset the bit to turn ON Timer1 module in the power management section */
     c4e:	84 e6       	ldi	r24, 0x64	; 100
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	24 e6       	ldi	r18, 0x64	; 100
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	f9 01       	movw	r30, r18
     c58:	20 81       	ld	r18, Z
     c5a:	27 7f       	andi	r18, 0xF7	; 247
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
#endif

#if 1
	// Timer2 : 10us timer
	//
	TCCR2A = 0x00;							// set timer2: OC2A/OC2B disconnected; normal mode
     c60:	80 eb       	ldi	r24, 0xB0	; 176
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	fc 01       	movw	r30, r24
     c66:	10 82       	st	Z, r1
	//TCCR2B = _BV(CS22)|_BV(CS21)|_BV(CS20);	// timer2 clock = system clock/1024
	TCCR2B = _BV(CS21);						// timer2 clock = system clock/8
     c68:	81 eb       	ldi	r24, 0xB1	; 177
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	22 e0       	ldi	r18, 0x02	; 2
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
	TIFR2 |= _BV(TOV2);						// clear overflow bit
     c72:	87 e3       	ldi	r24, 0x37	; 55
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	27 e3       	ldi	r18, 0x37	; 55
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	21 60       	ori	r18, 0x01	; 1
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
	TIMSK2 |= _BV(TOIE2);					// enable timer2 overflow interrupt
     c84:	80 e7       	ldi	r24, 0x70	; 112
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	20 e7       	ldi	r18, 0x70	; 112
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	f9 01       	movw	r30, r18
     c8e:	20 81       	ld	r18, Z
     c90:	21 60       	ori	r18, 0x01	; 1
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
	PRR |= _BV(PRTIM2);						// set the bit to turn off the Timer2 module in the power management section
     c96:	84 e6       	ldi	r24, 0x64	; 100
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	20 64       	ori	r18, 0x40	; 64
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
#endif

#if 1
	// USART0 (based on AVR ATMega 328p Data Sheet, pg. 183)
	//
	UBRR0H = (unsigned char)(UBRR>>8);	// set baud rate = 38400
     ca8:	85 ec       	ldi	r24, 0xC5	; 197
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)UBRR;		//
     cb0:	84 ec       	ldi	r24, 0xC4	; 196
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	29 e1       	ldi	r18, 0x19	; 25
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
	//UCSR0A = (1<<U2X0); // doubles the effective baud rate (because OS_TICKS_PER_SECOND got halved)
	/* enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		//
     cba:	81 ec       	ldi	r24, 0xC1	; 193
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	28 e1       	ldi	r18, 0x18	; 24
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
	/* set frame format: 8data, 1 stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01)|(0<USBS0);
     cc4:	82 ec       	ldi	r24, 0xC2	; 194
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	27 e0       	ldi	r18, 0x07	; 7
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
#endif

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     cce:	78 94       	sei
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <OSTaskStkInit>:
 **********************************************************************************************************
 */

//OS_STK *OSTaskStkInit (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
void *OSTaskStkInit (void (*task)(void *pd), void *pdata, void *ptos, INT16U opt)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2c 97       	sbiw	r28, 0x0c	; 12
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	9e 83       	std	Y+6, r25	; 0x06
     cec:	8d 83       	std	Y+5, r24	; 0x05
     cee:	78 87       	std	Y+8, r23	; 0x08
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	5a 87       	std	Y+10, r21	; 0x0a
     cf4:	49 87       	std	Y+9, r20	; 0x09
     cf6:	3c 87       	std	Y+12, r19	; 0x0c
     cf8:	2b 87       	std	Y+11, r18	; 0x0b
    INT8U  *stk;
    INT16U  tmp;

    opt     = opt;                          /* 'opt' is not used, prevent warning                       */
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
     cfa:	89 85       	ldd	r24, Y+9	; 0x09
     cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfe:	9a 83       	std	Y+2, r25	; 0x02
     d00:	89 83       	std	Y+1, r24	; 0x01
    tmp     = (INT16U)task;
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	9c 01       	movw	r18, r24
     d10:	21 50       	subi	r18, 0x01	; 1
     d12:	31 09       	sbc	r19, r1
     d14:	3a 83       	std	Y+2, r19	; 0x02
     d16:	29 83       	std	Y+1, r18	; 0x01
     d18:	2b 81       	ldd	r18, Y+3	; 0x03
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	9c 01       	movw	r18, r24
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	31 09       	sbc	r19, r1
     d28:	3a 83       	std	Y+2, r19	; 0x02
     d2a:	29 83       	std	Y+1, r18	; 0x01
     d2c:	2b 81       	ldd	r18, Y+3	; 0x03
     d2e:	3c 81       	ldd	r19, Y+4	; 0x04
     d30:	23 2f       	mov	r18, r19
     d32:	33 27       	eor	r19, r19
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	9c 01       	movw	r18, r24
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	31 09       	sbc	r19, r1
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	29 83       	std	Y+1, r18	; 0x01
     d46:	fc 01       	movw	r30, r24
     d48:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	9c 01       	movw	r18, r24
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	31 09       	sbc	r19, r1
     d54:	3a 83       	std	Y+2, r19	; 0x02
     d56:	29 83       	std	Y+1, r18	; 0x01
     d58:	fc 01       	movw	r30, r24
     d5a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	9c 01       	movw	r18, r24
     d62:	21 50       	subi	r18, 0x01	; 1
     d64:	31 09       	sbc	r19, r1
     d66:	3a 83       	std	Y+2, r19	; 0x02
     d68:	29 83       	std	Y+1, r18	; 0x01
     d6a:	fc 01       	movw	r30, r24
     d6c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	9c 01       	movw	r18, r24
     d74:	21 50       	subi	r18, 0x01	; 1
     d76:	31 09       	sbc	r19, r1
     d78:	3a 83       	std	Y+2, r19	; 0x02
     d7a:	29 83       	std	Y+1, r18	; 0x01
     d7c:	fc 01       	movw	r30, r24
     d7e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	9c 01       	movw	r18, r24
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	31 09       	sbc	r19, r1
     d8a:	3a 83       	std	Y+2, r19	; 0x02
     d8c:	29 83       	std	Y+1, r18	; 0x01
     d8e:	fc 01       	movw	r30, r24
     d90:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	9c 01       	movw	r18, r24
     d98:	21 50       	subi	r18, 0x01	; 1
     d9a:	31 09       	sbc	r19, r1
     d9c:	3a 83       	std	Y+2, r19	; 0x02
     d9e:	29 83       	std	Y+1, r18	; 0x01
     da0:	fc 01       	movw	r30, r24
     da2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	9c 01       	movw	r18, r24
     daa:	21 50       	subi	r18, 0x01	; 1
     dac:	31 09       	sbc	r19, r1
     dae:	3a 83       	std	Y+2, r19	; 0x02
     db0:	29 83       	std	Y+1, r18	; 0x01
     db2:	fc 01       	movw	r30, r24
     db4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	9c 01       	movw	r18, r24
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	31 09       	sbc	r19, r1
     dc0:	3a 83       	std	Y+2, r19	; 0x02
     dc2:	29 83       	std	Y+1, r18	; 0x01
     dc4:	fc 01       	movw	r30, r24
     dc6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	9c 01       	movw	r18, r24
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	31 09       	sbc	r19, r1
     dd2:	3a 83       	std	Y+2, r19	; 0x02
     dd4:	29 83       	std	Y+1, r18	; 0x01
     dd6:	fc 01       	movw	r30, r24
     dd8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	9c 01       	movw	r18, r24
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	31 09       	sbc	r19, r1
     de4:	3a 83       	std	Y+2, r19	; 0x02
     de6:	29 83       	std	Y+1, r18	; 0x01
     de8:	fc 01       	movw	r30, r24
     dea:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	9c 01       	movw	r18, r24
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	31 09       	sbc	r19, r1
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	29 83       	std	Y+1, r18	; 0x01
     dfa:	fc 01       	movw	r30, r24
     dfc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	9c 01       	movw	r18, r24
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	31 09       	sbc	r19, r1
     e08:	3a 83       	std	Y+2, r19	; 0x02
     e0a:	29 83       	std	Y+1, r18	; 0x01
     e0c:	fc 01       	movw	r30, r24
     e0e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	9c 01       	movw	r18, r24
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	31 09       	sbc	r19, r1
     e1a:	3a 83       	std	Y+2, r19	; 0x02
     e1c:	29 83       	std	Y+1, r18	; 0x01
     e1e:	fc 01       	movw	r30, r24
     e20:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	9c 01       	movw	r18, r24
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	31 09       	sbc	r19, r1
     e2c:	3a 83       	std	Y+2, r19	; 0x02
     e2e:	29 83       	std	Y+1, r18	; 0x01
     e30:	fc 01       	movw	r30, r24
     e32:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	9c 01       	movw	r18, r24
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	31 09       	sbc	r19, r1
     e3e:	3a 83       	std	Y+2, r19	; 0x02
     e40:	29 83       	std	Y+1, r18	; 0x01
     e42:	fc 01       	movw	r30, r24
     e44:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	9c 01       	movw	r18, r24
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	3a 83       	std	Y+2, r19	; 0x02
     e52:	29 83       	std	Y+1, r18	; 0x01
     e54:	fc 01       	movw	r30, r24
     e56:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	9c 01       	movw	r18, r24
     e5e:	21 50       	subi	r18, 0x01	; 1
     e60:	31 09       	sbc	r19, r1
     e62:	3a 83       	std	Y+2, r19	; 0x02
     e64:	29 83       	std	Y+1, r18	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	9c 01       	movw	r18, r24
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	31 09       	sbc	r19, r1
     e74:	3a 83       	std	Y+2, r19	; 0x02
     e76:	29 83       	std	Y+1, r18	; 0x01
     e78:	fc 01       	movw	r30, r24
     e7a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	9c 01       	movw	r18, r24
     e82:	21 50       	subi	r18, 0x01	; 1
     e84:	31 09       	sbc	r19, r1
     e86:	3a 83       	std	Y+2, r19	; 0x02
     e88:	29 83       	std	Y+1, r18	; 0x01
     e8a:	fc 01       	movw	r30, r24
     e8c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	9c 01       	movw	r18, r24
     e94:	21 50       	subi	r18, 0x01	; 1
     e96:	31 09       	sbc	r19, r1
     e98:	3a 83       	std	Y+2, r19	; 0x02
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	fc 01       	movw	r30, r24
     e9e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	9c 01       	movw	r18, r24
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	31 09       	sbc	r19, r1
     eaa:	3a 83       	std	Y+2, r19	; 0x02
     eac:	29 83       	std	Y+1, r18	; 0x01
     eae:	fc 01       	movw	r30, r24
     eb0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	9c 01       	movw	r18, r24
     eb8:	21 50       	subi	r18, 0x01	; 1
     eba:	31 09       	sbc	r19, r1
     ebc:	3a 83       	std	Y+2, r19	; 0x02
     ebe:	29 83       	std	Y+1, r18	; 0x01
     ec0:	fc 01       	movw	r30, r24
     ec2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	9c 01       	movw	r18, r24
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	3a 83       	std	Y+2, r19	; 0x02
     ed0:	29 83       	std	Y+1, r18	; 0x01
     ed2:	fc 01       	movw	r30, r24
     ed4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	9c 01       	movw	r18, r24
     edc:	21 50       	subi	r18, 0x01	; 1
     ede:	31 09       	sbc	r19, r1
     ee0:	3a 83       	std	Y+2, r19	; 0x02
     ee2:	29 83       	std	Y+1, r18	; 0x01
     ee4:	fc 01       	movw	r30, r24
     ee6:	10 82       	st	Z, r1

    tmp    = (INT16U)pdata;
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	8b 83       	std	Y+3, r24	; 0x03
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	9c 01       	movw	r18, r24
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	31 09       	sbc	r19, r1
     efa:	3a 83       	std	Y+2, r19	; 0x02
     efc:	29 83       	std	Y+1, r18	; 0x01
     efe:	2b 81       	ldd	r18, Y+3	; 0x03
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	9c 01       	movw	r18, r24
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	31 09       	sbc	r19, r1
     f0e:	3a 83       	std	Y+2, r19	; 0x02
     f10:	29 83       	std	Y+1, r18	; 0x01
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	23 2f       	mov	r18, r19
     f18:	33 27       	eor	r19, r19
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	9c 01       	movw	r18, r24
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	31 09       	sbc	r19, r1
     f28:	3a 83       	std	Y+2, r19	; 0x02
     f2a:	29 83       	std	Y+1, r18	; 0x01
     f2c:	fc 01       	movw	r30, r24
     f2e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	9c 01       	movw	r18, r24
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	31 09       	sbc	r19, r1
     f3a:	3a 83       	std	Y+2, r19	; 0x02
     f3c:	29 83       	std	Y+1, r18	; 0x01
     f3e:	fc 01       	movw	r30, r24
     f40:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	9c 01       	movw	r18, r24
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	31 09       	sbc	r19, r1
     f4c:	3a 83       	std	Y+2, r19	; 0x02
     f4e:	29 83       	std	Y+1, r18	; 0x01
     f50:	fc 01       	movw	r30, r24
     f52:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	9c 01       	movw	r18, r24
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	31 09       	sbc	r19, r1
     f5e:	3a 83       	std	Y+2, r19	; 0x02
     f60:	29 83       	std	Y+1, r18	; 0x01
     f62:	fc 01       	movw	r30, r24
     f64:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	9c 01       	movw	r18, r24
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	31 09       	sbc	r19, r1
     f70:	3a 83       	std	Y+2, r19	; 0x02
     f72:	29 83       	std	Y+1, r18	; 0x01
     f74:	fc 01       	movw	r30, r24
     f76:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	9c 01       	movw	r18, r24
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	31 09       	sbc	r19, r1
     f82:	3a 83       	std	Y+2, r19	; 0x02
     f84:	29 83       	std	Y+1, r18	; 0x01
     f86:	fc 01       	movw	r30, r24
     f88:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	9c 01       	movw	r18, r24
     f90:	21 50       	subi	r18, 0x01	; 1
     f92:	31 09       	sbc	r19, r1
     f94:	3a 83       	std	Y+2, r19	; 0x02
     f96:	29 83       	std	Y+1, r18	; 0x01
     f98:	20 e8       	ldi	r18, 0x80	; 128
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
    return ((OS_STK *)stk);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fa2:	2c 96       	adiw	r28, 0x0c	; 12
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	00 d0       	rcall	.+0      	; 0xfba <OSTaskCreateHook+0x6>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0)
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	2c 97       	sbiw	r28, 0x0c	; 12
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	99 87       	std	Y+9, r25	; 0x09
     ffe:	88 87       	std	Y+8, r24	; 0x08
    1000:	7b 87       	std	Y+11, r23	; 0x0b
    1002:	6a 87       	std	Y+10, r22	; 0x0a
    1004:	4c 87       	std	Y+12, r20	; 0x0c
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
    1006:	88 85       	ldd	r24, Y+8	; 0x08
    1008:	99 85       	ldd	r25, Y+9	; 0x09
    100a:	fc 01       	movw	r30, r24
    100c:	85 85       	ldd	r24, Z+13	; 0x0d
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	8c 5c       	subi	r24, 0xCC	; 204
    1014:	9e 4f       	sbci	r25, 0xFE	; 254
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	89 83       	std	Y+1, r24	; 0x01
    bity = OSMapTbl[y];
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	84 5d       	subi	r24, 0xD4	; 212
    1024:	9e 4f       	sbci	r25, 0xFE	; 254
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	8a 83       	std	Y+2, r24	; 0x02
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	28 85       	ldd	r18, Y+8	; 0x08
    1034:	39 85       	ldd	r19, Y+9	; 0x09
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	02 96       	adiw	r24, 0x02	; 2
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	8c 5c       	subi	r24, 0xCC	; 204
    1046:	9e 4f       	sbci	r25, 0xFE	; 254
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	8b 83       	std	Y+3, r24	; 0x03
    bitx = OSMapTbl[x];
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	84 5d       	subi	r24, 0xD4	; 212
    1056:	9e 4f       	sbci	r25, 0xFE	; 254
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	8c 83       	std	Y+4, r24	; 0x04
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	98 2f       	mov	r25, r24
    1062:	99 0f       	add	r25, r25
    1064:	99 0f       	add	r25, r25
    1066:	99 0f       	add	r25, r25
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	89 0f       	add	r24, r25
    106c:	8d 83       	std	Y+5, r24	; 0x05
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	29 81       	ldd	r18, Y+1	; 0x01
    1076:	22 2f       	mov	r18, r18
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	48 85       	ldd	r20, Y+8	; 0x08
    107c:	59 85       	ldd	r21, Y+9	; 0x09
    107e:	24 0f       	add	r18, r20
    1080:	35 1f       	adc	r19, r21
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	32 2f       	mov	r19, r18
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	20 95       	com	r18
    1090:	23 23       	and	r18, r19
    1092:	42 2f       	mov	r20, r18
    1094:	28 85       	ldd	r18, Y+8	; 0x08
    1096:	39 85       	ldd	r19, Y+9	; 0x09
    1098:	28 0f       	add	r18, r24
    109a:	39 1f       	adc	r19, r25
    109c:	2e 5f       	subi	r18, 0xFE	; 254
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	f9 01       	movw	r30, r18
    10a2:	40 83       	st	Z, r20
    10a4:	28 85       	ldd	r18, Y+8	; 0x08
    10a6:	39 85       	ldd	r19, Y+9	; 0x09
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	02 96       	adiw	r24, 0x02	; 2
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	69 f4       	brne	.+26     	; 0x10d0 <OSEventTaskRdy+0xe8>
        pevent->OSEventGrp &= ~bity;
    10b6:	88 85       	ldd	r24, Y+8	; 0x08
    10b8:	99 85       	ldd	r25, Y+9	; 0x09
    10ba:	fc 01       	movw	r30, r24
    10bc:	85 85       	ldd	r24, Z+13	; 0x0d
    10be:	98 2f       	mov	r25, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 95       	com	r24
    10c4:	89 23       	and	r24, r25
    10c6:	28 2f       	mov	r18, r24
    10c8:	88 85       	ldd	r24, Y+8	; 0x08
    10ca:	99 85       	ldd	r25, Y+9	; 0x09
    10cc:	fc 01       	movw	r30, r24
    10ce:	25 87       	std	Z+13, r18	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	87 54       	subi	r24, 0x47	; 71
    10dc:	99 4f       	sbci	r25, 0xF9	; 249
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	9f 83       	std	Y+7, r25	; 0x07
    10e6:	8e 83       	std	Y+6, r24	; 0x06
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f 81       	ldd	r25, Y+7	; 0x07
    10ec:	fc 01       	movw	r30, r24
    10ee:	13 86       	std	Z+11, r1	; 0x0b
    10f0:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	fc 01       	movw	r30, r24
    10f8:	17 82       	std	Z+7, r1	; 0x07
    10fa:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	2a 85       	ldd	r18, Y+10	; 0x0a
    1102:	3b 85       	ldd	r19, Y+11	; 0x0b
    1104:	fc 01       	movw	r30, r24
    1106:	31 87       	std	Z+9, r19	; 0x09
    1108:	20 87       	std	Z+8, r18	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */
#endif
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	9f 81       	ldd	r25, Y+7	; 0x07
    110e:	fc 01       	movw	r30, r24
    1110:	84 85       	ldd	r24, Z+12	; 0x0c
    1112:	98 2f       	mov	r25, r24
    1114:	8c 85       	ldd	r24, Y+12	; 0x0c
    1116:	80 95       	com	r24
    1118:	89 23       	and	r24, r25
    111a:	28 2f       	mov	r18, r24
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	fc 01       	movw	r30, r24
    1122:	24 87       	std	Z+12, r18	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	fc 01       	movw	r30, r24
    112a:	84 85       	ldd	r24, Z+12	; 0x0c
    112c:	88 23       	and	r24, r24
    112e:	b1 f4       	brne	.+44     	; 0x115c <OSEventTaskRdy+0x174>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
    1130:	90 91 52 06 	lds	r25, 0x0652
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	89 2b       	or	r24, r25
    1138:	80 93 52 06 	sts	0x0652, r24
        OSRdyTbl[y]     |=  bitx;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	29 81       	ldd	r18, Y+1	; 0x01
    1144:	22 2f       	mov	r18, r18
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	2d 5a       	subi	r18, 0xAD	; 173
    114a:	39 4f       	sbci	r19, 0xF9	; 249
    114c:	f9 01       	movw	r30, r18
    114e:	30 81       	ld	r19, Z
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	23 2b       	or	r18, r19
    1154:	8d 5a       	subi	r24, 0xAD	; 173
    1156:	99 4f       	sbci	r25, 0xF9	; 249
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
    }
}
    115c:	2c 96       	adiw	r28, 0x0c	; 12
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <OSEventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskWait (OS_EVENT *pevent)
{
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 d0       	rcall	.+0      	; 0x1174 <OSEventTaskWait+0x6>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    117c:	80 91 5e 06 	lds	r24, 0x065E
    1180:	90 91 5f 06 	lds	r25, 0x065F
    1184:	29 81       	ldd	r18, Y+1	; 0x01
    1186:	3a 81       	ldd	r19, Y+2	; 0x02
    1188:	fc 01       	movw	r30, r24
    118a:	37 83       	std	Z+7, r19	; 0x07
    118c:	26 83       	std	Z+6, r18	; 0x06
    if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {      /* Task no longer ready      */
    118e:	80 91 5e 06 	lds	r24, 0x065E
    1192:	90 91 5f 06 	lds	r25, 0x065F
    1196:	fc 01       	movw	r30, r24
    1198:	87 85       	ldd	r24, Z+15	; 0x0f
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	20 91 5e 06 	lds	r18, 0x065E
    11a2:	30 91 5f 06 	lds	r19, 0x065F
    11a6:	f9 01       	movw	r30, r18
    11a8:	27 85       	ldd	r18, Z+15	; 0x0f
    11aa:	22 2f       	mov	r18, r18
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	2d 5a       	subi	r18, 0xAD	; 173
    11b0:	39 4f       	sbci	r19, 0xF9	; 249
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	42 2f       	mov	r20, r18
    11b8:	20 91 5e 06 	lds	r18, 0x065E
    11bc:	30 91 5f 06 	lds	r19, 0x065F
    11c0:	f9 01       	movw	r30, r18
    11c2:	20 89       	ldd	r18, Z+16	; 0x10
    11c4:	20 95       	com	r18
    11c6:	24 23       	and	r18, r20
    11c8:	42 2f       	mov	r20, r18
    11ca:	9c 01       	movw	r18, r24
    11cc:	2d 5a       	subi	r18, 0xAD	; 173
    11ce:	39 4f       	sbci	r19, 0xF9	; 249
    11d0:	f9 01       	movw	r30, r18
    11d2:	40 83       	st	Z, r20
    11d4:	8d 5a       	subi	r24, 0xAD	; 173
    11d6:	99 4f       	sbci	r25, 0xF9	; 249
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	88 23       	and	r24, r24
    11de:	69 f4       	brne	.+26     	; 0x11fa <OSEventTaskWait+0x8c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    11e0:	80 91 5e 06 	lds	r24, 0x065E
    11e4:	90 91 5f 06 	lds	r25, 0x065F
    11e8:	fc 01       	movw	r30, r24
    11ea:	81 89       	ldd	r24, Z+17	; 0x11
    11ec:	98 2f       	mov	r25, r24
    11ee:	90 95       	com	r25
    11f0:	80 91 52 06 	lds	r24, 0x0652
    11f4:	89 23       	and	r24, r25
    11f6:	80 93 52 06 	sts	0x0652, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    11fa:	80 91 5e 06 	lds	r24, 0x065E
    11fe:	90 91 5f 06 	lds	r25, 0x065F
    1202:	fc 01       	movw	r30, r24
    1204:	87 85       	ldd	r24, Z+15	; 0x0f
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	20 91 5e 06 	lds	r18, 0x065E
    120e:	30 91 5f 06 	lds	r19, 0x065F
    1212:	f9 01       	movw	r30, r18
    1214:	27 85       	ldd	r18, Z+15	; 0x0f
    1216:	22 2f       	mov	r18, r18
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	49 81       	ldd	r20, Y+1	; 0x01
    121c:	5a 81       	ldd	r21, Y+2	; 0x02
    121e:	24 0f       	add	r18, r20
    1220:	35 1f       	adc	r19, r21
    1222:	2e 5f       	subi	r18, 0xFE	; 254
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	f9 01       	movw	r30, r18
    1228:	40 81       	ld	r20, Z
    122a:	20 91 5e 06 	lds	r18, 0x065E
    122e:	30 91 5f 06 	lds	r19, 0x065F
    1232:	f9 01       	movw	r30, r18
    1234:	20 89       	ldd	r18, Z+16	; 0x10
    1236:	42 2b       	or	r20, r18
    1238:	29 81       	ldd	r18, Y+1	; 0x01
    123a:	3a 81       	ldd	r19, Y+2	; 0x02
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	02 96       	adiw	r24, 0x02	; 2
    1242:	fc 01       	movw	r30, r24
    1244:	40 83       	st	Z, r20
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	25 85       	ldd	r18, Z+13	; 0x0d
    124e:	80 91 5e 06 	lds	r24, 0x065E
    1252:	90 91 5f 06 	lds	r25, 0x065F
    1256:	fc 01       	movw	r30, r24
    1258:	81 89       	ldd	r24, Z+17	; 0x11
    125a:	28 2b       	or	r18, r24
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	fc 01       	movw	r30, r24
    1262:	25 87       	std	Z+13, r18	; 0x0d
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <OSEventTO>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTO (OS_EVENT *pevent)
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	00 d0       	rcall	.+0      	; 0x1274 <OSEventTO+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    if ((pevent->OSEventTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
    127c:	80 91 5e 06 	lds	r24, 0x065E
    1280:	90 91 5f 06 	lds	r25, 0x065F
    1284:	fc 01       	movw	r30, r24
    1286:	87 85       	ldd	r24, Z+15	; 0x0f
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	20 91 5e 06 	lds	r18, 0x065E
    1290:	30 91 5f 06 	lds	r19, 0x065F
    1294:	f9 01       	movw	r30, r18
    1296:	27 85       	ldd	r18, Z+15	; 0x0f
    1298:	22 2f       	mov	r18, r18
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	49 81       	ldd	r20, Y+1	; 0x01
    129e:	5a 81       	ldd	r21, Y+2	; 0x02
    12a0:	24 0f       	add	r18, r20
    12a2:	35 1f       	adc	r19, r21
    12a4:	2e 5f       	subi	r18, 0xFE	; 254
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	42 2f       	mov	r20, r18
    12ae:	20 91 5e 06 	lds	r18, 0x065E
    12b2:	30 91 5f 06 	lds	r19, 0x065F
    12b6:	f9 01       	movw	r30, r18
    12b8:	20 89       	ldd	r18, Z+16	; 0x10
    12ba:	20 95       	com	r18
    12bc:	24 23       	and	r18, r20
    12be:	42 2f       	mov	r20, r18
    12c0:	29 81       	ldd	r18, Y+1	; 0x01
    12c2:	3a 81       	ldd	r19, Y+2	; 0x02
    12c4:	28 0f       	add	r18, r24
    12c6:	39 1f       	adc	r19, r25
    12c8:	2e 5f       	subi	r18, 0xFE	; 254
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	40 83       	st	Z, r20
    12d0:	29 81       	ldd	r18, Y+1	; 0x01
    12d2:	3a 81       	ldd	r19, Y+2	; 0x02
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	02 96       	adiw	r24, 0x02	; 2
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	88 23       	and	r24, r24
    12e0:	91 f4       	brne	.+36     	; 0x1306 <OSEventTO+0x98>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	fc 01       	movw	r30, r24
    12e8:	85 85       	ldd	r24, Z+13	; 0x0d
    12ea:	28 2f       	mov	r18, r24
    12ec:	80 91 5e 06 	lds	r24, 0x065E
    12f0:	90 91 5f 06 	lds	r25, 0x065F
    12f4:	fc 01       	movw	r30, r24
    12f6:	81 89       	ldd	r24, Z+17	; 0x11
    12f8:	80 95       	com	r24
    12fa:	82 23       	and	r24, r18
    12fc:	28 2f       	mov	r18, r24
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	fc 01       	movw	r30, r24
    1304:	25 87       	std	Z+13, r18	; 0x0d
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    1306:	80 91 5e 06 	lds	r24, 0x065E
    130a:	90 91 5f 06 	lds	r25, 0x065F
    130e:	fc 01       	movw	r30, r24
    1310:	14 86       	std	Z+12, r1	; 0x0c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    1312:	80 91 5e 06 	lds	r24, 0x065E
    1316:	90 91 5f 06 	lds	r25, 0x065F
    131a:	fc 01       	movw	r30, r24
    131c:	17 82       	std	Z+7, r1	; 0x07
    131e:	16 82       	std	Z+6, r1	; 0x06
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <OSEventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	00 d0       	rcall	.+0      	; 0x1330 <OSEventWaitListInit+0x6>
    1330:	1f 92       	push	r1
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9b 83       	std	Y+3, r25	; 0x03
    1338:	8a 83       	std	Y+2, r24	; 0x02
    INT8U i;

    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	9b 81       	ldd	r25, Y+3	; 0x03
    133e:	fc 01       	movw	r30, r24
    1340:	15 86       	std	Z+13, r1	; 0x0d
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	0d c0       	rjmp	.+26     	; 0x1360 <OSEventWaitListInit+0x36>
        pevent->OSEventTbl[i] = 0x00;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	2a 81       	ldd	r18, Y+2	; 0x02
    134e:	3b 81       	ldd	r19, Y+3	; 0x03
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	02 96       	adiw	r24, 0x02	; 2
    1356:	fc 01       	movw	r30, r24
    1358:	10 82       	st	Z, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;

    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	80 f3       	brcs	.-32     	; 0x1346 <OSEventWaitListInit+0x1c>
        pevent->OSEventTbl[i] = 0x00;
    }
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void OSInit (void)
{
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	00 d0       	rcall	.+0      	; 0x1378 <OSInit+0x6>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
#if 0
	DebugPulse();
#endif


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    137c:	10 92 60 06 	sts	0x0660, r1
    1380:	10 92 61 06 	sts	0x0661, r1
    1384:	10 92 62 06 	sts	0x0662, r1
    1388:	10 92 63 06 	sts	0x0663, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    138c:	10 92 5d 06 	sts	0x065D, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1390:	10 92 3a 06 	sts	0x063A, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    1394:	10 92 4f 06 	sts	0x064F, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
    1398:	10 92 3b 06 	sts	0x063B, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    139c:	10 92 3c 06 	sts	0x063C, r1
    13a0:	10 92 3d 06 	sts	0x063D, r1
    13a4:	10 92 3e 06 	sts	0x063E, r1
    13a8:	10 92 3f 06 	sts	0x063F, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    13ac:	10 92 44 06 	sts	0x0644, r1
    13b0:	10 92 45 06 	sts	0x0645, r1
    13b4:	10 92 46 06 	sts	0x0646, r1
    13b8:	10 92 47 06 	sts	0x0647, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    13bc:	10 92 52 06 	sts	0x0652, r1
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    13c0:	1a 82       	std	Y+2, r1	; 0x02
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	0b c0       	rjmp	.+22     	; 0x13dc <OSInit+0x6a>
        OSRdyTbl[i] = 0;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	8d 5a       	subi	r24, 0xAD	; 173
    13cc:	99 4f       	sbci	r25, 0xF9	; 249
    13ce:	fc 01       	movw	r30, r24
    13d0:	10 82       	st	Z, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	91 05       	cpc	r25, r1
    13e4:	80 f3       	brcs	.-32     	; 0x13c6 <OSInit+0x54>
        OSRdyTbl[i] = 0;
    }

    OSPrioCur     = 0;
    13e6:	10 92 41 06 	sts	0x0641, r1
    OSPrioHighRdy = 0;
    13ea:	10 92 40 06 	sts	0x0640, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    13ee:	10 92 51 06 	sts	0x0651, r1
    13f2:	10 92 50 06 	sts	0x0650, r1
    OSTCBCur      = (OS_TCB *)0;
    13f6:	10 92 5f 06 	sts	0x065F, r1
    13fa:	10 92 5e 06 	sts	0x065E, r1
    OSTCBList     = (OS_TCB *)0;
    13fe:	10 92 43 06 	sts	0x0643, r1
    1402:	10 92 42 06 	sts	0x0642, r1
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    1406:	1a 82       	std	Y+2, r1	; 0x02
    1408:	19 82       	std	Y+1, r1	; 0x01
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <OSInit+0xb6>
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	87 54       	subi	r24, 0x47	; 71
    1416:	99 4f       	sbci	r25, 0xF9	; 249
    1418:	fc 01       	movw	r30, r24
    141a:	11 82       	std	Z+1, r1	; 0x01
    141c:	10 82       	st	Z, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	80 34       	cpi	r24, 0x40	; 64
    142e:	91 05       	cpc	r25, r1
    1430:	68 f3       	brcs	.-38     	; 0x140c <OSInit+0x9a>
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    1432:	1a 82       	std	Y+2, r1	; 0x02
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	28 c0       	rjmp	.+80     	; 0x1488 <OSInit+0x116>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	9c 01       	movw	r18, r24
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	9c 01       	movw	r18, r24
    1456:	2b 54       	subi	r18, 0x4B	; 75
    1458:	3d 4f       	sbci	r19, 0xFD	; 253
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	ac 01       	movw	r20, r24
    1464:	44 0f       	add	r20, r20
    1466:	55 1f       	adc	r21, r21
    1468:	44 0f       	add	r20, r20
    146a:	55 1f       	adc	r21, r21
    146c:	44 0f       	add	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	84 0f       	add	r24, r20
    1472:	95 1f       	adc	r25, r21
    1474:	89 54       	subi	r24, 0x49	; 73
    1476:	9d 4f       	sbci	r25, 0xFD	; 253
    1478:	fc 01       	movw	r30, r24
    147a:	31 83       	std	Z+1, r19	; 0x01
    147c:	20 83       	st	Z, r18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	89 30       	cpi	r24, 0x09	; 9
    148e:	91 05       	cpc	r25, r1
    1490:	98 f2       	brcs	.-90     	; 0x1438 <OSInit+0xc6>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    1492:	10 92 5a 03 	sts	0x035A, r1
    1496:	10 92 59 03 	sts	0x0359, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
    149a:	85 eb       	ldi	r24, 0xB5	; 181
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	90 93 4d 06 	sts	0x064D, r25
    14a2:	80 93 4c 06 	sts	0x064C, r24

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    14a6:	1a 82       	std	Y+2, r1	; 0x02
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	29 c0       	rjmp	.+82     	; 0x14fe <OSInit+0x18c>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	9c 01       	movw	r18, r24
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	28 1b       	sub	r18, r24
    14c6:	39 0b       	sbc	r19, r25
    14c8:	a9 01       	movw	r20, r18
    14ca:	4c 59       	subi	r20, 0x9C	; 156
    14cc:	59 4f       	sbci	r21, 0xF9	; 249
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	9c 01       	movw	r18, r24
    14d8:	22 0f       	add	r18, r18
    14da:	33 1f       	adc	r19, r19
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	28 1b       	sub	r18, r24
    14e6:	39 0b       	sbc	r19, r25
    14e8:	c9 01       	movw	r24, r18
    14ea:	8c 59       	subi	r24, 0x9C	; 156
    14ec:	99 4f       	sbci	r25, 0xF9	; 249
    14ee:	fc 01       	movw	r30, r24
    14f0:	51 83       	std	Z+1, r21	; 0x01
    14f2:	40 83       	st	Z, r20
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	85 30       	cpi	r24, 0x05	; 5
    1504:	91 05       	cpc	r25, r1
    1506:	90 f2       	brcs	.-92     	; 0x14ac <OSInit+0x13a>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
    1508:	10 92 ab 06 	sts	0x06AB, r1
    150c:	10 92 aa 06 	sts	0x06AA, r1
    OSEventFreeList                          = &OSEventTbl[0];
    1510:	84 e6       	ldi	r24, 0x64	; 100
    1512:	96 e0       	ldi	r25, 0x06	; 6
    1514:	90 93 5c 06 	sts	0x065C, r25
    1518:	80 93 5b 06 	sts	0x065B, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE,
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
    151c:	2f e3       	ldi	r18, 0x3F	; 63
    151e:	44 e7       	ldi	r20, 0x74	; 116
    1520:	52 e0       	ldi	r21, 0x02	; 2
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	8a ed       	ldi	r24, 0xDA	; 218
    1528:	9b e0       	ldi	r25, 0x0B	; 11
    152a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat,
    152e:	2e e3       	ldi	r18, 0x3E	; 62
    1530:	44 eb       	ldi	r20, 0xB4	; 180
    1532:	52 e0       	ldi	r21, 0x02	; 2
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	87 ef       	ldi	r24, 0xF7	; 247
    153a:	9b e0       	ldi	r25, 0x0B	; 11
    153c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <OSTaskCreate>
                     &OSTaskStatStk[0],                           /* Set Top-Of-Stack                  */
                     OS_STAT_PRIO);                               /* One higher than the idle task     */
        #endif
    #endif
#endif
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
*********************************************************************************************************
*/

void OSIntExit (void)
{
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    OS_ENTER_CRITICAL();
    1552:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
    1554:	80 91 5d 06 	lds	r24, 0x065D
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	80 93 5d 06 	sts	0x065D, r24
    155e:	90 91 5d 06 	lds	r25, 0x065D
    1562:	80 91 3a 06 	lds	r24, 0x063A
    1566:	89 2b       	or	r24, r25
    1568:	88 23       	and	r24, r24
    156a:	09 f0       	breq	.+2      	; 0x156e <OSIntExit+0x24>
    156c:	4b c0       	rjmp	.+150    	; 0x1604 <OSIntExit+0xba>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
    156e:	80 91 52 06 	lds	r24, 0x0652
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	8c 5c       	subi	r24, 0xCC	; 204
    1578:	9e 4f       	sbci	r25, 0xFE	; 254
    157a:	fc 01       	movw	r30, r24
    157c:	80 81       	ld	r24, Z
    157e:	80 93 34 02 	sts	0x0234, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
    1582:	80 91 34 02 	lds	r24, 0x0234
    1586:	28 2f       	mov	r18, r24
    1588:	22 0f       	add	r18, r18
    158a:	22 0f       	add	r18, r18
    158c:	22 0f       	add	r18, r18
    158e:	80 91 34 02 	lds	r24, 0x0234
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	8d 5a       	subi	r24, 0xAD	; 173
    1598:	99 4f       	sbci	r25, 0xF9	; 249
    159a:	fc 01       	movw	r30, r24
    159c:	80 81       	ld	r24, Z
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	8c 5c       	subi	r24, 0xCC	; 204
    15a4:	9e 4f       	sbci	r25, 0xFE	; 254
    15a6:	fc 01       	movw	r30, r24
    15a8:	80 81       	ld	r24, Z
    15aa:	82 0f       	add	r24, r18
    15ac:	80 93 40 06 	sts	0x0640, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
    15b0:	90 91 40 06 	lds	r25, 0x0640
    15b4:	80 91 41 06 	lds	r24, 0x0641
    15b8:	98 17       	cp	r25, r24
    15ba:	21 f1       	breq	.+72     	; 0x1604 <OSIntExit+0xba>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    15bc:	80 91 40 06 	lds	r24, 0x0640
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	87 54       	subi	r24, 0x47	; 71
    15ca:	99 4f       	sbci	r25, 0xF9	; 249
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	90 93 51 06 	sts	0x0651, r25
    15d6:	80 93 50 06 	sts	0x0650, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
    15da:	80 91 44 06 	lds	r24, 0x0644
    15de:	90 91 45 06 	lds	r25, 0x0645
    15e2:	a0 91 46 06 	lds	r26, 0x0646
    15e6:	b0 91 47 06 	lds	r27, 0x0647
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	a1 1d       	adc	r26, r1
    15ee:	b1 1d       	adc	r27, r1
    15f0:	80 93 44 06 	sts	0x0644, r24
    15f4:	90 93 45 06 	sts	0x0645, r25
    15f8:	a0 93 46 06 	sts	0x0646, r26
    15fc:	b0 93 47 06 	sts	0x0647, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
    1600:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
    1604:	78 94       	sei
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <OSSched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
*********************************************************************************************************
*/

void OSSched (void)
{
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	1f 92       	push	r1
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    INT8U y;


    OS_ENTER_CRITICAL();
    1616:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
    1618:	90 91 3a 06 	lds	r25, 0x063A
    161c:	80 91 5d 06 	lds	r24, 0x065D
    1620:	89 2b       	or	r24, r25
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <OSSched+0x1c>
    1626:	48 c0       	rjmp	.+144    	; 0x16b8 <OSSched+0xac>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
    1628:	80 91 52 06 	lds	r24, 0x0652
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	8c 5c       	subi	r24, 0xCC	; 204
    1632:	9e 4f       	sbci	r25, 0xFE	; 254
    1634:	fc 01       	movw	r30, r24
    1636:	80 81       	ld	r24, Z
    1638:	89 83       	std	Y+1, r24	; 0x01
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	22 0f       	add	r18, r18
    1640:	22 0f       	add	r18, r18
    1642:	22 0f       	add	r18, r18
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	8d 5a       	subi	r24, 0xAD	; 173
    164c:	99 4f       	sbci	r25, 0xF9	; 249
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	8c 5c       	subi	r24, 0xCC	; 204
    1658:	9e 4f       	sbci	r25, 0xFE	; 254
    165a:	fc 01       	movw	r30, r24
    165c:	80 81       	ld	r24, Z
    165e:	82 0f       	add	r24, r18
    1660:	80 93 40 06 	sts	0x0640, r24
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
    1664:	90 91 40 06 	lds	r25, 0x0640
    1668:	80 91 41 06 	lds	r24, 0x0641
    166c:	98 17       	cp	r25, r24
    166e:	21 f1       	breq	.+72     	; 0x16b8 <OSSched+0xac>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    1670:	80 91 40 06 	lds	r24, 0x0640
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	87 54       	subi	r24, 0x47	; 71
    167e:	99 4f       	sbci	r25, 0xF9	; 249
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	90 93 51 06 	sts	0x0651, r25
    168a:	80 93 50 06 	sts	0x0650, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
    168e:	80 91 44 06 	lds	r24, 0x0644
    1692:	90 91 45 06 	lds	r25, 0x0645
    1696:	a0 91 46 06 	lds	r26, 0x0646
    169a:	b0 91 47 06 	lds	r27, 0x0647
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	a1 1d       	adc	r26, r1
    16a2:	b1 1d       	adc	r27, r1
    16a4:	80 93 44 06 	sts	0x0644, r24
    16a8:	90 93 45 06 	sts	0x0645, r25
    16ac:	a0 93 46 06 	sts	0x0646, r26
    16b0:	b0 93 47 06 	sts	0x0647, r27
#if 1
			//DebugPulse ();
#endif

#if 1
            OS_TASK_SW();                        /* Perform a context switch                           */
    16b4:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
    16b8:	78 94       	sei
}
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <OSStart>:
*                 b) Set OSRunning to TRUE.
*********************************************************************************************************
*/

void OSStart (void)
{
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <OSStart+0x6>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
#if 0
	DebugPulse();
#endif


    if (OSRunning == FALSE) {
    16cc:	80 91 3b 06 	lds	r24, 0x063B
    16d0:	88 23       	and	r24, r24
    16d2:	d9 f5       	brne	.+118    	; 0x174a <OSStart+0x88>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
    16d4:	80 91 52 06 	lds	r24, 0x0652
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	8c 5c       	subi	r24, 0xCC	; 204
    16de:	9e 4f       	sbci	r25, 0xFE	; 254
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	89 83       	std	Y+1, r24	; 0x01
        x             = OSUnMapTbl[OSRdyTbl[y]];
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	8d 5a       	subi	r24, 0xAD	; 173
    16ee:	99 4f       	sbci	r25, 0xF9	; 249
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	8c 5c       	subi	r24, 0xCC	; 204
    16fa:	9e 4f       	sbci	r25, 0xFE	; 254
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	8a 83       	std	Y+2, r24	; 0x02
        OSPrioHighRdy = (INT8U)((y << 3) + x);
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	98 2f       	mov	r25, r24
    1706:	99 0f       	add	r25, r25
    1708:	99 0f       	add	r25, r25
    170a:	99 0f       	add	r25, r25
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	89 0f       	add	r24, r25
    1710:	80 93 40 06 	sts	0x0640, r24
        OSPrioCur     = OSPrioHighRdy;
    1714:	80 91 40 06 	lds	r24, 0x0640
    1718:	80 93 41 06 	sts	0x0641, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    171c:	80 91 40 06 	lds	r24, 0x0640
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	87 54       	subi	r24, 0x47	; 71
    172a:	99 4f       	sbci	r25, 0xF9	; 249
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	90 93 51 06 	sts	0x0651, r25
    1736:	80 93 50 06 	sts	0x0650, r24
        OSTCBCur      = OSTCBHighRdy;
    173a:	80 91 50 06 	lds	r24, 0x0650
    173e:	90 91 51 06 	lds	r25, 0x0651
    1742:	90 93 5f 06 	sts	0x065F, r25
    1746:	80 93 5e 06 	sts	0x065E, r24
    }


#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
    174a:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
	DebugPulse();
#endif



}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
    OS_ENTER_CRITICAL();
    1768:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    176a:	10 92 3c 06 	sts	0x063C, r1
    176e:	10 92 3d 06 	sts	0x063D, r1
    1772:	10 92 3e 06 	sts	0x063E, r1
    1776:	10 92 3f 06 	sts	0x063F, r1
    OS_EXIT_CRITICAL();
    177a:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
    OS_ENTER_CRITICAL();
    1784:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
    1786:	80 91 3c 06 	lds	r24, 0x063C
    178a:	90 91 3d 06 	lds	r25, 0x063D
    178e:	a0 91 3e 06 	lds	r26, 0x063E
    1792:	b0 91 3f 06 	lds	r27, 0x063F
    1796:	80 93 48 06 	sts	0x0648, r24
    179a:	90 93 49 06 	sts	0x0649, r25
    179e:	a0 93 4a 06 	sts	0x064A, r26
    17a2:	b0 93 4b 06 	sts	0x064B, r27
    OSStatRdy    = TRUE;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 b8 06 	sts	0x06B8, r24
    OS_EXIT_CRITICAL();
    17ac:	78 94       	sei
}
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <OSTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

void OSTaskIdle (void *pdata)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <OSTaskIdle+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    17c2:	f8 94       	cli
        OSIdleCtr++;
    17c4:	80 91 3c 06 	lds	r24, 0x063C
    17c8:	90 91 3d 06 	lds	r25, 0x063D
    17cc:	a0 91 3e 06 	lds	r26, 0x063E
    17d0:	b0 91 3f 06 	lds	r27, 0x063F
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	a1 1d       	adc	r26, r1
    17d8:	b1 1d       	adc	r27, r1
    17da:	80 93 3c 06 	sts	0x063C, r24
    17de:	90 93 3d 06 	sts	0x063D, r25
    17e2:	a0 93 3e 06 	sts	0x063E, r26
    17e6:	b0 93 3f 06 	sts	0x063F, r27
        OS_EXIT_CRITICAL();
    17ea:	78 94       	sei
    }
    17ec:	ea cf       	rjmp	.-44     	; 0x17c2 <OSTaskIdle+0xe>

000017ee <OSTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN
void OSTaskStat (void *pdata)
{
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	2b 97       	sbiw	r28, 0x0b	; 11
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	9f 83       	std	Y+7, r25	; 0x07
    1804:	8e 83       	std	Y+6, r24	; 0x06
    INT32U run;
    INT8S  usage;


    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <OSTaskStat+0x22>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    1808:	80 e9       	ldi	r24, 0x90	; 144
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
    INT32U run;
    INT8S  usage;


    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1810:	80 91 b8 06 	lds	r24, 0x06B8
    1814:	88 23       	and	r24, r24
    1816:	c1 f3       	breq	.-16     	; 0x1808 <OSTaskStat+0x1a>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    1818:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    181a:	80 91 3c 06 	lds	r24, 0x063C
    181e:	90 91 3d 06 	lds	r25, 0x063D
    1822:	a0 91 3e 06 	lds	r26, 0x063E
    1826:	b0 91 3f 06 	lds	r27, 0x063F
    182a:	80 93 39 07 	sts	0x0739, r24
    182e:	90 93 3a 07 	sts	0x073A, r25
    1832:	a0 93 3b 07 	sts	0x073B, r26
    1836:	b0 93 3c 07 	sts	0x073C, r27
        run          = OSIdleCtr;
    183a:	80 91 3c 06 	lds	r24, 0x063C
    183e:	90 91 3d 06 	lds	r25, 0x063D
    1842:	a0 91 3e 06 	lds	r26, 0x063E
    1846:	b0 91 3f 06 	lds	r27, 0x063F
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	ab 83       	std	Y+3, r26	; 0x03
    1850:	bc 83       	std	Y+4, r27	; 0x04
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    1852:	10 92 3c 06 	sts	0x063C, r1
    1856:	10 92 3d 06 	sts	0x063D, r1
    185a:	10 92 3e 06 	sts	0x063E, r1
    185e:	10 92 3f 06 	sts	0x063F, r1
        OS_EXIT_CRITICAL();
    1862:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
    1864:	80 91 48 06 	lds	r24, 0x0648
    1868:	90 91 49 06 	lds	r25, 0x0649
    186c:	a0 91 4a 06 	lds	r26, 0x064A
    1870:	b0 91 4b 06 	lds	r27, 0x064B
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	a1 05       	cpc	r26, r1
    1878:	b1 05       	cpc	r27, r1
    187a:	79 f1       	breq	.+94     	; 0x18da <OSTaskStat+0xec>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    187c:	29 81       	ldd	r18, Y+1	; 0x01
    187e:	3a 81       	ldd	r19, Y+2	; 0x02
    1880:	4b 81       	ldd	r20, Y+3	; 0x03
    1882:	5c 81       	ldd	r21, Y+4	; 0x04
    1884:	84 e6       	ldi	r24, 0x64	; 100
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	dc 01       	movw	r26, r24
    188a:	0e 94 a5 12 	call	0x254a	; 0x254a <__muluhisi3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	20 91 48 06 	lds	r18, 0x0648
    1896:	30 91 49 06 	lds	r19, 0x0649
    189a:	40 91 4a 06 	lds	r20, 0x064A
    189e:	50 91 4b 06 	lds	r21, 0x064B
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__udivmodsi4>
    18aa:	da 01       	movw	r26, r20
    18ac:	c9 01       	movw	r24, r18
    18ae:	94 e6       	ldi	r25, 0x64	; 100
    18b0:	29 2f       	mov	r18, r25
    18b2:	28 1b       	sub	r18, r24
    18b4:	82 2f       	mov	r24, r18
    18b6:	8d 83       	std	Y+5, r24	; 0x05
            if (usage > 100) {
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	85 36       	cpi	r24, 0x65	; 101
    18bc:	24 f0       	brlt	.+8      	; 0x18c6 <OSTaskStat+0xd8>
                OSCPUUsage = 100;
    18be:	84 e6       	ldi	r24, 0x64	; 100
    18c0:	80 93 4e 06 	sts	0x064E, r24
    18c4:	0c c0       	rjmp	.+24     	; 0x18de <OSTaskStat+0xf0>
            } else if (usage < 0) {
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	88 23       	and	r24, r24
    18ca:	1c f4       	brge	.+6      	; 0x18d2 <OSTaskStat+0xe4>
                OSCPUUsage =   0;
    18cc:	10 92 4e 06 	sts	0x064E, r1
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <OSTaskStat+0xf0>
            } else {
                OSCPUUsage = usage;
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	80 93 4e 06 	sts	0x064E, r24
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <OSTaskStat+0xf0>
            }
        } else {
            OSCPUUsage = 0;
    18da:	10 92 4e 06 	sts	0x064E, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    18de:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
    18e2:	88 ec       	ldi	r24, 0xC8	; 200
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <OSTimeDly>
    }
    18ea:	96 cf       	rjmp	.-212    	; 0x1818 <OSTaskStat+0x2a>

000018ec <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	2f 97       	sbiw	r28, 0x0f	; 15
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	7d 83       	std	Y+5, r23	; 0x05
    1910:	6c 83       	std	Y+4, r22	; 0x04
    1912:	5f 83       	std	Y+7, r21	; 0x07
    1914:	4e 83       	std	Y+6, r20	; 0x06
    1916:	39 87       	std	Y+9, r19	; 0x09
    1918:	28 87       	std	Y+8, r18	; 0x08
    191a:	1b 87       	std	Y+11, r17	; 0x0b
    191c:	0a 87       	std	Y+10, r16	; 0x0a
    191e:	fd 86       	std	Y+13, r15	; 0x0d
    1920:	ec 86       	std	Y+12, r14	; 0x0c
    1922:	df 86       	std	Y+15, r13	; 0x0f
    1924:	ce 86       	std	Y+14, r12	; 0x0e
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
    1926:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    1928:	80 91 4c 06 	lds	r24, 0x064C
    192c:	90 91 4d 06 	lds	r25, 0x064D
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
    if (ptcb != (OS_TCB *)0) {
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	09 f4       	brne	.+2      	; 0x193e <OSTCBInit+0x52>
    193c:	aa c0       	rjmp	.+340    	; 0x1a92 <OSTCBInit+0x1a6>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	fc 01       	movw	r30, r24
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	90 93 4d 06 	sts	0x064D, r25
    194c:	80 93 4c 06 	sts	0x064C, r24
        OS_EXIT_CRITICAL();
    1950:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	fc 01       	movw	r30, r24
    195c:	31 83       	std	Z+1, r19	; 0x01
    195e:	20 83       	st	Z, r18
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	fc 01       	movw	r30, r24
    1968:	25 87       	std	Z+13, r18	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	fc 01       	movw	r30, r24
    1978:	13 86       	std	Z+11, r1	; 0x0b
    197a:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	28 2f       	mov	r18, r24
    1980:	26 95       	lsr	r18
    1982:	26 95       	lsr	r18
    1984:	26 95       	lsr	r18
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	fc 01       	movw	r30, r24
    198c:	27 87       	std	Z+15, r18	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	fc 01       	movw	r30, r24
    1994:	87 85       	ldd	r24, Z+15	; 0x0f
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	84 5d       	subi	r24, 0xD4	; 212
    199c:	9e 4f       	sbci	r25, 0xFE	; 254
    199e:	fc 01       	movw	r30, r24
    19a0:	20 81       	ld	r18, Z
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	fc 01       	movw	r30, r24
    19a8:	21 8b       	std	Z+17, r18	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	28 2f       	mov	r18, r24
    19ae:	27 70       	andi	r18, 0x07	; 7
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	fc 01       	movw	r30, r24
    19b6:	26 87       	std	Z+14, r18	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	fc 01       	movw	r30, r24
    19be:	86 85       	ldd	r24, Z+14	; 0x0e
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	84 5d       	subi	r24, 0xD4	; 212
    19c6:	9e 4f       	sbci	r25, 0xFE	; 254
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 81       	ld	r18, Z
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 8b       	std	Z+16, r18	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	fc 01       	movw	r30, r24
    19da:	17 82       	std	Z+7, r1	; 0x07
    19dc:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	fc 01       	movw	r30, r24
    19e4:	11 86       	std	Z+9, r1	; 0x09
    19e6:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
    19e8:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	87 54       	subi	r24, 0x47	; 71
    19f6:	99 4f       	sbci	r25, 0xF9	; 249
    19f8:	29 81       	ldd	r18, Y+1	; 0x01
    19fa:	3a 81       	ldd	r19, Y+2	; 0x02
    19fc:	fc 01       	movw	r30, r24
    19fe:	31 83       	std	Z+1, r19	; 0x01
    1a00:	20 83       	st	Z, r18
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
    1a02:	20 91 42 06 	lds	r18, 0x0642
    1a06:	30 91 43 06 	lds	r19, 0x0643
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	fc 01       	movw	r30, r24
    1a10:	33 83       	std	Z+3, r19	; 0x03
    1a12:	22 83       	std	Z+2, r18	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	15 82       	std	Z+5, r1	; 0x05
    1a1c:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
    1a1e:	80 91 42 06 	lds	r24, 0x0642
    1a22:	90 91 43 06 	lds	r25, 0x0643
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <OSTCBInit+0x150>
            OSTCBList->OSTCBPrev = ptcb;
    1a2a:	80 91 42 06 	lds	r24, 0x0642
    1a2e:	90 91 43 06 	lds	r25, 0x0643
    1a32:	29 81       	ldd	r18, Y+1	; 0x01
    1a34:	3a 81       	ldd	r19, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	35 83       	std	Z+5, r19	; 0x05
    1a3a:	24 83       	std	Z+4, r18	; 0x04
        }
        OSTCBList               = ptcb;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	90 93 43 06 	sts	0x0643, r25
    1a44:	80 93 42 06 	sts	0x0642, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	91 89       	ldd	r25, Z+17	; 0x11
    1a50:	80 91 52 06 	lds	r24, 0x0652
    1a54:	89 2b       	or	r24, r25
    1a56:	80 93 52 06 	sts	0x0652, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	fc 01       	movw	r30, r24
    1a60:	87 85       	ldd	r24, Z+15	; 0x0f
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	29 81       	ldd	r18, Y+1	; 0x01
    1a68:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	27 85       	ldd	r18, Z+15	; 0x0f
    1a6e:	22 2f       	mov	r18, r18
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	2d 5a       	subi	r18, 0xAD	; 173
    1a74:	39 4f       	sbci	r19, 0xF9	; 249
    1a76:	f9 01       	movw	r30, r18
    1a78:	40 81       	ld	r20, Z
    1a7a:	29 81       	ldd	r18, Y+1	; 0x01
    1a7c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a7e:	f9 01       	movw	r30, r18
    1a80:	20 89       	ldd	r18, Z+16	; 0x10
    1a82:	24 2b       	or	r18, r20
    1a84:	8d 5a       	subi	r24, 0xAD	; 173
    1a86:	99 4f       	sbci	r25, 0xF9	; 249
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
        OS_EXIT_CRITICAL();
    1a8c:	78 94       	sei
        return (OS_NO_ERR);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <OSTCBInit+0x1aa>
    } else {
        OS_EXIT_CRITICAL();
    1a92:	78 94       	sei
        return (OS_NO_MORE_TCB);
    1a94:	86 e4       	ldi	r24, 0x46	; 70
    }
}
    1a96:	2f 96       	adiw	r28, 0x0f	; 15
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	08 95       	ret

00001ab4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void OSTimeTick (void)
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <OSTimeTick+0x6>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
    1abe:	0e 94 ed 07 	call	0xfda	; 0xfda <OSTimeTickHook>

    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    1ac2:	80 91 42 06 	lds	r24, 0x0642
    1ac6:	90 91 43 06 	lds	r25, 0x0643
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
    1ace:	59 c0       	rjmp	.+178    	; 0x1b82 <OSTimeTick+0xce>
        OS_ENTER_CRITICAL();
    1ad0:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	82 85       	ldd	r24, Z+10	; 0x0a
    1ada:	93 85       	ldd	r25, Z+11	; 0x0b
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <OSTimeTick+0x2e>
    1ae0:	48 c0       	rjmp	.+144    	; 0x1b72 <OSTimeTick+0xbe>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	82 85       	ldd	r24, Z+10	; 0x0a
    1aea:	93 85       	ldd	r25, Z+11	; 0x0b
    1aec:	9c 01       	movw	r18, r24
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	31 09       	sbc	r19, r1
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	33 87       	std	Z+11, r19	; 0x0b
    1afa:	22 87       	std	Z+10, r18	; 0x0a
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	fc 01       	movw	r30, r24
    1b02:	82 85       	ldd	r24, Z+10	; 0x0a
    1b04:	93 85       	ldd	r25, Z+11	; 0x0b
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	a1 f5       	brne	.+104    	; 0x1b72 <OSTimeTick+0xbe>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	fc 01       	movw	r30, r24
    1b10:	84 85       	ldd	r24, Z+12	; 0x0c
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	88 70       	andi	r24, 0x08	; 8
    1b18:	99 27       	eor	r25, r25
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	19 f5       	brne	.+70     	; 0x1b64 <OSTimeTick+0xb0>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	fc 01       	movw	r30, r24
    1b24:	91 89       	ldd	r25, Z+17	; 0x11
    1b26:	80 91 52 06 	lds	r24, 0x0652
    1b2a:	89 2b       	or	r24, r25
    1b2c:	80 93 52 06 	sts	0x0652, r24
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	fc 01       	movw	r30, r24
    1b36:	87 85       	ldd	r24, Z+15	; 0x0f
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	29 81       	ldd	r18, Y+1	; 0x01
    1b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b40:	f9 01       	movw	r30, r18
    1b42:	27 85       	ldd	r18, Z+15	; 0x0f
    1b44:	22 2f       	mov	r18, r18
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	2d 5a       	subi	r18, 0xAD	; 173
    1b4a:	39 4f       	sbci	r19, 0xF9	; 249
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	40 81       	ld	r20, Z
    1b50:	29 81       	ldd	r18, Y+1	; 0x01
    1b52:	3a 81       	ldd	r19, Y+2	; 0x02
    1b54:	f9 01       	movw	r30, r18
    1b56:	20 89       	ldd	r18, Z+16	; 0x10
    1b58:	24 2b       	or	r18, r20
    1b5a:	8d 5a       	subi	r24, 0xAD	; 173
    1b5c:	99 4f       	sbci	r25, 0xF9	; 249
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 83       	st	Z, r18
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <OSTimeTick+0xbe>
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	33 87       	std	Z+11, r19	; 0x0b
    1b70:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	fc 01       	movw	r30, r24
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
        OS_EXIT_CRITICAL();
    1b80:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */

    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	fc 01       	movw	r30, r24
    1b88:	85 85       	ldd	r24, Z+13	; 0x0d
    1b8a:	8f 33       	cpi	r24, 0x3F	; 63
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <OSTimeTick+0xdc>
    1b8e:	a0 cf       	rjmp	.-192    	; 0x1ad0 <OSTimeTick+0x1c>
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }

    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
    1b90:	f8 94       	cli
    OSTime++;
    1b92:	80 91 60 06 	lds	r24, 0x0660
    1b96:	90 91 61 06 	lds	r25, 0x0661
    1b9a:	a0 91 62 06 	lds	r26, 0x0662
    1b9e:	b0 91 63 06 	lds	r27, 0x0663
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	80 93 60 06 	sts	0x0660, r24
    1bac:	90 93 61 06 	sts	0x0661, r25
    1bb0:	a0 93 62 06 	sts	0x0662, r26
    1bb4:	b0 93 63 06 	sts	0x0663, r27
    OS_EXIT_CRITICAL();
    1bb8:	78 94       	sei
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <OSMboxAccept>:
*              == (void *)0  if the mailbox is empty or if you didn't pass the proper event pointer.
*********************************************************************************************************
*/

void *OSMboxAccept (OS_EVENT *pevent)
{
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <OSMboxAccept+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <OSMboxAccept+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    void  *msg;


    OS_ENTER_CRITICAL();
    1bd4:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	fc 01       	movw	r30, r24
    1bdc:	84 85       	ldd	r24, Z+12	; 0x0c
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	21 f0       	breq	.+8      	; 0x1bea <OSMboxAccept+0x26>
        OS_EXIT_CRITICAL();
    1be2:	78 94       	sei
        return ((void *)0);
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	13 c0       	rjmp	.+38     	; 0x1c10 <OSMboxAccept+0x4c>
    }
    msg = pevent->OSEventPtr; 
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    if (msg != (void *)0) {                               /* See if there is already a message         */
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <OSMboxAccept+0x46>
        pevent->OSEventPtr = (void *)0;                   /* Clear the mailbox                         */
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	fc 01       	movw	r30, r24
    1c06:	11 82       	std	Z+1, r1	; 0x01
    1c08:	10 82       	st	Z, r1
    }
    OS_EXIT_CRITICAL();
    1c0a:	78 94       	sei
    return (msg);                                         /* Return the message received (or NULL)     */
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <OSMboxCreate+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <OSMboxCreate+0x8>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
    1c2e:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    1c30:	80 91 5b 06 	lds	r24, 0x065B
    1c34:	90 91 5c 06 	lds	r25, 0x065C
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    1c3c:	80 91 5b 06 	lds	r24, 0x065B
    1c40:	90 91 5c 06 	lds	r25, 0x065C
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	59 f0       	breq	.+22     	; 0x1c5e <OSMboxCreate+0x40>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1c48:	80 91 5b 06 	lds	r24, 0x065B
    1c4c:	90 91 5c 06 	lds	r25, 0x065C
    1c50:	fc 01       	movw	r30, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	90 93 5c 06 	sts	0x065C, r25
    1c5a:	80 93 5b 06 	sts	0x065B, r24
    }
    OS_EXIT_CRITICAL();
    1c5e:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <OSMboxCreate+0x6a>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	21 e0       	ldi	r18, 0x01	; 1
    1c6e:	fc 01       	movw	r30, r24
    1c70:	24 87       	std	Z+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	31 83       	std	Z+1, r19	; 0x01
    1c7e:	20 83       	st	Z, r18
        OSEventWaitListInit(pevent);
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	0e 94 95 09 	call	0x132a	; 0x132a <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <OSMboxPend>:
*                            event control block.
*********************************************************************************************************
*/

void *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	28 97       	sbiw	r28, 0x08	; 8
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	7e 83       	std	Y+6, r23	; 0x06
    1cb4:	6d 83       	std	Y+5, r22	; 0x05
    1cb6:	58 87       	std	Y+8, r21	; 0x08
    1cb8:	4f 83       	std	Y+7, r20	; 0x07
    void  *msg;


    OS_ENTER_CRITICAL();
    1cba:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	84 85       	ldd	r24, Z+12	; 0x0c
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	49 f0       	breq	.+18     	; 0x1cda <OSMboxPend+0x40>
        OS_EXIT_CRITICAL();
    1cc8:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
        return ((void *)0);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	99 c0       	rjmp	.+306    	; 0x1e0c <OSMboxPend+0x172>
    }
    msg = pevent->OSEventPtr;
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    if (msg != (void *)0) {                           /* See if there is already a message             */
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	59 f0       	breq	.+22     	; 0x1d06 <OSMboxPend+0x6c>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	11 82       	std	Z+1, r1	; 0x01
    1cf8:	10 82       	st	Z, r1
        OS_EXIT_CRITICAL();
    1cfa:	78 94       	sei
        *err = OS_NO_ERR;
    1cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfe:	98 85       	ldd	r25, Y+8	; 0x08
    1d00:	fc 01       	movw	r30, r24
    1d02:	10 82       	st	Z, r1
    1d04:	81 c0       	rjmp	.+258    	; 0x1e08 <OSMboxPend+0x16e>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
    1d06:	80 91 5d 06 	lds	r24, 0x065D
    1d0a:	88 23       	and	r24, r24
    1d0c:	39 f0       	breq	.+14     	; 0x1d1c <OSMboxPend+0x82>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
    1d0e:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
    1d10:	8f 81       	ldd	r24, Y+7	; 0x07
    1d12:	98 85       	ldd	r25, Y+8	; 0x08
    1d14:	22 e0       	ldi	r18, 0x02	; 2
    1d16:	fc 01       	movw	r30, r24
    1d18:	20 83       	st	Z, r18
    1d1a:	76 c0       	rjmp	.+236    	; 0x1e08 <OSMboxPend+0x16e>
    } else {
        OSTCBCur->OSTCBStat |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    1d1c:	80 91 5e 06 	lds	r24, 0x065E
    1d20:	90 91 5f 06 	lds	r25, 0x065F
    1d24:	20 91 5e 06 	lds	r18, 0x065E
    1d28:	30 91 5f 06 	lds	r19, 0x065F
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	24 85       	ldd	r18, Z+12	; 0x0c
    1d30:	22 60       	ori	r18, 0x02	; 2
    1d32:	fc 01       	movw	r30, r24
    1d34:	24 87       	std	Z+12, r18	; 0x0c
        OSTCBCur->OSTCBDly   = timeout;               /* Load timeout in TCB                           */
    1d36:	80 91 5e 06 	lds	r24, 0x065E
    1d3a:	90 91 5f 06 	lds	r25, 0x065F
    1d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d40:	3e 81       	ldd	r19, Y+6	; 0x06
    1d42:	fc 01       	movw	r30, r24
    1d44:	33 87       	std	Z+11, r19	; 0x0b
    1d46:	22 87       	std	Z+10, r18	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	0e 94 b7 08 	call	0x116e	; 0x116e <OSEventTaskWait>
        OS_EXIT_CRITICAL();
    1d50:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready to run  */
    1d52:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
        OS_ENTER_CRITICAL();
    1d56:	f8 94       	cli
        if ((msg = OSTCBCur->OSTCBMsg) != (void *)0) {     /* See if we were given the message         */
    1d58:	80 91 5e 06 	lds	r24, 0x065E
    1d5c:	90 91 5f 06 	lds	r25, 0x065F
    1d60:	fc 01       	movw	r30, r24
    1d62:	80 85       	ldd	r24, Z+8	; 0x08
    1d64:	91 85       	ldd	r25, Z+9	; 0x09
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	d1 f0       	breq	.+52     	; 0x1da6 <OSMboxPend+0x10c>
            OSTCBCur->OSTCBMsg      = (void *)0;           /* Yes, clear message received              */
    1d72:	80 91 5e 06 	lds	r24, 0x065E
    1d76:	90 91 5f 06 	lds	r25, 0x065F
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	11 86       	std	Z+9, r1	; 0x09
    1d7e:	10 86       	std	Z+8, r1	; 0x08
            OSTCBCur->OSTCBStat     = OS_STAT_RDY;
    1d80:	80 91 5e 06 	lds	r24, 0x065E
    1d84:	90 91 5f 06 	lds	r25, 0x065F
    1d88:	fc 01       	movw	r30, r24
    1d8a:	14 86       	std	Z+12, r1	; 0x0c
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;       /* No longer waiting for event              */
    1d8c:	80 91 5e 06 	lds	r24, 0x065E
    1d90:	90 91 5f 06 	lds	r25, 0x065F
    1d94:	fc 01       	movw	r30, r24
    1d96:	17 82       	std	Z+7, r1	; 0x07
    1d98:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    1d9a:	78 94       	sei
            *err                    = OS_NO_ERR;
    1d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9e:	98 85       	ldd	r25, Y+8	; 0x08
    1da0:	fc 01       	movw	r30, r24
    1da2:	10 82       	st	Z, r1
    1da4:	31 c0       	rjmp	.+98     	; 0x1e08 <OSMboxPend+0x16e>
        } else if (OSTCBCur->OSTCBStat & OS_STAT_MBOX) {   /* If status is not OS_STAT_RDY, timed out  */
    1da6:	80 91 5e 06 	lds	r24, 0x065E
    1daa:	90 91 5f 06 	lds	r25, 0x065F
    1dae:	fc 01       	movw	r30, r24
    1db0:	84 85       	ldd	r24, Z+12	; 0x0c
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	82 70       	andi	r24, 0x02	; 2
    1db8:	99 27       	eor	r25, r25
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f0       	breq	.+26     	; 0x1dd8 <OSMboxPend+0x13e>
            OSEventTO(pevent);                             /* Make task ready                          */
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	0e 94 37 09 	call	0x126e	; 0x126e <OSEventTO>
            OS_EXIT_CRITICAL();
    1dc6:	78 94       	sei
            msg                     = (void *)0;           /* Set message contents to NULL             */
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	19 82       	std	Y+1, r1	; 0x01
            *err                    = OS_TIMEOUT;          /* Indicate that a timeout occured          */
    1dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dce:	98 85       	ldd	r25, Y+8	; 0x08
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
    1dd6:	18 c0       	rjmp	.+48     	; 0x1e08 <OSMboxPend+0x16e>
        } else {
            msg                     = pevent->OSEventPtr;  /* Message received                         */
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
            pevent->OSEventPtr      = (void *)0;           /* Clear the mailbox                        */
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	fc 01       	movw	r30, r24
    1dec:	11 82       	std	Z+1, r1	; 0x01
    1dee:	10 82       	st	Z, r1
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    1df0:	80 91 5e 06 	lds	r24, 0x065E
    1df4:	90 91 5f 06 	lds	r25, 0x065F
    1df8:	fc 01       	movw	r30, r24
    1dfa:	17 82       	std	Z+7, r1	; 0x07
    1dfc:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    1dfe:	78 94       	sei
            *err                    = OS_NO_ERR;
    1e00:	8f 81       	ldd	r24, Y+7	; 0x07
    1e02:	98 85       	ldd	r25, Y+8	; 0x08
    1e04:	fc 01       	movw	r30, r24
    1e06:	10 82       	st	Z, r1
        }
    }
    return (msg);                                          /* Return the message received (or NULL)    */
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e0c:	28 96       	adiw	r28, 0x08	; 8
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <OSMboxPost>:
*              OS_ERR_EVENT_TYPE  If you are attempting to post to a non mailbox.
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <OSMboxPost+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <OSMboxPost+0x8>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	7c 83       	std	Y+4, r23	; 0x04
    1e30:	6b 83       	std	Y+3, r22	; 0x03
    OS_ENTER_CRITICAL();
    1e32:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	fc 01       	movw	r30, r24
    1e3a:	84 85       	ldd	r24, Z+12	; 0x0c
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	19 f0       	breq	.+6      	; 0x1e46 <OSMboxPost+0x28>
        OS_EXIT_CRITICAL();
    1e40:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	26 c0       	rjmp	.+76     	; 0x1e92 <OSMboxPost+0x74>
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	85 85       	ldd	r24, Z+13	; 0x0d
    1e4e:	88 23       	and	r24, r24
    1e50:	69 f0       	breq	.+26     	; 0x1e6c <OSMboxPost+0x4e>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
    1e52:	2b 81       	ldd	r18, Y+3	; 0x03
    1e54:	3c 81       	ldd	r19, Y+4	; 0x04
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	42 e0       	ldi	r20, 0x02	; 2
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
    1e62:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
    1e64:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
        return (OS_NO_ERR);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	13 c0       	rjmp	.+38     	; 0x1e92 <OSMboxPost+0x74>
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	fc 01       	movw	r30, r24
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	19 f0       	breq	.+6      	; 0x1e80 <OSMboxPost+0x62>
            OS_EXIT_CRITICAL();
    1e7a:	78 94       	sei
            return (OS_MBOX_FULL);
    1e7c:	84 e1       	ldi	r24, 0x14	; 20
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <OSMboxPost+0x74>
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	fc 01       	movw	r30, r24
    1e8a:	31 83       	std	Z+1, r19	; 0x01
    1e8c:	20 83       	st	Z, r18
            OS_EXIT_CRITICAL();
    1e8e:	78 94       	sei
            return (OS_NO_ERR);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <OSSemCreate+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <OSSemCreate+0x8>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
    1eb0:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    1eb2:	80 91 5b 06 	lds	r24, 0x065B
    1eb6:	90 91 5c 06 	lds	r25, 0x065C
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    1ebe:	80 91 5b 06 	lds	r24, 0x065B
    1ec2:	90 91 5c 06 	lds	r25, 0x065C
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	59 f0       	breq	.+22     	; 0x1ee0 <OSSemCreate+0x40>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1eca:	80 91 5b 06 	lds	r24, 0x065B
    1ece:	90 91 5c 06 	lds	r25, 0x065C
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	90 93 5c 06 	sts	0x065C, r25
    1edc:	80 93 5b 06 	sts	0x065B, r24
    }
    OS_EXIT_CRITICAL();
    1ee0:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	81 f0       	breq	.+32     	; 0x1f0a <OSSemCreate+0x6a>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	23 e0       	ldi	r18, 0x03	; 3
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	24 87       	std	Z+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	fc 01       	movw	r30, r24
    1efe:	33 87       	std	Z+11, r19	; 0x0b
    1f00:	22 87       	std	Z+10, r18	; 0x0a
        OSEventWaitListInit(pevent);
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	0e 94 95 09 	call	0x132a	; 0x132a <OSEventWaitListInit>
    }
    return (pevent);
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <OSSemPend+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <OSSemPend+0x8>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <OSSemPend+0xa>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	7c 83       	std	Y+4, r23	; 0x04
    1f30:	6b 83       	std	Y+3, r22	; 0x03
    1f32:	5e 83       	std	Y+6, r21	; 0x06
    1f34:	4d 83       	std	Y+5, r20	; 0x05
    OS_ENTER_CRITICAL();
    1f36:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	31 f0       	breq	.+12     	; 0x1f50 <OSSemPend+0x34>
        OS_EXIT_CRITICAL();
    1f44:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	21 e0       	ldi	r18, 0x01	; 1
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
    }
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	fc 01       	movw	r30, r24
    1f56:	82 85       	ldd	r24, Z+10	; 0x0a
    1f58:	93 85       	ldd	r25, Z+11	; 0x0b
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	99 f0       	breq	.+38     	; 0x1f84 <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	fc 01       	movw	r30, r24
    1f64:	82 85       	ldd	r24, Z+10	; 0x0a
    1f66:	93 85       	ldd	r25, Z+11	; 0x0b
    1f68:	9c 01       	movw	r18, r24
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	31 09       	sbc	r19, r1
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	fc 01       	movw	r30, r24
    1f74:	33 87       	std	Z+11, r19	; 0x0b
    1f76:	22 87       	std	Z+10, r18	; 0x0a
        OS_EXIT_CRITICAL();
    1f78:	78 94       	sei
        *err = OS_NO_ERR;
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	fc 01       	movw	r30, r24
    1f80:	10 82       	st	Z, r1
    1f82:	4c c0       	rjmp	.+152    	; 0x201c <OSSemPend+0x100>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
    1f84:	80 91 5d 06 	lds	r24, 0x065D
    1f88:	88 23       	and	r24, r24
    1f8a:	39 f0       	breq	.+14     	; 0x1f9a <OSSemPend+0x7e>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
    1f8c:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	22 e0       	ldi	r18, 0x02	; 2
    1f94:	fc 01       	movw	r30, r24
    1f96:	20 83       	st	Z, r18
    1f98:	41 c0       	rjmp	.+130    	; 0x201c <OSSemPend+0x100>
    } else {                                          /* Otherwise, must wait until event occurs       */
        OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
    1f9a:	80 91 5e 06 	lds	r24, 0x065E
    1f9e:	90 91 5f 06 	lds	r25, 0x065F
    1fa2:	20 91 5e 06 	lds	r18, 0x065E
    1fa6:	30 91 5f 06 	lds	r19, 0x065F
    1faa:	f9 01       	movw	r30, r18
    1fac:	24 85       	ldd	r18, Z+12	; 0x0c
    1fae:	21 60       	ori	r18, 0x01	; 1
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	24 87       	std	Z+12, r18	; 0x0c
        OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
    1fb4:	80 91 5e 06 	lds	r24, 0x065E
    1fb8:	90 91 5f 06 	lds	r25, 0x065F
    1fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	33 87       	std	Z+11, r19	; 0x0b
    1fc4:	22 87       	std	Z+10, r18	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	0e 94 b7 08 	call	0x116e	; 0x116e <OSEventTaskWait>
        OS_EXIT_CRITICAL();
    1fce:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready         */
    1fd0:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
        OS_ENTER_CRITICAL();
    1fd4:	f8 94       	cli
        if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {      /* Must have timed out if still waiting for event*/
    1fd6:	80 91 5e 06 	lds	r24, 0x065E
    1fda:	90 91 5f 06 	lds	r25, 0x065F
    1fde:	fc 01       	movw	r30, r24
    1fe0:	84 85       	ldd	r24, Z+12	; 0x0c
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	99 27       	eor	r25, r25
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	59 f0       	breq	.+22     	; 0x2004 <OSSemPend+0xe8>
            OSEventTO(pevent);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	0e 94 37 09 	call	0x126e	; 0x126e <OSEventTO>
            OS_EXIT_CRITICAL();
    1ff6:	78 94       	sei
            *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	2a e0       	ldi	r18, 0x0A	; 10
    1ffe:	fc 01       	movw	r30, r24
    2000:	20 83       	st	Z, r18
    2002:	0c c0       	rjmp	.+24     	; 0x201c <OSSemPend+0x100>
        } else {
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    2004:	80 91 5e 06 	lds	r24, 0x065E
    2008:	90 91 5f 06 	lds	r25, 0x065F
    200c:	fc 01       	movw	r30, r24
    200e:	17 82       	std	Z+7, r1	; 0x07
    2010:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
    2012:	78 94       	sei
            *err = OS_NO_ERR;
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	fc 01       	movw	r30, r24
    201a:	10 82       	st	Z, r1
        }
    }
}
    201c:	26 96       	adiw	r28, 0x06	; 6
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	08 95       	ret

0000202e <OSSemPost>:
*              OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a semaphore
*********************************************************************************************************
*/

INT8U OSSemPost (OS_EVENT *pevent)
{
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	00 d0       	rcall	.+0      	; 0x2034 <OSSemPost+0x6>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    OS_ENTER_CRITICAL();
    203c:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	fc 01       	movw	r30, r24
    2044:	84 85       	ldd	r24, Z+12	; 0x0c
    2046:	83 30       	cpi	r24, 0x03	; 3
    2048:	19 f0       	breq	.+6      	; 0x2050 <OSSemPost+0x22>
        OS_EXIT_CRITICAL();
    204a:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	2d c0       	rjmp	.+90     	; 0x20aa <OSSemPost+0x7c>
    }
    if (pevent->OSEventGrp) {                              /* See if any task waiting for semaphore    */
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	fc 01       	movw	r30, r24
    2056:	85 85       	ldd	r24, Z+13	; 0x0d
    2058:	88 23       	and	r24, r24
    205a:	61 f0       	breq	.+24     	; 0x2074 <OSSemPost+0x46>
        OSEventTaskRdy(pevent, (void *)0, OS_STAT_SEM);    /* Ready highest prio task waiting on event */
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
    206a:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
    206c:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
        return (OS_NO_ERR);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	1b c0       	rjmp	.+54     	; 0x20aa <OSSemPost+0x7c>
    } else {
        if (pevent->OSEventCnt < 65535) {             /* Make sure semaphore will not overflow         */
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	fc 01       	movw	r30, r24
    207a:	82 85       	ldd	r24, Z+10	; 0x0a
    207c:	93 85       	ldd	r25, Z+11	; 0x0b
    207e:	8f 3f       	cpi	r24, 0xFF	; 255
    2080:	ff ef       	ldi	r31, 0xFF	; 255
    2082:	9f 07       	cpc	r25, r31
    2084:	81 f0       	breq	.+32     	; 0x20a6 <OSSemPost+0x78>
            pevent->OSEventCnt++;                     /* Increment semaphore count to register event   */
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	fc 01       	movw	r30, r24
    208c:	82 85       	ldd	r24, Z+10	; 0x0a
    208e:	93 85       	ldd	r25, Z+11	; 0x0b
    2090:	9c 01       	movw	r18, r24
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	fc 01       	movw	r30, r24
    209c:	33 87       	std	Z+11, r19	; 0x0b
    209e:	22 87       	std	Z+10, r18	; 0x0a
            OS_EXIT_CRITICAL();
    20a0:	78 94       	sei
            return (OS_NO_ERR);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <OSSemPost+0x7c>
        } else {                                      /* Semaphore value has reached its maximum       */
            OS_EXIT_CRITICAL();
    20a6:	78 94       	sei
            return (OS_SEM_OVF);
    20a8:	82 e3       	ldi	r24, 0x32	; 50
        }
    }
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	2a 97       	sbiw	r28, 0x0a	; 10
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	9d 83       	std	Y+5, r25	; 0x05
    20d6:	8c 83       	std	Y+4, r24	; 0x04
    20d8:	7f 83       	std	Y+7, r23	; 0x07
    20da:	6e 83       	std	Y+6, r22	; 0x06
    20dc:	59 87       	std	Y+9, r21	; 0x09
    20de:	48 87       	std	Y+8, r20	; 0x08
    20e0:	2a 87       	std	Y+10, r18	; 0x0a

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
    20e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e4:	80 34       	cpi	r24, 0x40	; 64
    20e6:	10 f0       	brcs	.+4      	; 0x20ec <OSTaskCreate+0x38>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    20e8:	8a e2       	ldi	r24, 0x2A	; 42
    20ea:	65 c0       	rjmp	.+202    	; 0x21b6 <OSTaskCreate+0x102>
    }
    OS_ENTER_CRITICAL();
    20ec:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    20ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	87 54       	subi	r24, 0x47	; 71
    20fa:	99 4f       	sbci	r25, 0xF9	; 249
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	09 f0       	breq	.+2      	; 0x2108 <OSTaskCreate+0x54>
    2106:	55 c0       	rjmp	.+170    	; 0x21b2 <OSTaskCreate+0xfe>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
    2108:	8a 85       	ldd	r24, Y+10	; 0x0a
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	87 54       	subi	r24, 0x47	; 71
    2114:	99 4f       	sbci	r25, 0xF9	; 249
    2116:	21 e0       	ldi	r18, 0x01	; 1
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	fc 01       	movw	r30, r24
    211c:	31 83       	std	Z+1, r19	; 0x01
    211e:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    2120:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
    2122:	48 85       	ldd	r20, Y+8	; 0x08
    2124:	59 85       	ldd	r21, Y+9	; 0x09
    2126:	6e 81       	ldd	r22, Y+6	; 0x06
    2128:	7f 81       	ldd	r23, Y+7	; 0x07
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <OSTaskStkInit>
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	c1 2c       	mov	r12, r1
    2140:	d1 2c       	mov	r13, r1
    2142:	e1 2c       	mov	r14, r1
    2144:	f1 2c       	mov	r15, r1
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	bc 01       	movw	r22, r24
    2154:	8a 85       	ldd	r24, Y+10	; 0x0a
    2156:	0e 94 76 0c 	call	0x18ec	; 0x18ec <OSTCBInit>
    215a:	8b 83       	std	Y+3, r24	; 0x03
        if (err == OS_NO_ERR) {
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 23       	and	r24, r24
    2160:	d1 f4       	brne	.+52     	; 0x2196 <OSTaskCreate+0xe2>
            OS_ENTER_CRITICAL();
    2162:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
    2164:	80 91 4f 06 	lds	r24, 0x064F
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	80 93 4f 06 	sts	0x064F, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
    216e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	87 54       	subi	r24, 0x47	; 71
    217a:	99 4f       	sbci	r25, 0xF9	; 249
    217c:	fc 01       	movw	r30, r24
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
    2186:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
    2188:	80 91 3b 06 	lds	r24, 0x063B
    218c:	88 23       	and	r24, r24
    218e:	79 f0       	breq	.+30     	; 0x21ae <OSTaskCreate+0xfa>
#if 0
				DebugPulse();
#endif					
                OSSched();
    2190:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <OSTaskCreate+0xfa>
            }
        } else {
            OS_ENTER_CRITICAL();
    2196:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    2198:	8a 85       	ldd	r24, Y+10	; 0x0a
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	87 54       	subi	r24, 0x47	; 71
    21a4:	99 4f       	sbci	r25, 0xF9	; 249
    21a6:	fc 01       	movw	r30, r24
    21a8:	11 82       	std	Z+1, r1	; 0x01
    21aa:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    21ac:	78 94       	sei

#if 0
		DebugPulse();
#endif	
		
        return (err);
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <OSTaskCreate+0x102>
    } else {
        OS_EXIT_CRITICAL();
    21b2:	78 94       	sei
        return (OS_PRIO_EXIST);
    21b4:	88 e2       	ldi	r24, 0x28	; 40
    }	
}
    21b6:	2a 96       	adiw	r28, 0x0a	; 10
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	08 95       	ret

000021d4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	00 d0       	rcall	.+0      	; 0x21da <OSTimeDly+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
    if (ticks > 0) {                                                      /* 0 means no delay!         */
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	09 f4       	brne	.+2      	; 0x21ec <OSTimeDly+0x18>
    21ea:	43 c0       	rjmp	.+134    	; 0x2272 <OSTimeDly+0x9e>
        OS_ENTER_CRITICAL();
    21ec:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
    21ee:	80 91 5e 06 	lds	r24, 0x065E
    21f2:	90 91 5f 06 	lds	r25, 0x065F
    21f6:	fc 01       	movw	r30, r24
    21f8:	87 85       	ldd	r24, Z+15	; 0x0f
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	20 91 5e 06 	lds	r18, 0x065E
    2202:	30 91 5f 06 	lds	r19, 0x065F
    2206:	f9 01       	movw	r30, r18
    2208:	27 85       	ldd	r18, Z+15	; 0x0f
    220a:	22 2f       	mov	r18, r18
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	2d 5a       	subi	r18, 0xAD	; 173
    2210:	39 4f       	sbci	r19, 0xF9	; 249
    2212:	f9 01       	movw	r30, r18
    2214:	20 81       	ld	r18, Z
    2216:	42 2f       	mov	r20, r18
    2218:	20 91 5e 06 	lds	r18, 0x065E
    221c:	30 91 5f 06 	lds	r19, 0x065F
    2220:	f9 01       	movw	r30, r18
    2222:	20 89       	ldd	r18, Z+16	; 0x10
    2224:	20 95       	com	r18
    2226:	24 23       	and	r18, r20
    2228:	42 2f       	mov	r20, r18
    222a:	9c 01       	movw	r18, r24
    222c:	2d 5a       	subi	r18, 0xAD	; 173
    222e:	39 4f       	sbci	r19, 0xF9	; 249
    2230:	f9 01       	movw	r30, r18
    2232:	40 83       	st	Z, r20
    2234:	8d 5a       	subi	r24, 0xAD	; 173
    2236:	99 4f       	sbci	r25, 0xF9	; 249
    2238:	fc 01       	movw	r30, r24
    223a:	80 81       	ld	r24, Z
    223c:	88 23       	and	r24, r24
    223e:	69 f4       	brne	.+26     	; 0x225a <OSTimeDly+0x86>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    2240:	80 91 5e 06 	lds	r24, 0x065E
    2244:	90 91 5f 06 	lds	r25, 0x065F
    2248:	fc 01       	movw	r30, r24
    224a:	81 89       	ldd	r24, Z+17	; 0x11
    224c:	98 2f       	mov	r25, r24
    224e:	90 95       	com	r25
    2250:	80 91 52 06 	lds	r24, 0x0652
    2254:	89 23       	and	r24, r25
    2256:	80 93 52 06 	sts	0x0652, r24
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
    225a:	80 91 5e 06 	lds	r24, 0x065E
    225e:	90 91 5f 06 	lds	r25, 0x065F
    2262:	29 81       	ldd	r18, Y+1	; 0x01
    2264:	3a 81       	ldd	r19, Y+2	; 0x02
    2266:	fc 01       	movw	r30, r24
    2268:	33 87       	std	Z+11, r19	; 0x0b
    226a:	22 87       	std	Z+10, r18	; 0x0a
        OS_EXIT_CRITICAL();
    226c:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
    226e:	0e 94 06 0b 	call	0x160c	; 0x160c <OSSched>
    }
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <__divsf3>:
    227c:	0c d0       	rcall	.+24     	; 0x2296 <__divsf3x>
    227e:	e6 c0       	rjmp	.+460    	; 0x244c <__fp_round>
    2280:	de d0       	rcall	.+444    	; 0x243e <__fp_pscB>
    2282:	40 f0       	brcs	.+16     	; 0x2294 <__divsf3+0x18>
    2284:	d5 d0       	rcall	.+426    	; 0x2430 <__fp_pscA>
    2286:	30 f0       	brcs	.+12     	; 0x2294 <__divsf3+0x18>
    2288:	21 f4       	brne	.+8      	; 0x2292 <__divsf3+0x16>
    228a:	5f 3f       	cpi	r21, 0xFF	; 255
    228c:	19 f0       	breq	.+6      	; 0x2294 <__divsf3+0x18>
    228e:	c7 c0       	rjmp	.+398    	; 0x241e <__fp_inf>
    2290:	51 11       	cpse	r21, r1
    2292:	10 c1       	rjmp	.+544    	; 0x24b4 <__fp_szero>
    2294:	ca c0       	rjmp	.+404    	; 0x242a <__fp_nan>

00002296 <__divsf3x>:
    2296:	eb d0       	rcall	.+470    	; 0x246e <__fp_split3>
    2298:	98 f3       	brcs	.-26     	; 0x2280 <__divsf3+0x4>

0000229a <__divsf3_pse>:
    229a:	99 23       	and	r25, r25
    229c:	c9 f3       	breq	.-14     	; 0x2290 <__divsf3+0x14>
    229e:	55 23       	and	r21, r21
    22a0:	b1 f3       	breq	.-20     	; 0x228e <__divsf3+0x12>
    22a2:	95 1b       	sub	r25, r21
    22a4:	55 0b       	sbc	r21, r21
    22a6:	bb 27       	eor	r27, r27
    22a8:	aa 27       	eor	r26, r26
    22aa:	62 17       	cp	r22, r18
    22ac:	73 07       	cpc	r23, r19
    22ae:	84 07       	cpc	r24, r20
    22b0:	38 f0       	brcs	.+14     	; 0x22c0 <__divsf3_pse+0x26>
    22b2:	9f 5f       	subi	r25, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	22 0f       	add	r18, r18
    22b8:	33 1f       	adc	r19, r19
    22ba:	44 1f       	adc	r20, r20
    22bc:	aa 1f       	adc	r26, r26
    22be:	a9 f3       	breq	.-22     	; 0x22aa <__divsf3_pse+0x10>
    22c0:	33 d0       	rcall	.+102    	; 0x2328 <__divsf3_pse+0x8e>
    22c2:	0e 2e       	mov	r0, r30
    22c4:	3a f0       	brmi	.+14     	; 0x22d4 <__divsf3_pse+0x3a>
    22c6:	e0 e8       	ldi	r30, 0x80	; 128
    22c8:	30 d0       	rcall	.+96     	; 0x232a <__divsf3_pse+0x90>
    22ca:	91 50       	subi	r25, 0x01	; 1
    22cc:	50 40       	sbci	r21, 0x00	; 0
    22ce:	e6 95       	lsr	r30
    22d0:	00 1c       	adc	r0, r0
    22d2:	ca f7       	brpl	.-14     	; 0x22c6 <__divsf3_pse+0x2c>
    22d4:	29 d0       	rcall	.+82     	; 0x2328 <__divsf3_pse+0x8e>
    22d6:	fe 2f       	mov	r31, r30
    22d8:	27 d0       	rcall	.+78     	; 0x2328 <__divsf3_pse+0x8e>
    22da:	66 0f       	add	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	bb 1f       	adc	r27, r27
    22e2:	26 17       	cp	r18, r22
    22e4:	37 07       	cpc	r19, r23
    22e6:	48 07       	cpc	r20, r24
    22e8:	ab 07       	cpc	r26, r27
    22ea:	b0 e8       	ldi	r27, 0x80	; 128
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <__divsf3_pse+0x56>
    22ee:	bb 0b       	sbc	r27, r27
    22f0:	80 2d       	mov	r24, r0
    22f2:	bf 01       	movw	r22, r30
    22f4:	ff 27       	eor	r31, r31
    22f6:	93 58       	subi	r25, 0x83	; 131
    22f8:	5f 4f       	sbci	r21, 0xFF	; 255
    22fa:	2a f0       	brmi	.+10     	; 0x2306 <__divsf3_pse+0x6c>
    22fc:	9e 3f       	cpi	r25, 0xFE	; 254
    22fe:	51 05       	cpc	r21, r1
    2300:	68 f0       	brcs	.+26     	; 0x231c <__divsf3_pse+0x82>
    2302:	8d c0       	rjmp	.+282    	; 0x241e <__fp_inf>
    2304:	d7 c0       	rjmp	.+430    	; 0x24b4 <__fp_szero>
    2306:	5f 3f       	cpi	r21, 0xFF	; 255
    2308:	ec f3       	brlt	.-6      	; 0x2304 <__divsf3_pse+0x6a>
    230a:	98 3e       	cpi	r25, 0xE8	; 232
    230c:	dc f3       	brlt	.-10     	; 0x2304 <__divsf3_pse+0x6a>
    230e:	86 95       	lsr	r24
    2310:	77 95       	ror	r23
    2312:	67 95       	ror	r22
    2314:	b7 95       	ror	r27
    2316:	f7 95       	ror	r31
    2318:	9f 5f       	subi	r25, 0xFF	; 255
    231a:	c9 f7       	brne	.-14     	; 0x230e <__divsf3_pse+0x74>
    231c:	88 0f       	add	r24, r24
    231e:	91 1d       	adc	r25, r1
    2320:	96 95       	lsr	r25
    2322:	87 95       	ror	r24
    2324:	97 f9       	bld	r25, 7
    2326:	08 95       	ret
    2328:	e1 e0       	ldi	r30, 0x01	; 1
    232a:	66 0f       	add	r22, r22
    232c:	77 1f       	adc	r23, r23
    232e:	88 1f       	adc	r24, r24
    2330:	bb 1f       	adc	r27, r27
    2332:	62 17       	cp	r22, r18
    2334:	73 07       	cpc	r23, r19
    2336:	84 07       	cpc	r24, r20
    2338:	ba 07       	cpc	r27, r26
    233a:	20 f0       	brcs	.+8      	; 0x2344 <__divsf3_pse+0xaa>
    233c:	62 1b       	sub	r22, r18
    233e:	73 0b       	sbc	r23, r19
    2340:	84 0b       	sbc	r24, r20
    2342:	ba 0b       	sbc	r27, r26
    2344:	ee 1f       	adc	r30, r30
    2346:	88 f7       	brcc	.-30     	; 0x232a <__divsf3_pse+0x90>
    2348:	e0 95       	com	r30
    234a:	08 95       	ret

0000234c <__fixunssfsi>:
    234c:	98 d0       	rcall	.+304    	; 0x247e <__fp_splitA>
    234e:	88 f0       	brcs	.+34     	; 0x2372 <__fixunssfsi+0x26>
    2350:	9f 57       	subi	r25, 0x7F	; 127
    2352:	90 f0       	brcs	.+36     	; 0x2378 <__fixunssfsi+0x2c>
    2354:	b9 2f       	mov	r27, r25
    2356:	99 27       	eor	r25, r25
    2358:	b7 51       	subi	r27, 0x17	; 23
    235a:	a0 f0       	brcs	.+40     	; 0x2384 <__fixunssfsi+0x38>
    235c:	d1 f0       	breq	.+52     	; 0x2392 <__fixunssfsi+0x46>
    235e:	66 0f       	add	r22, r22
    2360:	77 1f       	adc	r23, r23
    2362:	88 1f       	adc	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	1a f0       	brmi	.+6      	; 0x236e <__fixunssfsi+0x22>
    2368:	ba 95       	dec	r27
    236a:	c9 f7       	brne	.-14     	; 0x235e <__fixunssfsi+0x12>
    236c:	12 c0       	rjmp	.+36     	; 0x2392 <__fixunssfsi+0x46>
    236e:	b1 30       	cpi	r27, 0x01	; 1
    2370:	81 f0       	breq	.+32     	; 0x2392 <__fixunssfsi+0x46>
    2372:	9f d0       	rcall	.+318    	; 0x24b2 <__fp_zero>
    2374:	b1 e0       	ldi	r27, 0x01	; 1
    2376:	08 95       	ret
    2378:	9c c0       	rjmp	.+312    	; 0x24b2 <__fp_zero>
    237a:	67 2f       	mov	r22, r23
    237c:	78 2f       	mov	r23, r24
    237e:	88 27       	eor	r24, r24
    2380:	b8 5f       	subi	r27, 0xF8	; 248
    2382:	39 f0       	breq	.+14     	; 0x2392 <__fixunssfsi+0x46>
    2384:	b9 3f       	cpi	r27, 0xF9	; 249
    2386:	cc f3       	brlt	.-14     	; 0x237a <__fixunssfsi+0x2e>
    2388:	86 95       	lsr	r24
    238a:	77 95       	ror	r23
    238c:	67 95       	ror	r22
    238e:	b3 95       	inc	r27
    2390:	d9 f7       	brne	.-10     	; 0x2388 <__fixunssfsi+0x3c>
    2392:	3e f4       	brtc	.+14     	; 0x23a2 <__fixunssfsi+0x56>
    2394:	90 95       	com	r25
    2396:	80 95       	com	r24
    2398:	70 95       	com	r23
    239a:	61 95       	neg	r22
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	08 95       	ret

000023a4 <__floatunsisf>:
    23a4:	e8 94       	clt
    23a6:	09 c0       	rjmp	.+18     	; 0x23ba <__floatsisf+0x12>

000023a8 <__floatsisf>:
    23a8:	97 fb       	bst	r25, 7
    23aa:	3e f4       	brtc	.+14     	; 0x23ba <__floatsisf+0x12>
    23ac:	90 95       	com	r25
    23ae:	80 95       	com	r24
    23b0:	70 95       	com	r23
    23b2:	61 95       	neg	r22
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	8f 4f       	sbci	r24, 0xFF	; 255
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	99 23       	and	r25, r25
    23bc:	a9 f0       	breq	.+42     	; 0x23e8 <__floatsisf+0x40>
    23be:	f9 2f       	mov	r31, r25
    23c0:	96 e9       	ldi	r25, 0x96	; 150
    23c2:	bb 27       	eor	r27, r27
    23c4:	93 95       	inc	r25
    23c6:	f6 95       	lsr	r31
    23c8:	87 95       	ror	r24
    23ca:	77 95       	ror	r23
    23cc:	67 95       	ror	r22
    23ce:	b7 95       	ror	r27
    23d0:	f1 11       	cpse	r31, r1
    23d2:	f8 cf       	rjmp	.-16     	; 0x23c4 <__floatsisf+0x1c>
    23d4:	fa f4       	brpl	.+62     	; 0x2414 <__floatsisf+0x6c>
    23d6:	bb 0f       	add	r27, r27
    23d8:	11 f4       	brne	.+4      	; 0x23de <__floatsisf+0x36>
    23da:	60 ff       	sbrs	r22, 0
    23dc:	1b c0       	rjmp	.+54     	; 0x2414 <__floatsisf+0x6c>
    23de:	6f 5f       	subi	r22, 0xFF	; 255
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	8f 4f       	sbci	r24, 0xFF	; 255
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	16 c0       	rjmp	.+44     	; 0x2414 <__floatsisf+0x6c>
    23e8:	88 23       	and	r24, r24
    23ea:	11 f0       	breq	.+4      	; 0x23f0 <__floatsisf+0x48>
    23ec:	96 e9       	ldi	r25, 0x96	; 150
    23ee:	11 c0       	rjmp	.+34     	; 0x2412 <__floatsisf+0x6a>
    23f0:	77 23       	and	r23, r23
    23f2:	21 f0       	breq	.+8      	; 0x23fc <__floatsisf+0x54>
    23f4:	9e e8       	ldi	r25, 0x8E	; 142
    23f6:	87 2f       	mov	r24, r23
    23f8:	76 2f       	mov	r23, r22
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <__floatsisf+0x5e>
    23fc:	66 23       	and	r22, r22
    23fe:	71 f0       	breq	.+28     	; 0x241c <__floatsisf+0x74>
    2400:	96 e8       	ldi	r25, 0x86	; 134
    2402:	86 2f       	mov	r24, r22
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	2a f0       	brmi	.+10     	; 0x2414 <__floatsisf+0x6c>
    240a:	9a 95       	dec	r25
    240c:	66 0f       	add	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	da f7       	brpl	.-10     	; 0x240a <__floatsisf+0x62>
    2414:	88 0f       	add	r24, r24
    2416:	96 95       	lsr	r25
    2418:	87 95       	ror	r24
    241a:	97 f9       	bld	r25, 7
    241c:	08 95       	ret

0000241e <__fp_inf>:
    241e:	97 f9       	bld	r25, 7
    2420:	9f 67       	ori	r25, 0x7F	; 127
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	08 95       	ret

0000242a <__fp_nan>:
    242a:	9f ef       	ldi	r25, 0xFF	; 255
    242c:	80 ec       	ldi	r24, 0xC0	; 192
    242e:	08 95       	ret

00002430 <__fp_pscA>:
    2430:	00 24       	eor	r0, r0
    2432:	0a 94       	dec	r0
    2434:	16 16       	cp	r1, r22
    2436:	17 06       	cpc	r1, r23
    2438:	18 06       	cpc	r1, r24
    243a:	09 06       	cpc	r0, r25
    243c:	08 95       	ret

0000243e <__fp_pscB>:
    243e:	00 24       	eor	r0, r0
    2440:	0a 94       	dec	r0
    2442:	12 16       	cp	r1, r18
    2444:	13 06       	cpc	r1, r19
    2446:	14 06       	cpc	r1, r20
    2448:	05 06       	cpc	r0, r21
    244a:	08 95       	ret

0000244c <__fp_round>:
    244c:	09 2e       	mov	r0, r25
    244e:	03 94       	inc	r0
    2450:	00 0c       	add	r0, r0
    2452:	11 f4       	brne	.+4      	; 0x2458 <__fp_round+0xc>
    2454:	88 23       	and	r24, r24
    2456:	52 f0       	brmi	.+20     	; 0x246c <__fp_round+0x20>
    2458:	bb 0f       	add	r27, r27
    245a:	40 f4       	brcc	.+16     	; 0x246c <__fp_round+0x20>
    245c:	bf 2b       	or	r27, r31
    245e:	11 f4       	brne	.+4      	; 0x2464 <__fp_round+0x18>
    2460:	60 ff       	sbrs	r22, 0
    2462:	04 c0       	rjmp	.+8      	; 0x246c <__fp_round+0x20>
    2464:	6f 5f       	subi	r22, 0xFF	; 255
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	8f 4f       	sbci	r24, 0xFF	; 255
    246a:	9f 4f       	sbci	r25, 0xFF	; 255
    246c:	08 95       	ret

0000246e <__fp_split3>:
    246e:	57 fd       	sbrc	r21, 7
    2470:	90 58       	subi	r25, 0x80	; 128
    2472:	44 0f       	add	r20, r20
    2474:	55 1f       	adc	r21, r21
    2476:	59 f0       	breq	.+22     	; 0x248e <__fp_splitA+0x10>
    2478:	5f 3f       	cpi	r21, 0xFF	; 255
    247a:	71 f0       	breq	.+28     	; 0x2498 <__fp_splitA+0x1a>
    247c:	47 95       	ror	r20

0000247e <__fp_splitA>:
    247e:	88 0f       	add	r24, r24
    2480:	97 fb       	bst	r25, 7
    2482:	99 1f       	adc	r25, r25
    2484:	61 f0       	breq	.+24     	; 0x249e <__fp_splitA+0x20>
    2486:	9f 3f       	cpi	r25, 0xFF	; 255
    2488:	79 f0       	breq	.+30     	; 0x24a8 <__fp_splitA+0x2a>
    248a:	87 95       	ror	r24
    248c:	08 95       	ret
    248e:	12 16       	cp	r1, r18
    2490:	13 06       	cpc	r1, r19
    2492:	14 06       	cpc	r1, r20
    2494:	55 1f       	adc	r21, r21
    2496:	f2 cf       	rjmp	.-28     	; 0x247c <__fp_split3+0xe>
    2498:	46 95       	lsr	r20
    249a:	f1 df       	rcall	.-30     	; 0x247e <__fp_splitA>
    249c:	08 c0       	rjmp	.+16     	; 0x24ae <__fp_splitA+0x30>
    249e:	16 16       	cp	r1, r22
    24a0:	17 06       	cpc	r1, r23
    24a2:	18 06       	cpc	r1, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	f1 cf       	rjmp	.-30     	; 0x248a <__fp_splitA+0xc>
    24a8:	86 95       	lsr	r24
    24aa:	71 05       	cpc	r23, r1
    24ac:	61 05       	cpc	r22, r1
    24ae:	08 94       	sec
    24b0:	08 95       	ret

000024b2 <__fp_zero>:
    24b2:	e8 94       	clt

000024b4 <__fp_szero>:
    24b4:	bb 27       	eor	r27, r27
    24b6:	66 27       	eor	r22, r22
    24b8:	77 27       	eor	r23, r23
    24ba:	cb 01       	movw	r24, r22
    24bc:	97 f9       	bld	r25, 7
    24be:	08 95       	ret

000024c0 <__udivmodhi4>:
    24c0:	aa 1b       	sub	r26, r26
    24c2:	bb 1b       	sub	r27, r27
    24c4:	51 e1       	ldi	r21, 0x11	; 17
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <__udivmodhi4_ep>

000024c8 <__udivmodhi4_loop>:
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	a6 17       	cp	r26, r22
    24ce:	b7 07       	cpc	r27, r23
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <__udivmodhi4_ep>
    24d2:	a6 1b       	sub	r26, r22
    24d4:	b7 0b       	sbc	r27, r23

000024d6 <__udivmodhi4_ep>:
    24d6:	88 1f       	adc	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	5a 95       	dec	r21
    24dc:	a9 f7       	brne	.-22     	; 0x24c8 <__udivmodhi4_loop>
    24de:	80 95       	com	r24
    24e0:	90 95       	com	r25
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	08 95       	ret

000024e8 <__udivmodsi4>:
    24e8:	a1 e2       	ldi	r26, 0x21	; 33
    24ea:	1a 2e       	mov	r1, r26
    24ec:	aa 1b       	sub	r26, r26
    24ee:	bb 1b       	sub	r27, r27
    24f0:	fd 01       	movw	r30, r26
    24f2:	0d c0       	rjmp	.+26     	; 0x250e <__udivmodsi4_ep>

000024f4 <__udivmodsi4_loop>:
    24f4:	aa 1f       	adc	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	ee 1f       	adc	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	a2 17       	cp	r26, r18
    24fe:	b3 07       	cpc	r27, r19
    2500:	e4 07       	cpc	r30, r20
    2502:	f5 07       	cpc	r31, r21
    2504:	20 f0       	brcs	.+8      	; 0x250e <__udivmodsi4_ep>
    2506:	a2 1b       	sub	r26, r18
    2508:	b3 0b       	sbc	r27, r19
    250a:	e4 0b       	sbc	r30, r20
    250c:	f5 0b       	sbc	r31, r21

0000250e <__udivmodsi4_ep>:
    250e:	66 1f       	adc	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	1a 94       	dec	r1
    2518:	69 f7       	brne	.-38     	; 0x24f4 <__udivmodsi4_loop>
    251a:	60 95       	com	r22
    251c:	70 95       	com	r23
    251e:	80 95       	com	r24
    2520:	90 95       	com	r25
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	bd 01       	movw	r22, r26
    2528:	cf 01       	movw	r24, r30
    252a:	08 95       	ret

0000252c <__umulhisi3>:
    252c:	a2 9f       	mul	r26, r18
    252e:	b0 01       	movw	r22, r0
    2530:	b3 9f       	mul	r27, r19
    2532:	c0 01       	movw	r24, r0
    2534:	a3 9f       	mul	r26, r19
    2536:	70 0d       	add	r23, r0
    2538:	81 1d       	adc	r24, r1
    253a:	11 24       	eor	r1, r1
    253c:	91 1d       	adc	r25, r1
    253e:	b2 9f       	mul	r27, r18
    2540:	70 0d       	add	r23, r0
    2542:	81 1d       	adc	r24, r1
    2544:	11 24       	eor	r1, r1
    2546:	91 1d       	adc	r25, r1
    2548:	08 95       	ret

0000254a <__muluhisi3>:
    254a:	0e 94 96 12 	call	0x252c	; 0x252c <__umulhisi3>
    254e:	a5 9f       	mul	r26, r21
    2550:	90 0d       	add	r25, r0
    2552:	b4 9f       	mul	r27, r20
    2554:	90 0d       	add	r25, r0
    2556:	a4 9f       	mul	r26, r20
    2558:	80 0d       	add	r24, r0
    255a:	91 1d       	adc	r25, r1
    255c:	11 24       	eor	r1, r1
    255e:	08 95       	ret

00002560 <strlen>:
    2560:	fc 01       	movw	r30, r24
    2562:	01 90       	ld	r0, Z+
    2564:	00 20       	and	r0, r0
    2566:	e9 f7       	brne	.-6      	; 0x2562 <strlen+0x2>
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	8e 0f       	add	r24, r30
    256e:	9f 1f       	adc	r25, r31
    2570:	08 95       	ret

00002572 <sprintf>:
    2572:	ae e0       	ldi	r26, 0x0E	; 14
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef eb       	ldi	r30, 0xBF	; 191
    2578:	f2 e1       	ldi	r31, 0x12	; 18
    257a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__prologue_saves__+0x1c>
    257e:	0d 89       	ldd	r16, Y+21	; 0x15
    2580:	1e 89       	ldd	r17, Y+22	; 0x16
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	8c 83       	std	Y+4, r24	; 0x04
    2586:	1a 83       	std	Y+2, r17	; 0x02
    2588:	09 83       	std	Y+1, r16	; 0x01
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	9f e7       	ldi	r25, 0x7F	; 127
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	ae 01       	movw	r20, r28
    2594:	47 5e       	subi	r20, 0xE7	; 231
    2596:	5f 4f       	sbci	r21, 0xFF	; 255
    2598:	6f 89       	ldd	r22, Y+23	; 0x17
    259a:	78 8d       	ldd	r23, Y+24	; 0x18
    259c:	ce 01       	movw	r24, r28
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <vfprintf>
    25a4:	ef 81       	ldd	r30, Y+7	; 0x07
    25a6:	f8 85       	ldd	r31, Y+8	; 0x08
    25a8:	e0 0f       	add	r30, r16
    25aa:	f1 1f       	adc	r31, r17
    25ac:	10 82       	st	Z, r1
    25ae:	2e 96       	adiw	r28, 0x0e	; 14
    25b0:	e4 e0       	ldi	r30, 0x04	; 4
    25b2:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__epilogue_restores__+0x1c>

000025b6 <vfprintf>:
    25b6:	ac e0       	ldi	r26, 0x0C	; 12
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e1 ee       	ldi	r30, 0xE1	; 225
    25bc:	f2 e1       	ldi	r31, 0x12	; 18
    25be:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__>
    25c2:	7c 01       	movw	r14, r24
    25c4:	6b 01       	movw	r12, r22
    25c6:	8a 01       	movw	r16, r20
    25c8:	fc 01       	movw	r30, r24
    25ca:	17 82       	std	Z+7, r1	; 0x07
    25cc:	16 82       	std	Z+6, r1	; 0x06
    25ce:	83 81       	ldd	r24, Z+3	; 0x03
    25d0:	81 ff       	sbrs	r24, 1
    25d2:	bd c1       	rjmp	.+890    	; 0x294e <vfprintf+0x398>
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	4c 01       	movw	r8, r24
    25da:	f7 01       	movw	r30, r14
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	f6 01       	movw	r30, r12
    25e0:	93 fd       	sbrc	r25, 3
    25e2:	85 91       	lpm	r24, Z+
    25e4:	93 ff       	sbrs	r25, 3
    25e6:	81 91       	ld	r24, Z+
    25e8:	6f 01       	movw	r12, r30
    25ea:	88 23       	and	r24, r24
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <vfprintf+0x3a>
    25ee:	ab c1       	rjmp	.+854    	; 0x2946 <vfprintf+0x390>
    25f0:	85 32       	cpi	r24, 0x25	; 37
    25f2:	39 f4       	brne	.+14     	; 0x2602 <vfprintf+0x4c>
    25f4:	93 fd       	sbrc	r25, 3
    25f6:	85 91       	lpm	r24, Z+
    25f8:	93 ff       	sbrs	r25, 3
    25fa:	81 91       	ld	r24, Z+
    25fc:	6f 01       	movw	r12, r30
    25fe:	85 32       	cpi	r24, 0x25	; 37
    2600:	29 f4       	brne	.+10     	; 0x260c <vfprintf+0x56>
    2602:	b7 01       	movw	r22, r14
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    260a:	e7 cf       	rjmp	.-50     	; 0x25da <vfprintf+0x24>
    260c:	51 2c       	mov	r5, r1
    260e:	31 2c       	mov	r3, r1
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	20 32       	cpi	r18, 0x20	; 32
    2614:	a0 f4       	brcc	.+40     	; 0x263e <vfprintf+0x88>
    2616:	8b 32       	cpi	r24, 0x2B	; 43
    2618:	69 f0       	breq	.+26     	; 0x2634 <vfprintf+0x7e>
    261a:	30 f4       	brcc	.+12     	; 0x2628 <vfprintf+0x72>
    261c:	80 32       	cpi	r24, 0x20	; 32
    261e:	59 f0       	breq	.+22     	; 0x2636 <vfprintf+0x80>
    2620:	83 32       	cpi	r24, 0x23	; 35
    2622:	69 f4       	brne	.+26     	; 0x263e <vfprintf+0x88>
    2624:	20 61       	ori	r18, 0x10	; 16
    2626:	2c c0       	rjmp	.+88     	; 0x2680 <vfprintf+0xca>
    2628:	8d 32       	cpi	r24, 0x2D	; 45
    262a:	39 f0       	breq	.+14     	; 0x263a <vfprintf+0x84>
    262c:	80 33       	cpi	r24, 0x30	; 48
    262e:	39 f4       	brne	.+14     	; 0x263e <vfprintf+0x88>
    2630:	21 60       	ori	r18, 0x01	; 1
    2632:	26 c0       	rjmp	.+76     	; 0x2680 <vfprintf+0xca>
    2634:	22 60       	ori	r18, 0x02	; 2
    2636:	24 60       	ori	r18, 0x04	; 4
    2638:	23 c0       	rjmp	.+70     	; 0x2680 <vfprintf+0xca>
    263a:	28 60       	ori	r18, 0x08	; 8
    263c:	21 c0       	rjmp	.+66     	; 0x2680 <vfprintf+0xca>
    263e:	27 fd       	sbrc	r18, 7
    2640:	27 c0       	rjmp	.+78     	; 0x2690 <vfprintf+0xda>
    2642:	30 ed       	ldi	r19, 0xD0	; 208
    2644:	38 0f       	add	r19, r24
    2646:	3a 30       	cpi	r19, 0x0A	; 10
    2648:	78 f4       	brcc	.+30     	; 0x2668 <vfprintf+0xb2>
    264a:	26 ff       	sbrs	r18, 6
    264c:	06 c0       	rjmp	.+12     	; 0x265a <vfprintf+0xa4>
    264e:	fa e0       	ldi	r31, 0x0A	; 10
    2650:	5f 9e       	mul	r5, r31
    2652:	30 0d       	add	r19, r0
    2654:	11 24       	eor	r1, r1
    2656:	53 2e       	mov	r5, r19
    2658:	13 c0       	rjmp	.+38     	; 0x2680 <vfprintf+0xca>
    265a:	8a e0       	ldi	r24, 0x0A	; 10
    265c:	38 9e       	mul	r3, r24
    265e:	30 0d       	add	r19, r0
    2660:	11 24       	eor	r1, r1
    2662:	33 2e       	mov	r3, r19
    2664:	20 62       	ori	r18, 0x20	; 32
    2666:	0c c0       	rjmp	.+24     	; 0x2680 <vfprintf+0xca>
    2668:	8e 32       	cpi	r24, 0x2E	; 46
    266a:	21 f4       	brne	.+8      	; 0x2674 <vfprintf+0xbe>
    266c:	26 fd       	sbrc	r18, 6
    266e:	6b c1       	rjmp	.+726    	; 0x2946 <vfprintf+0x390>
    2670:	20 64       	ori	r18, 0x40	; 64
    2672:	06 c0       	rjmp	.+12     	; 0x2680 <vfprintf+0xca>
    2674:	8c 36       	cpi	r24, 0x6C	; 108
    2676:	11 f4       	brne	.+4      	; 0x267c <vfprintf+0xc6>
    2678:	20 68       	ori	r18, 0x80	; 128
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <vfprintf+0xca>
    267c:	88 36       	cpi	r24, 0x68	; 104
    267e:	41 f4       	brne	.+16     	; 0x2690 <vfprintf+0xda>
    2680:	f6 01       	movw	r30, r12
    2682:	93 fd       	sbrc	r25, 3
    2684:	85 91       	lpm	r24, Z+
    2686:	93 ff       	sbrs	r25, 3
    2688:	81 91       	ld	r24, Z+
    268a:	6f 01       	movw	r12, r30
    268c:	81 11       	cpse	r24, r1
    268e:	c1 cf       	rjmp	.-126    	; 0x2612 <vfprintf+0x5c>
    2690:	98 2f       	mov	r25, r24
    2692:	9f 7d       	andi	r25, 0xDF	; 223
    2694:	95 54       	subi	r25, 0x45	; 69
    2696:	93 30       	cpi	r25, 0x03	; 3
    2698:	28 f4       	brcc	.+10     	; 0x26a4 <vfprintf+0xee>
    269a:	0c 5f       	subi	r16, 0xFC	; 252
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	ff e3       	ldi	r31, 0x3F	; 63
    26a0:	f9 83       	std	Y+1, r31	; 0x01
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <vfprintf+0x108>
    26a4:	83 36       	cpi	r24, 0x63	; 99
    26a6:	31 f0       	breq	.+12     	; 0x26b4 <vfprintf+0xfe>
    26a8:	83 37       	cpi	r24, 0x73	; 115
    26aa:	71 f0       	breq	.+28     	; 0x26c8 <vfprintf+0x112>
    26ac:	83 35       	cpi	r24, 0x53	; 83
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <vfprintf+0xfc>
    26b0:	5b c0       	rjmp	.+182    	; 0x2768 <vfprintf+0x1b2>
    26b2:	22 c0       	rjmp	.+68     	; 0x26f8 <vfprintf+0x142>
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 81       	ld	r24, Z
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	0e 5f       	subi	r16, 0xFE	; 254
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	44 24       	eor	r4, r4
    26c0:	43 94       	inc	r4
    26c2:	51 2c       	mov	r5, r1
    26c4:	54 01       	movw	r10, r8
    26c6:	15 c0       	rjmp	.+42     	; 0x26f2 <vfprintf+0x13c>
    26c8:	38 01       	movw	r6, r16
    26ca:	f2 e0       	ldi	r31, 0x02	; 2
    26cc:	6f 0e       	add	r6, r31
    26ce:	71 1c       	adc	r7, r1
    26d0:	f8 01       	movw	r30, r16
    26d2:	a0 80       	ld	r10, Z
    26d4:	b1 80       	ldd	r11, Z+1	; 0x01
    26d6:	26 ff       	sbrs	r18, 6
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <vfprintf+0x12a>
    26da:	65 2d       	mov	r22, r5
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <vfprintf+0x12e>
    26e0:	6f ef       	ldi	r22, 0xFF	; 255
    26e2:	7f ef       	ldi	r23, 0xFF	; 255
    26e4:	c5 01       	movw	r24, r10
    26e6:	2c 87       	std	Y+12, r18	; 0x0c
    26e8:	0e 94 b8 14 	call	0x2970	; 0x2970 <strnlen>
    26ec:	2c 01       	movw	r4, r24
    26ee:	83 01       	movw	r16, r6
    26f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26f2:	2f 77       	andi	r18, 0x7F	; 127
    26f4:	22 2e       	mov	r2, r18
    26f6:	17 c0       	rjmp	.+46     	; 0x2726 <vfprintf+0x170>
    26f8:	38 01       	movw	r6, r16
    26fa:	f2 e0       	ldi	r31, 0x02	; 2
    26fc:	6f 0e       	add	r6, r31
    26fe:	71 1c       	adc	r7, r1
    2700:	f8 01       	movw	r30, r16
    2702:	a0 80       	ld	r10, Z
    2704:	b1 80       	ldd	r11, Z+1	; 0x01
    2706:	26 ff       	sbrs	r18, 6
    2708:	03 c0       	rjmp	.+6      	; 0x2710 <vfprintf+0x15a>
    270a:	65 2d       	mov	r22, r5
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <vfprintf+0x15e>
    2710:	6f ef       	ldi	r22, 0xFF	; 255
    2712:	7f ef       	ldi	r23, 0xFF	; 255
    2714:	c5 01       	movw	r24, r10
    2716:	2c 87       	std	Y+12, r18	; 0x0c
    2718:	0e 94 ad 14 	call	0x295a	; 0x295a <strnlen_P>
    271c:	2c 01       	movw	r4, r24
    271e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2720:	20 68       	ori	r18, 0x80	; 128
    2722:	22 2e       	mov	r2, r18
    2724:	83 01       	movw	r16, r6
    2726:	23 fc       	sbrc	r2, 3
    2728:	1b c0       	rjmp	.+54     	; 0x2760 <vfprintf+0x1aa>
    272a:	83 2d       	mov	r24, r3
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	48 16       	cp	r4, r24
    2730:	59 06       	cpc	r5, r25
    2732:	b0 f4       	brcc	.+44     	; 0x2760 <vfprintf+0x1aa>
    2734:	b7 01       	movw	r22, r14
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    273e:	3a 94       	dec	r3
    2740:	f4 cf       	rjmp	.-24     	; 0x272a <vfprintf+0x174>
    2742:	f5 01       	movw	r30, r10
    2744:	27 fc       	sbrc	r2, 7
    2746:	85 91       	lpm	r24, Z+
    2748:	27 fe       	sbrs	r2, 7
    274a:	81 91       	ld	r24, Z+
    274c:	5f 01       	movw	r10, r30
    274e:	b7 01       	movw	r22, r14
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    2756:	31 10       	cpse	r3, r1
    2758:	3a 94       	dec	r3
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	4f 1a       	sub	r4, r31
    275e:	51 08       	sbc	r5, r1
    2760:	41 14       	cp	r4, r1
    2762:	51 04       	cpc	r5, r1
    2764:	71 f7       	brne	.-36     	; 0x2742 <vfprintf+0x18c>
    2766:	e5 c0       	rjmp	.+458    	; 0x2932 <vfprintf+0x37c>
    2768:	84 36       	cpi	r24, 0x64	; 100
    276a:	11 f0       	breq	.+4      	; 0x2770 <vfprintf+0x1ba>
    276c:	89 36       	cpi	r24, 0x69	; 105
    276e:	39 f5       	brne	.+78     	; 0x27be <vfprintf+0x208>
    2770:	f8 01       	movw	r30, r16
    2772:	27 ff       	sbrs	r18, 7
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <vfprintf+0x1ce>
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	0c 5f       	subi	r16, 0xFC	; 252
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <vfprintf+0x1de>
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	88 27       	eor	r24, r24
    278a:	77 fd       	sbrc	r23, 7
    278c:	80 95       	com	r24
    278e:	98 2f       	mov	r25, r24
    2790:	0e 5f       	subi	r16, 0xFE	; 254
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	2f 76       	andi	r18, 0x6F	; 111
    2796:	b2 2e       	mov	r11, r18
    2798:	97 ff       	sbrs	r25, 7
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <vfprintf+0x1f8>
    279c:	90 95       	com	r25
    279e:	80 95       	com	r24
    27a0:	70 95       	com	r23
    27a2:	61 95       	neg	r22
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	8f 4f       	sbci	r24, 0xFF	; 255
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	20 68       	ori	r18, 0x80	; 128
    27ac:	b2 2e       	mov	r11, r18
    27ae:	2a e0       	ldi	r18, 0x0A	; 10
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	a4 01       	movw	r20, r8
    27b4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__ultoa_invert>
    27b8:	a8 2e       	mov	r10, r24
    27ba:	a8 18       	sub	r10, r8
    27bc:	44 c0       	rjmp	.+136    	; 0x2846 <vfprintf+0x290>
    27be:	85 37       	cpi	r24, 0x75	; 117
    27c0:	29 f4       	brne	.+10     	; 0x27cc <vfprintf+0x216>
    27c2:	2f 7e       	andi	r18, 0xEF	; 239
    27c4:	b2 2e       	mov	r11, r18
    27c6:	2a e0       	ldi	r18, 0x0A	; 10
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	25 c0       	rjmp	.+74     	; 0x2816 <vfprintf+0x260>
    27cc:	f2 2f       	mov	r31, r18
    27ce:	f9 7f       	andi	r31, 0xF9	; 249
    27d0:	bf 2e       	mov	r11, r31
    27d2:	8f 36       	cpi	r24, 0x6F	; 111
    27d4:	c1 f0       	breq	.+48     	; 0x2806 <vfprintf+0x250>
    27d6:	18 f4       	brcc	.+6      	; 0x27de <vfprintf+0x228>
    27d8:	88 35       	cpi	r24, 0x58	; 88
    27da:	79 f0       	breq	.+30     	; 0x27fa <vfprintf+0x244>
    27dc:	b4 c0       	rjmp	.+360    	; 0x2946 <vfprintf+0x390>
    27de:	80 37       	cpi	r24, 0x70	; 112
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <vfprintf+0x232>
    27e2:	88 37       	cpi	r24, 0x78	; 120
    27e4:	21 f0       	breq	.+8      	; 0x27ee <vfprintf+0x238>
    27e6:	af c0       	rjmp	.+350    	; 0x2946 <vfprintf+0x390>
    27e8:	2f 2f       	mov	r18, r31
    27ea:	20 61       	ori	r18, 0x10	; 16
    27ec:	b2 2e       	mov	r11, r18
    27ee:	b4 fe       	sbrs	r11, 4
    27f0:	0d c0       	rjmp	.+26     	; 0x280c <vfprintf+0x256>
    27f2:	8b 2d       	mov	r24, r11
    27f4:	84 60       	ori	r24, 0x04	; 4
    27f6:	b8 2e       	mov	r11, r24
    27f8:	09 c0       	rjmp	.+18     	; 0x280c <vfprintf+0x256>
    27fa:	24 ff       	sbrs	r18, 4
    27fc:	0a c0       	rjmp	.+20     	; 0x2812 <vfprintf+0x25c>
    27fe:	9f 2f       	mov	r25, r31
    2800:	96 60       	ori	r25, 0x06	; 6
    2802:	b9 2e       	mov	r11, r25
    2804:	06 c0       	rjmp	.+12     	; 0x2812 <vfprintf+0x25c>
    2806:	28 e0       	ldi	r18, 0x08	; 8
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x260>
    280c:	20 e1       	ldi	r18, 0x10	; 16
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0x260>
    2812:	20 e1       	ldi	r18, 0x10	; 16
    2814:	32 e0       	ldi	r19, 0x02	; 2
    2816:	f8 01       	movw	r30, r16
    2818:	b7 fe       	sbrs	r11, 7
    281a:	07 c0       	rjmp	.+14     	; 0x282a <vfprintf+0x274>
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	0c 5f       	subi	r16, 0xFC	; 252
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <vfprintf+0x280>
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 5f       	subi	r16, 0xFE	; 254
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	a4 01       	movw	r20, r8
    2838:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__ultoa_invert>
    283c:	a8 2e       	mov	r10, r24
    283e:	a8 18       	sub	r10, r8
    2840:	fb 2d       	mov	r31, r11
    2842:	ff 77       	andi	r31, 0x7F	; 127
    2844:	bf 2e       	mov	r11, r31
    2846:	b6 fe       	sbrs	r11, 6
    2848:	0b c0       	rjmp	.+22     	; 0x2860 <vfprintf+0x2aa>
    284a:	2b 2d       	mov	r18, r11
    284c:	2e 7f       	andi	r18, 0xFE	; 254
    284e:	a5 14       	cp	r10, r5
    2850:	50 f4       	brcc	.+20     	; 0x2866 <vfprintf+0x2b0>
    2852:	b4 fe       	sbrs	r11, 4
    2854:	0a c0       	rjmp	.+20     	; 0x286a <vfprintf+0x2b4>
    2856:	b2 fc       	sbrc	r11, 2
    2858:	08 c0       	rjmp	.+16     	; 0x286a <vfprintf+0x2b4>
    285a:	2b 2d       	mov	r18, r11
    285c:	2e 7e       	andi	r18, 0xEE	; 238
    285e:	05 c0       	rjmp	.+10     	; 0x286a <vfprintf+0x2b4>
    2860:	7a 2c       	mov	r7, r10
    2862:	2b 2d       	mov	r18, r11
    2864:	03 c0       	rjmp	.+6      	; 0x286c <vfprintf+0x2b6>
    2866:	7a 2c       	mov	r7, r10
    2868:	01 c0       	rjmp	.+2      	; 0x286c <vfprintf+0x2b6>
    286a:	75 2c       	mov	r7, r5
    286c:	24 ff       	sbrs	r18, 4
    286e:	0d c0       	rjmp	.+26     	; 0x288a <vfprintf+0x2d4>
    2870:	fe 01       	movw	r30, r28
    2872:	ea 0d       	add	r30, r10
    2874:	f1 1d       	adc	r31, r1
    2876:	80 81       	ld	r24, Z
    2878:	80 33       	cpi	r24, 0x30	; 48
    287a:	11 f4       	brne	.+4      	; 0x2880 <vfprintf+0x2ca>
    287c:	29 7e       	andi	r18, 0xE9	; 233
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <vfprintf+0x2dc>
    2880:	22 ff       	sbrs	r18, 2
    2882:	06 c0       	rjmp	.+12     	; 0x2890 <vfprintf+0x2da>
    2884:	73 94       	inc	r7
    2886:	73 94       	inc	r7
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <vfprintf+0x2dc>
    288a:	82 2f       	mov	r24, r18
    288c:	86 78       	andi	r24, 0x86	; 134
    288e:	09 f0       	breq	.+2      	; 0x2892 <vfprintf+0x2dc>
    2890:	73 94       	inc	r7
    2892:	23 fd       	sbrc	r18, 3
    2894:	13 c0       	rjmp	.+38     	; 0x28bc <vfprintf+0x306>
    2896:	20 ff       	sbrs	r18, 0
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <vfprintf+0x2f0>
    289a:	5a 2c       	mov	r5, r10
    289c:	73 14       	cp	r7, r3
    289e:	18 f4       	brcc	.+6      	; 0x28a6 <vfprintf+0x2f0>
    28a0:	53 0c       	add	r5, r3
    28a2:	57 18       	sub	r5, r7
    28a4:	73 2c       	mov	r7, r3
    28a6:	73 14       	cp	r7, r3
    28a8:	68 f4       	brcc	.+26     	; 0x28c4 <vfprintf+0x30e>
    28aa:	b7 01       	movw	r22, r14
    28ac:	80 e2       	ldi	r24, 0x20	; 32
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	2c 87       	std	Y+12, r18	; 0x0c
    28b2:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    28b6:	73 94       	inc	r7
    28b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    28ba:	f5 cf       	rjmp	.-22     	; 0x28a6 <vfprintf+0x2f0>
    28bc:	73 14       	cp	r7, r3
    28be:	10 f4       	brcc	.+4      	; 0x28c4 <vfprintf+0x30e>
    28c0:	37 18       	sub	r3, r7
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <vfprintf+0x310>
    28c4:	31 2c       	mov	r3, r1
    28c6:	24 ff       	sbrs	r18, 4
    28c8:	12 c0       	rjmp	.+36     	; 0x28ee <vfprintf+0x338>
    28ca:	b7 01       	movw	r22, r14
    28cc:	80 e3       	ldi	r24, 0x30	; 48
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	2c 87       	std	Y+12, r18	; 0x0c
    28d2:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    28d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    28d8:	22 ff       	sbrs	r18, 2
    28da:	17 c0       	rjmp	.+46     	; 0x290a <vfprintf+0x354>
    28dc:	21 ff       	sbrs	r18, 1
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <vfprintf+0x330>
    28e0:	88 e5       	ldi	r24, 0x58	; 88
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <vfprintf+0x334>
    28e6:	88 e7       	ldi	r24, 0x78	; 120
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	b7 01       	movw	r22, r14
    28ec:	0c c0       	rjmp	.+24     	; 0x2906 <vfprintf+0x350>
    28ee:	82 2f       	mov	r24, r18
    28f0:	86 78       	andi	r24, 0x86	; 134
    28f2:	59 f0       	breq	.+22     	; 0x290a <vfprintf+0x354>
    28f4:	21 fd       	sbrc	r18, 1
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <vfprintf+0x346>
    28f8:	80 e2       	ldi	r24, 0x20	; 32
    28fa:	01 c0       	rjmp	.+2      	; 0x28fe <vfprintf+0x348>
    28fc:	8b e2       	ldi	r24, 0x2B	; 43
    28fe:	27 fd       	sbrc	r18, 7
    2900:	8d e2       	ldi	r24, 0x2D	; 45
    2902:	b7 01       	movw	r22, r14
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    290a:	a5 14       	cp	r10, r5
    290c:	38 f4       	brcc	.+14     	; 0x291c <vfprintf+0x366>
    290e:	b7 01       	movw	r22, r14
    2910:	80 e3       	ldi	r24, 0x30	; 48
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    2918:	5a 94       	dec	r5
    291a:	f7 cf       	rjmp	.-18     	; 0x290a <vfprintf+0x354>
    291c:	aa 94       	dec	r10
    291e:	f4 01       	movw	r30, r8
    2920:	ea 0d       	add	r30, r10
    2922:	f1 1d       	adc	r31, r1
    2924:	80 81       	ld	r24, Z
    2926:	b7 01       	movw	r22, r14
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    292e:	a1 10       	cpse	r10, r1
    2930:	f5 cf       	rjmp	.-22     	; 0x291c <vfprintf+0x366>
    2932:	33 20       	and	r3, r3
    2934:	09 f4       	brne	.+2      	; 0x2938 <vfprintf+0x382>
    2936:	51 ce       	rjmp	.-862    	; 0x25da <vfprintf+0x24>
    2938:	b7 01       	movw	r22, r14
    293a:	80 e2       	ldi	r24, 0x20	; 32
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 c3 14 	call	0x2986	; 0x2986 <fputc>
    2942:	3a 94       	dec	r3
    2944:	f6 cf       	rjmp	.-20     	; 0x2932 <vfprintf+0x37c>
    2946:	f7 01       	movw	r30, r14
    2948:	86 81       	ldd	r24, Z+6	; 0x06
    294a:	97 81       	ldd	r25, Z+7	; 0x07
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <vfprintf+0x39c>
    294e:	8f ef       	ldi	r24, 0xFF	; 255
    2950:	9f ef       	ldi	r25, 0xFF	; 255
    2952:	2c 96       	adiw	r28, 0x0c	; 12
    2954:	e2 e1       	ldi	r30, 0x12	; 18
    2956:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__>

0000295a <strnlen_P>:
    295a:	fc 01       	movw	r30, r24
    295c:	05 90       	lpm	r0, Z+
    295e:	61 50       	subi	r22, 0x01	; 1
    2960:	70 40       	sbci	r23, 0x00	; 0
    2962:	01 10       	cpse	r0, r1
    2964:	d8 f7       	brcc	.-10     	; 0x295c <strnlen_P+0x2>
    2966:	80 95       	com	r24
    2968:	90 95       	com	r25
    296a:	8e 0f       	add	r24, r30
    296c:	9f 1f       	adc	r25, r31
    296e:	08 95       	ret

00002970 <strnlen>:
    2970:	fc 01       	movw	r30, r24
    2972:	61 50       	subi	r22, 0x01	; 1
    2974:	70 40       	sbci	r23, 0x00	; 0
    2976:	01 90       	ld	r0, Z+
    2978:	01 10       	cpse	r0, r1
    297a:	d8 f7       	brcc	.-10     	; 0x2972 <strnlen+0x2>
    297c:	80 95       	com	r24
    297e:	90 95       	com	r25
    2980:	8e 0f       	add	r24, r30
    2982:	9f 1f       	adc	r25, r31
    2984:	08 95       	ret

00002986 <fputc>:
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	18 2f       	mov	r17, r24
    2990:	09 2f       	mov	r16, r25
    2992:	eb 01       	movw	r28, r22
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	81 fd       	sbrc	r24, 1
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <fputc+0x1a>
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	9f ef       	ldi	r25, 0xFF	; 255
    299e:	20 c0       	rjmp	.+64     	; 0x29e0 <fputc+0x5a>
    29a0:	82 ff       	sbrs	r24, 2
    29a2:	10 c0       	rjmp	.+32     	; 0x29c4 <fputc+0x3e>
    29a4:	4e 81       	ldd	r20, Y+6	; 0x06
    29a6:	5f 81       	ldd	r21, Y+7	; 0x07
    29a8:	2c 81       	ldd	r18, Y+4	; 0x04
    29aa:	3d 81       	ldd	r19, Y+5	; 0x05
    29ac:	42 17       	cp	r20, r18
    29ae:	53 07       	cpc	r21, r19
    29b0:	7c f4       	brge	.+30     	; 0x29d0 <fputc+0x4a>
    29b2:	e8 81       	ld	r30, Y
    29b4:	f9 81       	ldd	r31, Y+1	; 0x01
    29b6:	9f 01       	movw	r18, r30
    29b8:	2f 5f       	subi	r18, 0xFF	; 255
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	39 83       	std	Y+1, r19	; 0x01
    29be:	28 83       	st	Y, r18
    29c0:	10 83       	st	Z, r17
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <fputc+0x4a>
    29c4:	e8 85       	ldd	r30, Y+8	; 0x08
    29c6:	f9 85       	ldd	r31, Y+9	; 0x09
    29c8:	81 2f       	mov	r24, r17
    29ca:	09 95       	icall
    29cc:	89 2b       	or	r24, r25
    29ce:	29 f7       	brne	.-54     	; 0x299a <fputc+0x14>
    29d0:	2e 81       	ldd	r18, Y+6	; 0x06
    29d2:	3f 81       	ldd	r19, Y+7	; 0x07
    29d4:	2f 5f       	subi	r18, 0xFF	; 255
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	3f 83       	std	Y+7, r19	; 0x07
    29da:	2e 83       	std	Y+6, r18	; 0x06
    29dc:	81 2f       	mov	r24, r17
    29de:	90 2f       	mov	r25, r16
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <__ultoa_invert>:
    29ea:	fa 01       	movw	r30, r20
    29ec:	aa 27       	eor	r26, r26
    29ee:	28 30       	cpi	r18, 0x08	; 8
    29f0:	51 f1       	breq	.+84     	; 0x2a46 <__ultoa_invert+0x5c>
    29f2:	20 31       	cpi	r18, 0x10	; 16
    29f4:	81 f1       	breq	.+96     	; 0x2a56 <__ultoa_invert+0x6c>
    29f6:	e8 94       	clt
    29f8:	6f 93       	push	r22
    29fa:	6e 7f       	andi	r22, 0xFE	; 254
    29fc:	6e 5f       	subi	r22, 0xFE	; 254
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	8f 4f       	sbci	r24, 0xFF	; 255
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	af 4f       	sbci	r26, 0xFF	; 255
    2a06:	b1 e0       	ldi	r27, 0x01	; 1
    2a08:	3e d0       	rcall	.+124    	; 0x2a86 <__ultoa_invert+0x9c>
    2a0a:	b4 e0       	ldi	r27, 0x04	; 4
    2a0c:	3c d0       	rcall	.+120    	; 0x2a86 <__ultoa_invert+0x9c>
    2a0e:	67 0f       	add	r22, r23
    2a10:	78 1f       	adc	r23, r24
    2a12:	89 1f       	adc	r24, r25
    2a14:	9a 1f       	adc	r25, r26
    2a16:	a1 1d       	adc	r26, r1
    2a18:	68 0f       	add	r22, r24
    2a1a:	79 1f       	adc	r23, r25
    2a1c:	8a 1f       	adc	r24, r26
    2a1e:	91 1d       	adc	r25, r1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	6a 0f       	add	r22, r26
    2a24:	71 1d       	adc	r23, r1
    2a26:	81 1d       	adc	r24, r1
    2a28:	91 1d       	adc	r25, r1
    2a2a:	a1 1d       	adc	r26, r1
    2a2c:	20 d0       	rcall	.+64     	; 0x2a6e <__ultoa_invert+0x84>
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <__ultoa_invert+0x48>
    2a30:	68 94       	set
    2a32:	3f 91       	pop	r19
    2a34:	2a e0       	ldi	r18, 0x0A	; 10
    2a36:	26 9f       	mul	r18, r22
    2a38:	11 24       	eor	r1, r1
    2a3a:	30 19       	sub	r19, r0
    2a3c:	30 5d       	subi	r19, 0xD0	; 208
    2a3e:	31 93       	st	Z+, r19
    2a40:	de f6       	brtc	.-74     	; 0x29f8 <__ultoa_invert+0xe>
    2a42:	cf 01       	movw	r24, r30
    2a44:	08 95       	ret
    2a46:	46 2f       	mov	r20, r22
    2a48:	47 70       	andi	r20, 0x07	; 7
    2a4a:	40 5d       	subi	r20, 0xD0	; 208
    2a4c:	41 93       	st	Z+, r20
    2a4e:	b3 e0       	ldi	r27, 0x03	; 3
    2a50:	0f d0       	rcall	.+30     	; 0x2a70 <__ultoa_invert+0x86>
    2a52:	c9 f7       	brne	.-14     	; 0x2a46 <__ultoa_invert+0x5c>
    2a54:	f6 cf       	rjmp	.-20     	; 0x2a42 <__ultoa_invert+0x58>
    2a56:	46 2f       	mov	r20, r22
    2a58:	4f 70       	andi	r20, 0x0F	; 15
    2a5a:	40 5d       	subi	r20, 0xD0	; 208
    2a5c:	4a 33       	cpi	r20, 0x3A	; 58
    2a5e:	18 f0       	brcs	.+6      	; 0x2a66 <__ultoa_invert+0x7c>
    2a60:	49 5d       	subi	r20, 0xD9	; 217
    2a62:	31 fd       	sbrc	r19, 1
    2a64:	40 52       	subi	r20, 0x20	; 32
    2a66:	41 93       	st	Z+, r20
    2a68:	02 d0       	rcall	.+4      	; 0x2a6e <__ultoa_invert+0x84>
    2a6a:	a9 f7       	brne	.-22     	; 0x2a56 <__ultoa_invert+0x6c>
    2a6c:	ea cf       	rjmp	.-44     	; 0x2a42 <__ultoa_invert+0x58>
    2a6e:	b4 e0       	ldi	r27, 0x04	; 4
    2a70:	a6 95       	lsr	r26
    2a72:	97 95       	ror	r25
    2a74:	87 95       	ror	r24
    2a76:	77 95       	ror	r23
    2a78:	67 95       	ror	r22
    2a7a:	ba 95       	dec	r27
    2a7c:	c9 f7       	brne	.-14     	; 0x2a70 <__ultoa_invert+0x86>
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	61 05       	cpc	r22, r1
    2a82:	71 05       	cpc	r23, r1
    2a84:	08 95       	ret
    2a86:	9b 01       	movw	r18, r22
    2a88:	ac 01       	movw	r20, r24
    2a8a:	0a 2e       	mov	r0, r26
    2a8c:	06 94       	lsr	r0
    2a8e:	57 95       	ror	r21
    2a90:	47 95       	ror	r20
    2a92:	37 95       	ror	r19
    2a94:	27 95       	ror	r18
    2a96:	ba 95       	dec	r27
    2a98:	c9 f7       	brne	.-14     	; 0x2a8c <__ultoa_invert+0xa2>
    2a9a:	62 0f       	add	r22, r18
    2a9c:	73 1f       	adc	r23, r19
    2a9e:	84 1f       	adc	r24, r20
    2aa0:	95 1f       	adc	r25, r21
    2aa2:	a0 1d       	adc	r26, r0
    2aa4:	08 95       	ret

00002aa6 <__prologue_saves__>:
    2aa6:	2f 92       	push	r2
    2aa8:	3f 92       	push	r3
    2aaa:	4f 92       	push	r4
    2aac:	5f 92       	push	r5
    2aae:	6f 92       	push	r6
    2ab0:	7f 92       	push	r7
    2ab2:	8f 92       	push	r8
    2ab4:	9f 92       	push	r9
    2ab6:	af 92       	push	r10
    2ab8:	bf 92       	push	r11
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	ca 1b       	sub	r28, r26
    2ad0:	db 0b       	sbc	r29, r27
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	09 94       	ijmp

00002ade <__epilogue_restores__>:
    2ade:	2a 88       	ldd	r2, Y+18	; 0x12
    2ae0:	39 88       	ldd	r3, Y+17	; 0x11
    2ae2:	48 88       	ldd	r4, Y+16	; 0x10
    2ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aea:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aec:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2af0:	b9 84       	ldd	r11, Y+9	; 0x09
    2af2:	c8 84       	ldd	r12, Y+8	; 0x08
    2af4:	df 80       	ldd	r13, Y+7	; 0x07
    2af6:	ee 80       	ldd	r14, Y+6	; 0x06
    2af8:	fd 80       	ldd	r15, Y+5	; 0x05
    2afa:	0c 81       	ldd	r16, Y+4	; 0x04
    2afc:	1b 81       	ldd	r17, Y+3	; 0x03
    2afe:	aa 81       	ldd	r26, Y+2	; 0x02
    2b00:	b9 81       	ldd	r27, Y+1	; 0x01
    2b02:	ce 0f       	add	r28, r30
    2b04:	d1 1d       	adc	r29, r1
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	ed 01       	movw	r28, r26
    2b12:	08 95       	ret

00002b14 <_exit>:
    2b14:	f8 94       	cli

00002b16 <__stop_program>:
    2b16:	ff cf       	rjmp	.-2      	; 0x2b16 <__stop_program>
